<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: CLDepthwiseSeparableConvolutionLayer Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">19.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1_c_l_depthwise_separable_convolution_layer.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">CLDepthwiseSeparableConvolutionLayer Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Basic function to execute depthwise convolution.  
 <a href="classarm__compute_1_1_c_l_depthwise_separable_convolution_layer.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_c_l_depthwise_separable_convolution_layer_8h_source.xhtml">CLDepthwiseSeparableConvolutionLayer.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for CLDepthwiseSeparableConvolutionLayer:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1_c_l_depthwise_separable_convolution_layer__coll__graph.svg" width="255" height="127"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aba650e8a288373c9dac19a4bb36c28bd"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_depthwise_separable_convolution_layer.xhtml#aba650e8a288373c9dac19a4bb36c28bd">CLDepthwiseSeparableConvolutionLayer</a> ()</td></tr>
<tr class="memdesc:aba650e8a288373c9dac19a4bb36c28bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#aba650e8a288373c9dac19a4bb36c28bd">More...</a><br /></td></tr>
<tr class="separator:aba650e8a288373c9dac19a4bb36c28bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7ca3f45f6dbfc7737c75fbf91fcc4c5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_depthwise_separable_convolution_layer.xhtml#af7ca3f45f6dbfc7737c75fbf91fcc4c5">configure</a> (<a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *input, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *depthwise_weights, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *depthwise_biases, <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *depthwise_out, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *pointwise_weights, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *pointwise_biases, <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;depthwise_conv_info, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;pointwise_conv_info)</td></tr>
<tr class="memdesc:af7ca3f45f6dbfc7737c75fbf91fcc4c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the input and output tensors.  <a href="#af7ca3f45f6dbfc7737c75fbf91fcc4c5">More...</a><br /></td></tr>
<tr class="separator:af7ca3f45f6dbfc7737c75fbf91fcc4c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1717410afd0be936c6213a63c8005fb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_depthwise_separable_convolution_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a> () override</td></tr>
<tr class="memdesc:ad1717410afd0be936c6213a63c8005fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Run the kernels contained in the function.  <a href="#ad1717410afd0be936c6213a63c8005fb">More...</a><br /></td></tr>
<tr class="separator:ad1717410afd0be936c6213a63c8005fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9b93ef660fc3c5b4b19d3fc7b891b77"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_depthwise_separable_convolution_layer.xhtml#aa9b93ef660fc3c5b4b19d3fc7b891b77">prepare</a> () override</td></tr>
<tr class="memdesc:aa9b93ef660fc3c5b4b19d3fc7b891b77"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepare the function for executing.  <a href="#aa9b93ef660fc3c5b4b19d3fc7b891b77">More...</a><br /></td></tr>
<tr class="separator:aa9b93ef660fc3c5b4b19d3fc7b891b77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1_i_function"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1_i_function')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a></td></tr>
<tr class="memitem:ab921ecc3f3f6ae2b4bd61f3e1998d8c4 inherit pub_methods_classarm__compute_1_1_i_function"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_function.xhtml#ab921ecc3f3f6ae2b4bd61f3e1998d8c4">~IFunction</a> ()=default</td></tr>
<tr class="memdesc:ab921ecc3f3f6ae2b4bd61f3e1998d8c4 inherit pub_methods_classarm__compute_1_1_i_function"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="classarm__compute_1_1_i_function.xhtml#ab921ecc3f3f6ae2b4bd61f3e1998d8c4">More...</a><br /></td></tr>
<tr class="separator:ab921ecc3f3f6ae2b4bd61f3e1998d8c4 inherit pub_methods_classarm__compute_1_1_i_function"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Basic function to execute depthwise convolution. </p>
<p>This function calls the following OpenCL kernels and function:</p>
<ol type="1">
<li><a class="el" href="classarm__compute_1_1_c_l_depthwise_convolution_layer.xhtml">CLDepthwiseConvolutionLayer</a></li>
<li><p class="startli"><a class="el" href="classarm__compute_1_1_c_l_direct_convolution_layer.xhtml">CLDirectConvolutionLayer</a></p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.xhtml#_deprecated000002">Deprecated:</a></b></dt><dd>This function is deprecated and will be removed in release 19.11</dd></dl>
</li>
</ol>

<p class="definition">Definition at line <a class="el" href="_c_l_depthwise_separable_convolution_layer_8h_source.xhtml#l00048">48</a> of file <a class="el" href="_c_l_depthwise_separable_convolution_layer_8h_source.xhtml">CLDepthwiseSeparableConvolutionLayer.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="aba650e8a288373c9dac19a4bb36c28bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aba650e8a288373c9dac19a4bb36c28bd">&#9670;&nbsp;</a></span>CLDepthwiseSeparableConvolutionLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_depthwise_separable_convolution_layer.xhtml">CLDepthwiseSeparableConvolutionLayer</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_depthwise_separable_convolution_layer_8cpp_source.xhtml#l00033">33</a> of file <a class="el" href="_c_l_depthwise_separable_convolution_layer_8cpp_source.xhtml">CLDepthwiseSeparableConvolutionLayer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    : _depthwise_conv(), _pointwise_conv()</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="af7ca3f45f6dbfc7737c75fbf91fcc4c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af7ca3f45f6dbfc7737c75fbf91fcc4c5">&#9670;&nbsp;</a></span>configure()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void configure </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>depthwise_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>depthwise_biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>depthwise_out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>pointwise_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>pointwise_biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>depthwise_conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>pointwise_conv_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the input and output tensors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Source tensor. 3 lower dimensions represent a single input [width, height, IFM], while every optional dimension from 4 and above represent a batch of inputs. Data types supported: F32. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">depthwise_weights</td><td>Depthwise convolution weights tensor. These are 3D tensors with dimensions [kernel_x, kernel_y, IFM]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">depthwise_biases</td><td>(Optional) Biases tensor.Biases are 1D tensor with dimensions [IFM]. Must be nullptr if not needed. Data type supported: Same as <code>weights</code>. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">depthwise_out</td><td>Depthwise destination tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pointwise_weights</td><td>Pointwise convolution weights tensor. These are 4D tensors with dimensions [1, 1, IFM, OFM]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pointwise_biases</td><td>(Optional) Biases tensor. Biases are 1D tensor with dimensions [OFM]. Must be nullptr if not needed. Data type supported: Same as <code>weights</code>. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output</td><td>Destination tensor. 3 lower dimensions represent a single output [width, height, OFM], while the rest represent batch of outputs. Data types supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">depthwise_conv_info</td><td>Contains padding and stride information described in <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> for depthwise convolution. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pointwise_conv_info</td><td>Contains padding and stride information described in <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> for pointwise convolution. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_depthwise_separable_convolution_layer_8cpp_source.xhtml#l00038">38</a> of file <a class="el" href="_c_l_depthwise_separable_convolution_layer_8cpp_source.xhtml">CLDepthwiseSeparableConvolutionLayer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    _depthwise_conv.<a class="code" href="classarm__compute_1_1_c_l_depthwise_convolution_layer.xhtml#a3e75302bf93c0b3607943daca8ec2ed1">configure</a>(input, depthwise_weights, depthwise_biases, depthwise_out, depthwise_conv_info);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    _pointwise_conv.<a class="code" href="classarm__compute_1_1_c_l_direct_convolution_layer.xhtml#a2e850fb98fe28b49a41a89832e78e87c">configure</a>(depthwise_out, pointwise_weights, pointwise_biases, output, pointwise_conv_info);</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_direct_convolution_layer_xhtml_a2e850fb98fe28b49a41a89832e78e87c"><div class="ttname"><a href="classarm__compute_1_1_c_l_direct_convolution_layer.xhtml#a2e850fb98fe28b49a41a89832e78e87c">arm_compute::CLDirectConvolutionLayer::configure</a></div><div class="ttdeci">void configure(ICLTensor *input, const ICLTensor *weights, const ICLTensor *biases, ICLTensor *output, const PadStrideInfo &amp;conv_info, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Set the input and output tensors.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_direct_convolution_layer_8cpp_source.xhtml#l00040">CLDirectConvolutionLayer.cpp:40</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_depthwise_convolution_layer_xhtml_a3e75302bf93c0b3607943daca8ec2ed1"><div class="ttname"><a href="classarm__compute_1_1_c_l_depthwise_convolution_layer.xhtml#a3e75302bf93c0b3607943daca8ec2ed1">arm_compute::CLDepthwiseConvolutionLayer::configure</a></div><div class="ttdeci">void configure(ICLTensor *input, const ICLTensor *weights, const ICLTensor *biases, ICLTensor *output, const PadStrideInfo &amp;conv_info, unsigned int depth_multiplier=1, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo(), const Size2D &amp;dilation=Size2D(1U, 1U))</div><div class="ttdoc">Initialize the function's source, destination, weights and convolution information.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00256">CLDepthwiseConvolutionLayer.cpp:256</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_direct_convolution_layer_8cpp_source.xhtml#l00040">CLDirectConvolutionLayer::configure()</a>, and <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00256">CLDepthwiseConvolutionLayer::configure()</a>.</p>

</div>
</div>
<a id="aa9b93ef660fc3c5b4b19d3fc7b891b77"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9b93ef660fc3c5b4b19d3fc7b891b77">&#9670;&nbsp;</a></span>prepare()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void prepare </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prepare the function for executing. </p>
<p>Any one off pre-processing step required by the function is handled here</p>
<dl class="section note"><dt>Note</dt><dd>Prepare stage might not need all the function's buffers' backing memory to be available in order to execute </dd></dl>

<p>Reimplemented from <a class="el" href="classarm__compute_1_1_i_function.xhtml#a820f7291c24155a2980512fae45aac26">IFunction</a>.</p>

<p class="definition">Definition at line <a class="el" href="_c_l_depthwise_separable_convolution_layer_8cpp_source.xhtml#l00054">54</a> of file <a class="el" href="_c_l_depthwise_separable_convolution_layer_8cpp_source.xhtml">CLDepthwiseSeparableConvolutionLayer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    _depthwise_conv.<a class="code" href="classarm__compute_1_1_c_l_depthwise_convolution_layer.xhtml#aa9b93ef660fc3c5b4b19d3fc7b891b77">prepare</a>();</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    _pointwise_conv.<a class="code" href="classarm__compute_1_1_i_function.xhtml#a820f7291c24155a2980512fae45aac26">prepare</a>();</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_depthwise_convolution_layer_xhtml_aa9b93ef660fc3c5b4b19d3fc7b891b77"><div class="ttname"><a href="classarm__compute_1_1_c_l_depthwise_convolution_layer.xhtml#aa9b93ef660fc3c5b4b19d3fc7b891b77">arm_compute::CLDepthwiseConvolutionLayer::prepare</a></div><div class="ttdeci">void prepare() override</div><div class="ttdoc">Prepare the function for executing.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00481">CLDepthwiseConvolutionLayer.cpp:481</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_function_xhtml_a820f7291c24155a2980512fae45aac26"><div class="ttname"><a href="classarm__compute_1_1_i_function.xhtml#a820f7291c24155a2980512fae45aac26">arm_compute::IFunction::prepare</a></div><div class="ttdeci">virtual void prepare()</div><div class="ttdoc">Prepare the function for executing.</div><div class="ttdef"><b>Definition:</b> <a href="_i_function_8h_source.xhtml#l00057">IFunction.h:57</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_function_8h_source.xhtml#l00057">IFunction::prepare()</a>, and <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00481">CLDepthwiseConvolutionLayer::prepare()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_depthwise_separable_convolution_layer_8cpp_source.xhtml#l00046">CLDepthwiseSeparableConvolutionLayer::run()</a>.</p>

</div>
</div>
<a id="ad1717410afd0be936c6213a63c8005fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad1717410afd0be936c6213a63c8005fb">&#9670;&nbsp;</a></span>run()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void run </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Run the kernels contained in the function. </p>
<p>For NEON kernels:</p><ul>
<li>Multi-threading is used for the kernels which are parallelisable.</li>
<li>By default std::thread::hardware_concurrency() threads are used.</li>
</ul>
<dl class="section note"><dt>Note</dt><dd><a class="el" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#ae64eebaa07f4d2da6cc2ba538c3cb095">CPPScheduler::set_num_threads()</a> can be used to manually set the number of threads</dd></dl>
<p>For OpenCL kernels:</p><ul>
<li>All the kernels are enqueued on the queue associated with <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml" title="Provides global access to a CL context and command queue.">CLScheduler</a>.</li>
<li>The queue is then flushed.</li>
</ul>
<dl class="section note"><dt>Note</dt><dd>The function will not block until the kernels are executed. It is the user's responsibility to wait. </dd>
<dd>
Will call <a class="el" href="classarm__compute_1_1_c_l_depthwise_separable_convolution_layer.xhtml#aa9b93ef660fc3c5b4b19d3fc7b891b77" title="Prepare the function for executing.">prepare()</a> on first run if hasn't been done </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_function.xhtml#a18954417d3124a8095783ea13dc6d00b">IFunction</a>.</p>

<p class="definition">Definition at line <a class="el" href="_c_l_depthwise_separable_convolution_layer_8cpp_source.xhtml#l00046">46</a> of file <a class="el" href="_c_l_depthwise_separable_convolution_layer_8cpp_source.xhtml">CLDepthwiseSeparableConvolutionLayer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_depthwise_separable_convolution_layer.xhtml#aa9b93ef660fc3c5b4b19d3fc7b891b77">prepare</a>();</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    _depthwise_conv.<a class="code" href="classarm__compute_1_1_c_l_depthwise_convolution_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    _pointwise_conv.<a class="code" href="classarm__compute_1_1_c_l_direct_convolution_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_depthwise_separable_convolution_layer_xhtml_aa9b93ef660fc3c5b4b19d3fc7b891b77"><div class="ttname"><a href="classarm__compute_1_1_c_l_depthwise_separable_convolution_layer.xhtml#aa9b93ef660fc3c5b4b19d3fc7b891b77">arm_compute::CLDepthwiseSeparableConvolutionLayer::prepare</a></div><div class="ttdeci">void prepare() override</div><div class="ttdoc">Prepare the function for executing.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_depthwise_separable_convolution_layer_8cpp_source.xhtml#l00054">CLDepthwiseSeparableConvolutionLayer.cpp:54</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_direct_convolution_layer_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_direct_convolution_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLDirectConvolutionLayer::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_direct_convolution_layer_8cpp_source.xhtml#l00079">CLDirectConvolutionLayer.cpp:79</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_depthwise_convolution_layer_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_depthwise_convolution_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLDepthwiseConvolutionLayer::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00456">CLDepthwiseConvolutionLayer.cpp:456</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_depthwise_separable_convolution_layer_8cpp_source.xhtml#l00054">CLDepthwiseSeparableConvolutionLayer::prepare()</a>, <a class="el" href="_c_l_direct_convolution_layer_8cpp_source.xhtml#l00079">CLDirectConvolutionLayer::run()</a>, and <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00456">CLDepthwiseConvolutionLayer::run()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>arm_compute/runtime/CL/functions/<a class="el" href="_c_l_depthwise_separable_convolution_layer_8h_source.xhtml">CLDepthwiseSeparableConvolutionLayer.h</a></li>
<li>src/runtime/CL/functions/<a class="el" href="_c_l_depthwise_separable_convolution_layer_8cpp_source.xhtml">CLDepthwiseSeparableConvolutionLayer.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_c_l_depthwise_separable_convolution_layer.xhtml">CLDepthwiseSeparableConvolutionLayer</a></li>
    <li class="footer">Generated on Mon Sep 2 2019 11:47:32 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
