<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute/core/CL/CLKernelLibrary.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">19.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_c_l_kernel_library_8h_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CLKernelLibrary.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_c_l_kernel_library_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2016-2019 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef __ARM_COMPUTE_CLKERNELLIBRARY_H__</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define __ARM_COMPUTE_CLKERNELLIBRARY_H__</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_open_c_l_8h.xhtml">arm_compute/core/CL/OpenCL.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;set&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;utility&gt;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_build_options.xhtml">   37</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml">CLBuildOptions</a></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keyword">using</span> StringSet = std::set&lt;std::string&gt;;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml#af889744e64b496ba5dc1ef57f9918f79">CLBuildOptions</a>();</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml#a3e2b80ff5463b7d2017de847f5c32a30">add_option</a>(std::string option);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml#a95b46e69297fad10b27a1baa000f92cc">add_option_if</a>(<span class="keywordtype">bool</span> cond, std::string option);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml#a9b58a8c8bf638904a0b5f62b2bfcf96a">add_option_if_else</a>(<span class="keywordtype">bool</span> cond, std::string option_true, std::string option_false);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml#a58abf0792821f6f1d6271570aa27dd84">add_options</a>(<span class="keyword">const</span> StringSet &amp;<a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml#ae3b08139a1e57323c5d7dd93f30496c8">options</a>);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml#a504e7a51a86c19f1f529f739f50729f2">add_options_if</a>(<span class="keywordtype">bool</span> cond, <span class="keyword">const</span> StringSet &amp;<a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml#ae3b08139a1e57323c5d7dd93f30496c8">options</a>);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">const</span> StringSet &amp;<a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml#ae3b08139a1e57323c5d7dd93f30496c8">options</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    StringSet _build_opts; </div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;};</div><div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_program.xhtml">   83</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_program.xhtml">Program</a></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;{</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <a class="code" href="classarm__compute_1_1_program.xhtml#ad00a93de0aaf77172116c42bed3a5627">Program</a>();</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <a class="code" href="classarm__compute_1_1_program.xhtml#ad00a93de0aaf77172116c42bed3a5627">Program</a>(cl::Context context, std::string <a class="code" href="classarm__compute_1_1_program.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>, std::string source);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <a class="code" href="classarm__compute_1_1_program.xhtml#ad00a93de0aaf77172116c42bed3a5627">Program</a>(cl::Context context, cl::Device device, std::string <a class="code" href="classarm__compute_1_1_program.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>, std::vector&lt;unsigned char&gt; binary);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <a class="code" href="classarm__compute_1_1_program.xhtml#ad00a93de0aaf77172116c42bed3a5627">Program</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_program.xhtml">Program</a> &amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <a class="code" href="classarm__compute_1_1_program.xhtml#ad00a93de0aaf77172116c42bed3a5627">Program</a>(<a class="code" href="classarm__compute_1_1_program.xhtml">Program</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <a class="code" href="classarm__compute_1_1_program.xhtml">Program</a> &amp;<a class="code" href="classarm__compute_1_1_program.xhtml#aa960ae62f188ce6593855ea9d90f3140">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_program.xhtml">Program</a> &amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <a class="code" href="classarm__compute_1_1_program.xhtml">Program</a> &amp;<a class="code" href="classarm__compute_1_1_program.xhtml#aa960ae62f188ce6593855ea9d90f3140">operator=</a>(<a class="code" href="classarm__compute_1_1_program.xhtml">Program</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00115"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_program.xhtml#a1d89c28bd42ba9a52da008bb69367171">  115</a></span>&#160;    std::string <a class="code" href="classarm__compute_1_1_program.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keywordflow">return</span> _name;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    }</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keyword">explicit</span> <span class="keyword">operator</span> cl::Program() <span class="keyword">const</span>;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_program.xhtml#a14c39544e9ac2c2fce1179bd99f093c4">build</a>(<span class="keyword">const</span> cl::Program &amp;program, <span class="keyword">const</span> std::string &amp;build_options = <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    cl::Program <a class="code" href="classarm__compute_1_1_program.xhtml#a14c39544e9ac2c2fce1179bd99f093c4">build</a>(<span class="keyword">const</span> std::string &amp;build_options = <span class="stringliteral">&quot;&quot;</span>) <span class="keyword">const</span>;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    cl::Context                _context;   </div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    cl::Device                 _device;    </div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordtype">bool</span>                       _is_binary; </div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    std::string                _name;      </div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    std::string                _source;    </div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    std::vector&lt;unsigned char&gt; _binary;    </div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;};</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_kernel.xhtml">  150</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_kernel.xhtml">Kernel</a></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;{</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <a class="code" href="classarm__compute_1_1_kernel.xhtml#a4d7fb588e6d609d95d8cd491492ed420">Kernel</a>();</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <a class="code" href="classarm__compute_1_1_kernel.xhtml#a4d7fb588e6d609d95d8cd491492ed420">Kernel</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_kernel.xhtml">Kernel</a> &amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <a class="code" href="classarm__compute_1_1_kernel.xhtml#a4d7fb588e6d609d95d8cd491492ed420">Kernel</a>(<a class="code" href="classarm__compute_1_1_kernel.xhtml">Kernel</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <a class="code" href="classarm__compute_1_1_kernel.xhtml">Kernel</a> &amp;<a class="code" href="classarm__compute_1_1_kernel.xhtml#a9729d318da4230e664a923d7419ddf10">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_kernel.xhtml">Kernel</a> &amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <a class="code" href="classarm__compute_1_1_kernel.xhtml">Kernel</a> &amp;<a class="code" href="classarm__compute_1_1_kernel.xhtml#a9729d318da4230e664a923d7419ddf10">operator=</a>(<a class="code" href="classarm__compute_1_1_kernel.xhtml">Kernel</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <a class="code" href="classarm__compute_1_1_kernel.xhtml#a4d7fb588e6d609d95d8cd491492ed420">Kernel</a>(std::string <a class="code" href="classarm__compute_1_1_kernel.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>, <span class="keyword">const</span> cl::Program &amp;program);</div><div class="line"><a name="l00173"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_kernel.xhtml#a1d89c28bd42ba9a52da008bb69367171">  173</a></span>&#160;    std::string <a class="code" href="classarm__compute_1_1_kernel.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="keywordflow">return</span> _name;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    }</div><div class="line"><a name="l00181"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_kernel.xhtml#a2d8ca610baf983cdd36504b8f7e6603b">  181</a></span>&#160;    <span class="keyword">explicit</span> <span class="keyword">operator</span> cl::Kernel()<span class="keyword"> const</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keywordflow">return</span> _kernel;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    }</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    std::string _name;   </div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    cl::Kernel  _kernel; </div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;};</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_kernel_library.xhtml">  192</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml">CLKernelLibrary</a></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;{</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keyword">using</span> StringSet = std::set&lt;std::string&gt;;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml">CLKernelLibrary</a>();</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml">CLKernelLibrary</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml">CLKernelLibrary</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml">CLKernelLibrary</a> &amp;<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a54fb81956f9fb1c25b279e34e1e7d966">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml">CLKernelLibrary</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml">CLKernelLibrary</a> &amp;<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">get</a>();</div><div class="line"><a name="l00215"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a9f976367edcd9ab787375373e050b94b">  215</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a9f976367edcd9ab787375373e050b94b">init</a>(std::string kernel_path, cl::Context <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a252f5440564c77d68459f2baa978f86a">context</a>, cl::Device device)</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    {</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        _kernel_path = std::move(kernel_path);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        _context     = std::move(<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a252f5440564c77d68459f2baa978f86a">context</a>);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        _device      = std::move(device);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    }</div><div class="line"><a name="l00225"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a66a558a56f5d0dcd6305c405ebc38cc2">  225</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a66a558a56f5d0dcd6305c405ebc38cc2">set_kernel_path</a>(<span class="keyword">const</span> std::string &amp;kernel_path)</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    {</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        _kernel_path = kernel_path;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    };</div><div class="line"><a name="l00231"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_kernel_library.xhtml#ad7395c158d8e31b9af211b9bc1f65a08">  231</a></span>&#160;    std::string <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#ad7395c158d8e31b9af211b9bc1f65a08">get_kernel_path</a>()</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    {</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="keywordflow">return</span> _kernel_path;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    };</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    std::string <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a44e90c4fa1204a708499ece56d4c82f0">get_program_source</a>(<span class="keyword">const</span> std::string &amp;program_name);</div><div class="line"><a name="l00249"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a293edc1bbcbddffb7228ac97917ed107">  249</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a293edc1bbcbddffb7228ac97917ed107">set_context</a>(cl::Context <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a252f5440564c77d68459f2baa978f86a">context</a>)</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    {</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        _context = std::move(<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a252f5440564c77d68459f2baa978f86a">context</a>);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        <span class="keywordflow">if</span>(_context.get() == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        {</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            _device = cl::Device();</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        }</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        {</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> cl_devices = _context.getInfo&lt;CL_CONTEXT_DEVICES&gt;();</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            <span class="keywordflow">if</span>(cl_devices.empty())</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            {</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                _device = cl::Device();</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            }</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            {</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                _device = cl_devices[0];</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            }</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        }</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    }</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a252f5440564c77d68459f2baa978f86a">  275</a></span>&#160;    cl::Context &amp;<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a252f5440564c77d68459f2baa978f86a">context</a>()</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    {</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        <span class="keywordflow">return</span> _context;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    }</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a06733f65cb098d0ba67b028b1cb94b03">  281</a></span>&#160;    cl::Device &amp;<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a06733f65cb098d0ba67b028b1cb94b03">get_device</a>()</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    {</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <span class="keywordflow">return</span> _device;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    }</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a5a6865d04c8d3348860f3cb8100fdb97">  290</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a5a6865d04c8d3348860f3cb8100fdb97">set_device</a>(cl::Device device)</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    {</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        _device = std::move(device);</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    }</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    std::string <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#aef78b2e57b5203f8a184465e2da020ef">get_device_version</a>();</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    cl_uint <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a70696e3d56dcbcdc1f493dec744bc581">get_num_compute_units</a>();</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <a class="code" href="classarm__compute_1_1_kernel.xhtml">Kernel</a> <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a8c2942ccd8b3f3b82e3edb7950a9e414">create_kernel</a>(<span class="keyword">const</span> std::string &amp;kernel_name, <span class="keyword">const</span> StringSet &amp;build_options_set = {}) <span class="keyword">const</span>;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#aaeda307cc2131afa8a4764e38373f94e">max_local_workgroup_size</a>(<span class="keyword">const</span> cl::Kernel &amp;kernel) <span class="keyword">const</span>;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    cl::NDRange <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#adb48a1da7dc6b6f3c1a424d21e1ac1f8">default_ndrange</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div><div class="line"><a name="l00324"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a0ad613086cc79a2e32d5b87bcefc7488">  324</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a0ad613086cc79a2e32d5b87bcefc7488">clear_programs_cache</a>()</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    {</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        _programs_map.clear();</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        _built_programs_map.clear();</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    }</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div><div class="line"><a name="l00331"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a9ac02c2c58f604b7848a2fb1141c1e32">  331</a></span>&#160;    <span class="keyword">const</span> std::map&lt;std::string, cl::Program&gt; &amp;<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a9ac02c2c58f604b7848a2fb1141c1e32">get_built_programs</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <span class="keywordflow">return</span> _built_programs_map;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    }</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a1e6726708fe8f69a84845af570a6cadc">add_built_program</a>(<span class="keyword">const</span> std::string &amp;built_program_name, <span class="keyword">const</span> cl::Program &amp;program);</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a4f51d241825bd6710fe81b581068ba1e">fp16_supported</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a7406f704be6891f5a9a1c6dbc3e882df">int64_base_atomics_supported</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_program.xhtml">Program</a> &amp;load_program(<span class="keyword">const</span> std::string &amp;program_name) <span class="keyword">const</span>;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    std::string stringify_set(<span class="keyword">const</span> StringSet &amp;s) <span class="keyword">const</span>;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    cl::Context _context;                                                </div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    cl::Device  _device;                                                 </div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    std::string _kernel_path;                                            </div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="keyword">mutable</span> std::map&lt;std::string, const Program&gt;    _programs_map;       </div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    <span class="keyword">mutable</span> std::map&lt;std::string, cl::Program&gt;      _built_programs_map; </div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> std::map&lt;std::string, std::string&gt; _kernel_program_map; </div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> std::map&lt;std::string, std::string&gt; _program_source_map; </div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;};</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;}</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_COMPUTE_CLKERNELLIBRARY_H__ */</span><span class="preprocessor"></span></div><div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a66a558a56f5d0dcd6305c405ebc38cc2"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a66a558a56f5d0dcd6305c405ebc38cc2">arm_compute::CLKernelLibrary::set_kernel_path</a></div><div class="ttdeci">void set_kernel_path(const std::string &amp;kernel_path)</div><div class="ttdoc">Sets the path that the kernels reside in.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8h_source.xhtml#l00225">CLKernelLibrary.h:225</a></div></div>
<div class="ttc" id="classarm__compute_1_1_kernel_xhtml_a4d7fb588e6d609d95d8cd491492ed420"><div class="ttname"><a href="classarm__compute_1_1_kernel.xhtml#a4d7fb588e6d609d95d8cd491492ed420">arm_compute::Kernel::Kernel</a></div><div class="ttdeci">Kernel()</div><div class="ttdoc">Default Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l00133">CLKernelLibrary.cpp:133</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a1e6726708fe8f69a84845af570a6cadc"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a1e6726708fe8f69a84845af570a6cadc">arm_compute::CLKernelLibrary::add_built_program</a></div><div class="ttdeci">void add_built_program(const std::string &amp;built_program_name, const cl::Program &amp;program)</div><div class="ttdoc">Add a new built program to the cache.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l01120">CLKernelLibrary.cpp:1120</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_aef78b2e57b5203f8a184465e2da020ef"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#aef78b2e57b5203f8a184465e2da020ef">arm_compute::CLKernelLibrary::get_device_version</a></div><div class="ttdeci">std::string get_device_version()</div><div class="ttdoc">Return the device version.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l01241">CLKernelLibrary.cpp:1241</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_build_options_xhtml_ae3b08139a1e57323c5d7dd93f30496c8"><div class="ttname"><a href="classarm__compute_1_1_c_l_build_options.xhtml#ae3b08139a1e57323c5d7dd93f30496c8">arm_compute::CLBuildOptions::options</a></div><div class="ttdeci">const StringSet &amp; options() const</div><div class="ttdoc">Gets the current options list set.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l00074">CLKernelLibrary.cpp:74</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_acba005f5ce2c62cbf3f94d074d9007aa"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">arm_compute::CLKernelLibrary::get</a></div><div class="ttdeci">static CLKernelLibrary &amp; get()</div><div class="ttdoc">Access the KernelLibrary singleton.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l01037">CLKernelLibrary.cpp:1037</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_build_options_xhtml_af889744e64b496ba5dc1ef57f9918f79"><div class="ttname"><a href="classarm__compute_1_1_c_l_build_options.xhtml#af889744e64b496ba5dc1ef57f9918f79">arm_compute::CLBuildOptions::CLBuildOptions</a></div><div class="ttdeci">CLBuildOptions()</div><div class="ttdoc">Default constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l00038">CLKernelLibrary.cpp:38</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a293edc1bbcbddffb7228ac97917ed107"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a293edc1bbcbddffb7228ac97917ed107">arm_compute::CLKernelLibrary::set_context</a></div><div class="ttdeci">void set_context(cl::Context context)</div><div class="ttdoc">Sets the CL context used to create programs.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8h_source.xhtml#l00249">CLKernelLibrary.h:249</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a252f5440564c77d68459f2baa978f86a"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a252f5440564c77d68459f2baa978f86a">arm_compute::CLKernelLibrary::context</a></div><div class="ttdeci">cl::Context &amp; context()</div><div class="ttdoc">Accessor for the associated CL context.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8h_source.xhtml#l00275">CLKernelLibrary.h:275</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2018 ARM Limited.</div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00024">00_introduction.dox:24</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a70696e3d56dcbcdc1f493dec744bc581"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a70696e3d56dcbcdc1f493dec744bc581">arm_compute::CLKernelLibrary::get_num_compute_units</a></div><div class="ttdeci">cl_uint get_num_compute_units()</div><div class="ttdoc">Return the maximum number of compute units in the device.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l01246">CLKernelLibrary.cpp:1246</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_aaeda307cc2131afa8a4764e38373f94e"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#aaeda307cc2131afa8a4764e38373f94e">arm_compute::CLKernelLibrary::max_local_workgroup_size</a></div><div class="ttdeci">size_t max_local_workgroup_size(const cl::Kernel &amp;kernel) const</div><div class="ttdoc">Find the maximum number of local work items in a workgroup can be supported for the kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l01210">CLKernelLibrary.cpp:1210</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a54fb81956f9fb1c25b279e34e1e7d966"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a54fb81956f9fb1c25b279e34e1e7d966">arm_compute::CLKernelLibrary::operator=</a></div><div class="ttdeci">const CLKernelLibrary &amp; operator=(const CLKernelLibrary &amp;)=delete</div><div class="ttdoc">Prevent instances of this class from being copied.</div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_build_options_xhtml_a3e2b80ff5463b7d2017de847f5c32a30"><div class="ttname"><a href="classarm__compute_1_1_c_l_build_options.xhtml#a3e2b80ff5463b7d2017de847f5c32a30">arm_compute::CLBuildOptions::add_option</a></div><div class="ttdeci">void add_option(std::string option)</div><div class="ttdoc">Adds option to the existing build option list.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l00043">CLKernelLibrary.cpp:43</a></div></div>
<div class="ttc" id="classarm__compute_1_1_program_xhtml_a1d89c28bd42ba9a52da008bb69367171"><div class="ttname"><a href="classarm__compute_1_1_program.xhtml#a1d89c28bd42ba9a52da008bb69367171">arm_compute::Program::name</a></div><div class="ttdeci">std::string name() const</div><div class="ttdoc">Returns program name.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8h_source.xhtml#l00115">CLKernelLibrary.h:115</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_build_options_xhtml_a58abf0792821f6f1d6271570aa27dd84"><div class="ttname"><a href="classarm__compute_1_1_c_l_build_options.xhtml#a58abf0792821f6f1d6271570aa27dd84">arm_compute::CLBuildOptions::add_options</a></div><div class="ttdeci">void add_options(const StringSet &amp;options)</div><div class="ttdoc">Appends given build options to the current's objects options.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l00061">CLKernelLibrary.cpp:61</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a06733f65cb098d0ba67b028b1cb94b03"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a06733f65cb098d0ba67b028b1cb94b03">arm_compute::CLKernelLibrary::get_device</a></div><div class="ttdeci">cl::Device &amp; get_device()</div><div class="ttdoc">Gets the CL device for which the programs are created.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8h_source.xhtml#l00281">CLKernelLibrary.h:281</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_adb48a1da7dc6b6f3c1a424d21e1ac1f8"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#adb48a1da7dc6b6f3c1a424d21e1ac1f8">arm_compute::CLKernelLibrary::default_ndrange</a></div><div class="ttdeci">cl::NDRange default_ndrange() const</div><div class="ttdoc">Return the default NDRange for the device.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l01221">CLKernelLibrary.cpp:1221</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a0ad613086cc79a2e32d5b87bcefc7488"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a0ad613086cc79a2e32d5b87bcefc7488">arm_compute::CLKernelLibrary::clear_programs_cache</a></div><div class="ttdeci">void clear_programs_cache()</div><div class="ttdoc">Clear the library's cache of binary programs.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8h_source.xhtml#l00324">CLKernelLibrary.h:324</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a5a6865d04c8d3348860f3cb8100fdb97"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a5a6865d04c8d3348860f3cb8100fdb97">arm_compute::CLKernelLibrary::set_device</a></div><div class="ttdeci">void set_device(cl::Device device)</div><div class="ttdoc">Sets the CL device for which the programs are created.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8h_source.xhtml#l00290">CLKernelLibrary.h:290</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a44e90c4fa1204a708499ece56d4c82f0"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a44e90c4fa1204a708499ece56d4c82f0">arm_compute::CLKernelLibrary::get_program_source</a></div><div class="ttdeci">std::string get_program_source(const std::string &amp;program_name)</div><div class="ttdoc">Gets the source of the selected program.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l01198">CLKernelLibrary.cpp:1198</a></div></div>
<div class="ttc" id="classarm__compute_1_1_program_xhtml"><div class="ttname"><a href="classarm__compute_1_1_program.xhtml">arm_compute::Program</a></div><div class="ttdoc">Program class.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8h_source.xhtml#l00083">CLKernelLibrary.h:83</a></div></div>
<div class="ttc" id="classarm__compute_1_1_program_xhtml_a14c39544e9ac2c2fce1179bd99f093c4"><div class="ttname"><a href="classarm__compute_1_1_program.xhtml#a14c39544e9ac2c2fce1179bd99f093c4">arm_compute::Program::build</a></div><div class="ttdeci">static bool build(const cl::Program &amp;program, const std::string &amp;build_options=&quot;&quot;)</div><div class="ttdoc">Build the given CL program.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l00106">CLKernelLibrary.cpp:106</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_build_options_xhtml_a95b46e69297fad10b27a1baa000f92cc"><div class="ttname"><a href="classarm__compute_1_1_c_l_build_options.xhtml#a95b46e69297fad10b27a1baa000f92cc">arm_compute::CLBuildOptions::add_option_if</a></div><div class="ttdeci">void add_option_if(bool cond, std::string option)</div><div class="ttdoc">Adds option if a given condition is true;.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l00048">CLKernelLibrary.cpp:48</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a9f976367edcd9ab787375373e050b94b"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a9f976367edcd9ab787375373e050b94b">arm_compute::CLKernelLibrary::init</a></div><div class="ttdeci">void init(std::string kernel_path, cl::Context context, cl::Device device)</div><div class="ttdoc">Initialises the kernel library.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8h_source.xhtml#l00215">CLKernelLibrary.h:215</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_build_options_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_build_options.xhtml">arm_compute::CLBuildOptions</a></div><div class="ttdoc">Build options.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8h_source.xhtml#l00037">CLKernelLibrary.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1_kernel_xhtml_a9729d318da4230e664a923d7419ddf10"><div class="ttname"><a href="classarm__compute_1_1_kernel.xhtml#a9729d318da4230e664a923d7419ddf10">arm_compute::Kernel::operator=</a></div><div class="ttdeci">Kernel &amp; operator=(const Kernel &amp;)=default</div><div class="ttdoc">Default copy assignment operator.</div></div>
<div class="ttc" id="classarm__compute_1_1_program_xhtml_ad00a93de0aaf77172116c42bed3a5627"><div class="ttname"><a href="classarm__compute_1_1_program.xhtml#ad00a93de0aaf77172116c42bed3a5627">arm_compute::Program::Program</a></div><div class="ttdeci">Program()</div><div class="ttdoc">Default constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l00079">CLKernelLibrary.cpp:79</a></div></div>
<div class="ttc" id="classarm__compute_1_1_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_kernel.xhtml">arm_compute::Kernel</a></div><div class="ttdoc">Kernel class.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8h_source.xhtml#l00150">CLKernelLibrary.h:150</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a9ac02c2c58f604b7848a2fb1141c1e32"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a9ac02c2c58f604b7848a2fb1141c1e32">arm_compute::CLKernelLibrary::get_built_programs</a></div><div class="ttdeci">const std::map&lt; std::string, cl::Program &gt; &amp; get_built_programs() const</div><div class="ttdoc">Access the cache of built OpenCL programs.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8h_source.xhtml#l00331">CLKernelLibrary.h:331</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a7406f704be6891f5a9a1c6dbc3e882df"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a7406f704be6891f5a9a1c6dbc3e882df">arm_compute::CLKernelLibrary::int64_base_atomics_supported</a></div><div class="ttdeci">bool int64_base_atomics_supported() const</div><div class="ttdoc">Returns true if int64_base_atomics extension is supported by the CL device.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l01130">CLKernelLibrary.cpp:1130</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a4f51d241825bd6710fe81b581068ba1e"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a4f51d241825bd6710fe81b581068ba1e">arm_compute::CLKernelLibrary::fp16_supported</a></div><div class="ttdeci">bool fp16_supported() const</div><div class="ttdoc">Returns true if FP16 is supported by the CL device.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l01125">CLKernelLibrary.cpp:1125</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a8c2942ccd8b3f3b82e3edb7950a9e414"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a8c2942ccd8b3f3b82e3edb7950a9e414">arm_compute::CLKernelLibrary::create_kernel</a></div><div class="ttdeci">Kernel create_kernel(const std::string &amp;kernel_name, const StringSet &amp;build_options_set={}) const</div><div class="ttdoc">Creates a kernel from the kernel library.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l01043">CLKernelLibrary.cpp:1043</a></div></div>
<div class="ttc" id="_open_c_l_8h_xhtml"><div class="ttname"><a href="_open_c_l_8h.xhtml">OpenCL.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml">arm_compute::CLKernelLibrary</a></div><div class="ttdoc">CLKernelLibrary class.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8h_source.xhtml#l00192">CLKernelLibrary.h:192</a></div></div>
<div class="ttc" id="classarm__compute_1_1_program_xhtml_aa960ae62f188ce6593855ea9d90f3140"><div class="ttname"><a href="classarm__compute_1_1_program.xhtml#aa960ae62f188ce6593855ea9d90f3140">arm_compute::Program::operator=</a></div><div class="ttdeci">Program &amp; operator=(const Program &amp;)=default</div><div class="ttdoc">Default copy assignment operator.</div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_ad7395c158d8e31b9af211b9bc1f65a08"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#ad7395c158d8e31b9af211b9bc1f65a08">arm_compute::CLKernelLibrary::get_kernel_path</a></div><div class="ttdeci">std::string get_kernel_path()</div><div class="ttdoc">Gets the path that the kernels reside in.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8h_source.xhtml#l00231">CLKernelLibrary.h:231</a></div></div>
<div class="ttc" id="classarm__compute_1_1_kernel_xhtml_a1d89c28bd42ba9a52da008bb69367171"><div class="ttname"><a href="classarm__compute_1_1_kernel.xhtml#a1d89c28bd42ba9a52da008bb69367171">arm_compute::Kernel::name</a></div><div class="ttdeci">std::string name() const</div><div class="ttdoc">Returns kernel name.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8h_source.xhtml#l00173">CLKernelLibrary.h:173</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_build_options_xhtml_a504e7a51a86c19f1f529f739f50729f2"><div class="ttname"><a href="classarm__compute_1_1_c_l_build_options.xhtml#a504e7a51a86c19f1f529f739f50729f2">arm_compute::CLBuildOptions::add_options_if</a></div><div class="ttdeci">void add_options_if(bool cond, const StringSet &amp;options)</div><div class="ttdoc">Appends given build options to the current's objects options if a given condition is true.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l00066">CLKernelLibrary.cpp:66</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_build_options_xhtml_a9b58a8c8bf638904a0b5f62b2bfcf96a"><div class="ttname"><a href="classarm__compute_1_1_c_l_build_options.xhtml#a9b58a8c8bf638904a0b5f62b2bfcf96a">arm_compute::CLBuildOptions::add_option_if_else</a></div><div class="ttdeci">void add_option_if_else(bool cond, std::string option_true, std::string option_false)</div><div class="ttdoc">Adds first option if condition is true else the second one.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l00056">CLKernelLibrary.cpp:56</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_214608ef36d61442cb2b0c1c4e9a7def.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="dir_1fb090f0c6070330bfaccc4236d3ca0d.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_1633709b037eda5b8477677909f78129.xhtml">CL</a></li><li class="navelem"><a class="el" href="_c_l_kernel_library_8h.xhtml">CLKernelLibrary.h</a></li>
    <li class="footer">Generated on Mon Sep 2 2019 11:47:17 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
