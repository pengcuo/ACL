<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute/core/Helpers.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">19.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('arm__compute_2core_2_helpers_8h_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Helpers.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="arm__compute_2core_2_helpers_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2016-2019 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef __ARM_COMPUTE_HELPERS_H__</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define __ARM_COMPUTE_HELPERS_H__</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_coordinates_8h.xhtml">arm_compute/core/Coordinates.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_access_window_8h.xhtml">arm_compute/core/IAccessWindow.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_steps_8h.xhtml">arm_compute/core/Steps.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_strides_8h.xhtml">arm_compute/core/Strides.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_shape_8h.xhtml">arm_compute/core/TensorShape.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_window_8h.xhtml">arm_compute/core/Window.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;array&gt;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &lt;cstddef&gt;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &lt;cstdint&gt;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &lt;tuple&gt;</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#include &lt;type_traits&gt;</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#include &lt;utility&gt;</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">class </span>IKernel;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">class </span>ITensor;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keyword">class </span>ITensorInfo;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="structarm__compute_1_1enable__bitwise__ops.xhtml">   52</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1enable__bitwise__ops.xhtml">enable_bitwise_ops</a></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="structarm__compute_1_1enable__bitwise__ops.xhtml#a5b4ee4ae6cba6bb75200ba7af1910873">   54</a></span>&#160;    <span class="keyword">static</span> constexpr <span class="keywordtype">bool</span> <a class="code" href="structarm__compute_1_1enable__bitwise__ops.xhtml#a5b4ee4ae6cba6bb75200ba7af1910873">value</a> = <span class="keyword">false</span>; </div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;};</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="preprocessor">#ifndef DOXYGEN_SKIP_THIS</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keyword">typename</span> std::enable_if&lt;enable_bitwise_ops&lt;T&gt;::value, T&gt;::type <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#afe6212a8969f1c67ad9dc905e0259211">operator&amp;</a>(T lhs, T rhs)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">using</span> underlying_type = <span class="keyword">typename</span> std::underlying_type&lt;T&gt;::type;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">return</span> static_cast&lt;T&gt;(static_cast&lt;underlying_type&gt;(lhs) &amp; static_cast&lt;underlying_type&gt;(rhs));</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;}</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* DOXYGEN_SKIP_THIS */</span><span class="preprocessor"></span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Kernel, <span class="keyword">typename</span>... T&gt;</div><div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a6f698fa1629f7f800b3c8cd77a3d4b4a">   74</a></span>&#160;std::unique_ptr&lt;Kernel&gt; <a class="code" href="namespacearm__compute.xhtml#a6f698fa1629f7f800b3c8cd77a3d4b4a">create_configure_kernel</a>(T &amp;&amp;... args)</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;{</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    std::unique_ptr&lt;Kernel&gt; k = arm_compute::support::cpp14::make_unique&lt;Kernel&gt;();</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    k-&gt;configure(std::forward&lt;T&gt;(args)...);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">return</span> k;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;}</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Kernel&gt;</div><div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#abc72c95941485d8a068fa38372308574">   86</a></span>&#160;std::unique_ptr&lt;Kernel&gt; <a class="code" href="namespacearm__compute.xhtml#abc72c95941485d8a068fa38372308574">create_kernel</a>()</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;{</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    std::unique_ptr&lt;Kernel&gt; k = arm_compute::support::cpp14::make_unique&lt;Kernel&gt;();</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">return</span> k;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;}</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1traits.xhtml">   92</a></span>&#160;<span class="keyword">namespace </span>traits</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;{</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> Tuple&gt;</div><div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="structarm__compute_1_1traits_1_1is__contained.xhtml">   96</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1traits_1_1is__contained.xhtml">is_contained</a>;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="structarm__compute_1_1traits_1_1is__contained_3_01_t_00_01std_1_1tuple_3_4_01_4.xhtml">   99</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1traits_1_1is__contained.xhtml">is_contained</a>&lt;T, std::tuple&lt;&gt;&gt; : std::false_type</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;{</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;};</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Ts&gt;</div><div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="structarm__compute_1_1traits_1_1is__contained_3_01_t_00_01std_1_1tuple_3_01_t_00_01_ts_8_8_8_01_4_01_4.xhtml">  104</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1traits_1_1is__contained.xhtml">is_contained</a>&lt;T, std::tuple&lt;T, Ts...&gt;&gt; : std::true_type</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;{</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;};</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U, <span class="keyword">typename</span>... Ts&gt;</div><div class="line"><a name="l00109"></a><span class="lineno"><a class="line" href="structarm__compute_1_1traits_1_1is__contained_3_01_t_00_01std_1_1tuple_3_01_u_00_01_ts_8_8_8_01_4_01_4.xhtml">  109</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1traits_1_1is__contained.xhtml">is_contained</a>&lt;T, std::tuple&lt;U, Ts...&gt;&gt; : <a class="code" href="structarm__compute_1_1traits_1_1is__contained.xhtml">is_contained</a>&lt;T, std::tuple&lt;Ts...&gt;&gt;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;{</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;};</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;}</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00127"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ad656a27ce8a507e31096ca45683ba9a5">  127</a></span>&#160;<span class="keyword">inline</span> T <a class="code" href="namespacearm__compute.xhtml#ad656a27ce8a507e31096ca45683ba9a5">delta_bilinear_c1</a>(<span class="keyword">const</span> T *pixel_ptr, <span class="keywordtype">size_t</span> stride, <span class="keywordtype">float</span> dx, <span class="keywordtype">float</span> dy)</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;{</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(pixel_ptr == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> dx1 = 1.0f - dx;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> dy1 = 1.0f - dy;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keyword">const</span> T a00 = *pixel_ptr;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keyword">const</span> T a01 = *(pixel_ptr + 1);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keyword">const</span> T a10 = *(pixel_ptr + stride);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keyword">const</span> T a11 = *(pixel_ptr + stride + 1);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> w1 = dx1 * dy1;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> w2 = dx * dy1;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> w3 = dx1 * dy;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> w4 = dx * dy;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordflow">return</span> static_cast&lt;T&gt;(a00 * w1 + a01 * w2 + a10 * w3 + a11 * w4);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;}</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#aa8f4b622d28ff29e9e88a6d5dcd2bea2">  161</a></span>&#160;<span class="keyword">inline</span> uint8_t <a class="code" href="namespacearm__compute.xhtml#aa8f4b622d28ff29e9e88a6d5dcd2bea2">delta_bilinear_c1_quantized</a>(<span class="keyword">const</span> uint8_t *pixel_ptr, <span class="keywordtype">size_t</span> stride, <span class="keywordtype">float</span> dx, <span class="keywordtype">float</span> dy, <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> iq_info, <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> oq_info)</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;{</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(pixel_ptr == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> dx1 = 1.0f - dx;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> dy1 = 1.0f - dy;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> a00 = <a class="code" href="namespacearm__compute.xhtml#a34725aa0412e6cc99193ceb6c8a8e439">dequantize_qasymm8</a>(*pixel_ptr, iq_info);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> a01 = <a class="code" href="namespacearm__compute.xhtml#a34725aa0412e6cc99193ceb6c8a8e439">dequantize_qasymm8</a>(*(pixel_ptr + 1), iq_info);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> a10 = <a class="code" href="namespacearm__compute.xhtml#a34725aa0412e6cc99193ceb6c8a8e439">dequantize_qasymm8</a>(*(pixel_ptr + stride), iq_info);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> a11 = <a class="code" href="namespacearm__compute.xhtml#a34725aa0412e6cc99193ceb6c8a8e439">dequantize_qasymm8</a>(*(pixel_ptr + stride + 1), iq_info);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> w1  = dx1 * dy1;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> w2  = dx * dy1;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> w3  = dx1 * dy;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> w4  = dx * dy;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordtype">float</span>       res = a00 * w1 + a01 * w2 + a10 * w3 + a11 * w4;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">return</span> static_cast&lt;uint8_t&gt;(<a class="code" href="namespacearm__compute.xhtml#a25591070cf041aff512719050c39e5ee">quantize_qasymm8</a>(res, oq_info));</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;}</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00193"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ad5fa8bacf824e9538014bfb0dcdaab52">  193</a></span>&#160;<span class="keyword">inline</span> T <a class="code" href="namespacearm__compute.xhtml#ad5fa8bacf824e9538014bfb0dcdaab52">delta_linear_c1_y</a>(<span class="keyword">const</span> T *pixel_ptr, <span class="keywordtype">size_t</span> stride, <span class="keywordtype">float</span> dy)</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;{</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(pixel_ptr == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> dy1 = 1.0f - dy;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keyword">const</span> T a00 = *pixel_ptr;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keyword">const</span> T a10 = *(pixel_ptr + stride);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> w1 = dy1;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> w3 = dy;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keywordflow">return</span> static_cast&lt;T&gt;(a00 * w1 + a10 * w3);</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;}</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00218"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a6174495b626531de015ae2b810859287">  218</a></span>&#160;<span class="keyword">inline</span> T <a class="code" href="namespacearm__compute.xhtml#a6174495b626531de015ae2b810859287">delta_linear_c1_x</a>(<span class="keyword">const</span> T *pixel_ptr, <span class="keywordtype">float</span> dx)</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;{</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(pixel_ptr == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keyword">const</span> T a00 = *pixel_ptr;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keyword">const</span> T a01 = *(pixel_ptr + 1);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> dx1 = 1.0f - dx;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> w1 = dx1;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> w2 = dx;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keywordflow">return</span> static_cast&lt;T&gt;(a00 * w1 + a01 * w2);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;}</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00244"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a1c8d639ec2b3086a9506e72605a32333">  244</a></span>&#160;<span class="keyword">inline</span> T <a class="code" href="namespacearm__compute.xhtml#a1c8d639ec2b3086a9506e72605a32333">pixel_bilinear_c1</a>(<span class="keyword">const</span> T *first_pixel_ptr, <span class="keywordtype">size_t</span> stride, <span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y)</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;{</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(first_pixel_ptr == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keyword">const</span> int32_t xi = std::floor(x);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keyword">const</span> int32_t yi = std::floor(y);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> dx = x - xi;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> dy = y - yi;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#ad656a27ce8a507e31096ca45683ba9a5">delta_bilinear_c1</a>(first_pixel_ptr + xi + yi * stride, stride, dx, dy);</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;}</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00271"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#afa55519774605e5b840fb031fdd7b196">  271</a></span>&#160;<span class="keyword">inline</span> uint8_t <a class="code" href="namespacearm__compute.xhtml#afa55519774605e5b840fb031fdd7b196">pixel_bilinear_c1_clamp</a>(<span class="keyword">const</span> T *first_pixel_ptr, <span class="keywordtype">size_t</span> stride, <span class="keywordtype">size_t</span> width, <span class="keywordtype">size_t</span> height, <span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y)</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;{</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(first_pixel_ptr == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    x = std::max(-1.f, std::min(x, static_cast&lt;float&gt;(width)));</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    y = std::max(-1.f, std::min(y, static_cast&lt;float&gt;(height)));</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> xi = std::floor(x);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> yi = std::floor(y);</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> dx = x - xi;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> dy = y - yi;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keywordflow">if</span>(dx == 0.0f)</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    {</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        <span class="keywordflow">if</span>(dy == 0.0f)</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        {</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            <span class="keywordflow">return</span> static_cast&lt;T&gt;(first_pixel_ptr[static_cast&lt;int32_t&gt;(xi) + static_cast&lt;int32_t&gt;(yi) * stride]);</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        }</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#ad5fa8bacf824e9538014bfb0dcdaab52">delta_linear_c1_y</a>(first_pixel_ptr + static_cast&lt;int32_t&gt;(xi) + static_cast&lt;int32_t&gt;(yi) * stride, stride, dy);</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    }</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keywordflow">if</span>(dy == 0.0f)</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    {</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a6174495b626531de015ae2b810859287">delta_linear_c1_x</a>(first_pixel_ptr + static_cast&lt;int32_t&gt;(xi) + static_cast&lt;int32_t&gt;(yi) * stride, dx);</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    }</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#ad656a27ce8a507e31096ca45683ba9a5">delta_bilinear_c1</a>(first_pixel_ptr + static_cast&lt;int32_t&gt;(xi) + static_cast&lt;int32_t&gt;(yi) * stride, stride, dx, dy);</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;}</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="keyword">inline</span> uint8_t <a class="code" href="namespacearm__compute.xhtml#ab7b3af731907e85fcaf72555c446176b">pixel_area_c1u8_clamp</a>(<span class="keyword">const</span> uint8_t *first_pixel_ptr, <span class="keywordtype">size_t</span> stride, <span class="keywordtype">size_t</span> width, <span class="keywordtype">size_t</span> height, <span class="keywordtype">float</span> wr, <span class="keywordtype">float</span> hr, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y);</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00318"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_iterator.xhtml">  318</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;{</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    constexpr <a class="code" href="classarm__compute_1_1_iterator.xhtml#a45381773d6cba2ad9e9d2d04515fa40b">Iterator</a>();</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml#a45381773d6cba2ad9e9d2d04515fa40b">Iterator</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *tensor, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window);</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_iterator.xhtml#a6e507a84d19ad08bb0f7fc1558ec429a">increment</a>(<span class="keywordtype">size_t</span> dimension);</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    constexpr <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_iterator.xhtml#a7d48061a9abb9959505f167fb02e53e1">offset</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    constexpr uint8_t *<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_iterator.xhtml#a599f5025b7e6b8bfead740a88e56d5bc">reset</a>(<span class="keywordtype">size_t</span> dimension);</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    uint8_t *_ptr;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <span class="keyword">class </span>Dimension</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    {</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        constexpr Dimension()</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            : _dim_start(0), _stride(0)</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        {</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        }</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        <span class="keywordtype">int</span> _dim_start;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        <span class="keywordtype">int</span> _stride;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    };</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    std::array&lt;Dimension, Coordinates::num_max_dimensions&gt; _dims;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;};</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> L, <span class="keyword">typename</span>... Ts&gt;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators);</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Ts&gt;</div><div class="line"><a name="l00402"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#afc4bd8e872567d9c4c57d89eb0bb3da1">  402</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute.xhtml#afc4bd8e872567d9c4c57d89eb0bb3da1">update_window_and_padding</a>(<a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;win, Ts &amp;&amp;... patterns)</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;{</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <span class="keywordtype">bool</span> window_changed = <span class="keyword">false</span>;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <a class="code" href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">utility::for_each</a>([&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_access_window.xhtml">IAccessWindow</a> &amp; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>)</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    {</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        window_changed |= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>.update_window_if_needed(win);</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    },</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    patterns...);</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="keywordtype">bool</span> padding_changed = <span class="keyword">false</span>;</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <a class="code" href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">utility::for_each</a>([&amp;](<a class="code" href="classarm__compute_1_1_i_access_window.xhtml">IAccessWindow</a> &amp; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>)</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    {</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        padding_changed |= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>.update_padding_if_needed(win);</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    },</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    patterns...);</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="keywordflow">return</span> window_changed;</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;}</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;Window <a class="code" href="namespacearm__compute.xhtml#ab7980fa5ee693e3282a76da047a1c3b5">calculate_max_window</a>(<span class="keyword">const</span> ValidRegion &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">valid_region</a>, <span class="keyword">const</span> Steps &amp;steps = Steps(), <span class="keywordtype">bool</span> skip_border = <span class="keyword">false</span>, BorderSize border_size = BorderSize());</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div><div class="line"><a name="l00443"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#aa2117aef4381edbdf81e17ec088df7f1">  443</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> <a class="code" href="namespacearm__compute.xhtml#ab7980fa5ee693e3282a76da047a1c3b5">calculate_max_window</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_steps.xhtml">Steps</a> &amp;steps = <a class="code" href="classarm__compute_1_1_steps.xhtml">Steps</a>(), <span class="keywordtype">bool</span> skip_border = <span class="keyword">false</span>, <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> border_size = <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>())</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;{</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#ab7980fa5ee693e3282a76da047a1c3b5">calculate_max_window</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.valid_region(), steps, skip_border, border_size);</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;}</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;Window <a class="code" href="namespacearm__compute.xhtml#a9047a414d692d8814181a667a7ee68c4">calculate_max_window_horizontal</a>(<span class="keyword">const</span> ValidRegion &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">valid_region</a>, <span class="keyword">const</span> Steps &amp;steps = Steps(), <span class="keywordtype">bool</span> skip_border = <span class="keyword">false</span>, BorderSize border_size = BorderSize());</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;</div><div class="line"><a name="l00468"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a47456b4d520aee1cba80bf6e20f6685a">  468</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> <a class="code" href="namespacearm__compute.xhtml#a9047a414d692d8814181a667a7ee68c4">calculate_max_window_horizontal</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_steps.xhtml">Steps</a> &amp;steps = <a class="code" href="classarm__compute_1_1_steps.xhtml">Steps</a>(), <span class="keywordtype">bool</span> skip_border = <span class="keyword">false</span>, <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> border_size = <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>())</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;{</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a9047a414d692d8814181a667a7ee68c4">calculate_max_window_horizontal</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.valid_region(), steps, skip_border, border_size);</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;}</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;Window <a class="code" href="namespacearm__compute.xhtml#affc1f59e0b2c29bf81e8c95bf0fa8e76">calculate_max_enlarged_window</a>(<span class="keyword">const</span> ValidRegion &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">valid_region</a>, <span class="keyword">const</span> Steps &amp;steps = Steps(), BorderSize border_size = BorderSize());</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;</div><div class="line"><a name="l00491"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#afcdda83b6a85d5798f08d92c0e235e2e">  491</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> <a class="code" href="namespacearm__compute.xhtml#affc1f59e0b2c29bf81e8c95bf0fa8e76">calculate_max_enlarged_window</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_steps.xhtml">Steps</a> &amp;steps = <a class="code" href="classarm__compute_1_1_steps.xhtml">Steps</a>(), <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> border_size = <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>())</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;{</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#affc1f59e0b2c29bf81e8c95bf0fa8e76">calculate_max_enlarged_window</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.valid_region(), steps, border_size);</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;}</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Ts&gt;</div><div class="line"><a name="l00503"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#aa7510e92de273e0457ce12218f712ad4">  503</a></span>&#160;<a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> <a class="code" href="namespacearm__compute.xhtml#aa7510e92de273e0457ce12218f712ad4">intersect_valid_regions</a>(<span class="keyword">const</span> Ts &amp;... regions)</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;{</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    <span class="keyword">auto</span> intersect = [](<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp; r1, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp; r2) -&gt; <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a></div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    {</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> region;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> d = 0; d &lt; std::min(r1.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>(), r2.anchor.num_dimensions()); ++d)</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;        {</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;            region.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a982730e6f0da5f9490f59bc5f6bb3f27">set</a>(d, std::max(r1.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>[d], r2.anchor[d]));</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;        }</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> d = 0; d &lt; std::min(r1.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>(), r2.shape.num_dimensions()); ++d)</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        {</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;            region.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a9c54fb6cea3557692fe7c00c40bb40ad">set</a>(d, std::min(r1.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>[d], r2.shape[d]));</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;        }</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        <span class="keywordflow">return</span> region;</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    };</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1utility.xhtml#a043270c1f50c73bf9f91fcc4570ccf0c">utility::foldl</a>(intersect, regions...);</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;}</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Ts&gt;</div><div class="line"><a name="l00535"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ac56739a30823647f7d86a0380a2ff62e">  535</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_strides.xhtml">Strides</a> <a class="code" href="namespacearm__compute.xhtml#ac56739a30823647f7d86a0380a2ff62e">compute_strides</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>, T stride_x, Ts &amp;&amp;... fixed_strides)</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;{</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a> = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.tensor_shape();</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    <span class="comment">// Create strides object</span></div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    <a class="code" href="classarm__compute_1_1_strides.xhtml">Strides</a> strides(stride_x, fixed_strides...);</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 1 + <span class="keyword">sizeof</span>...(Ts); i &lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.num_dimensions(); ++i)</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    {</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;        strides.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a982730e6f0da5f9490f59bc5f6bb3f27">set</a>(i, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[i - 1] * strides[i - 1]);</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    }</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <span class="keywordflow">return</span> strides;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;}</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Ts&gt;</div><div class="line"><a name="l00557"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a8c35748731709927597cb5a2c227e682">  557</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_strides.xhtml">Strides</a> <a class="code" href="namespacearm__compute.xhtml#ac56739a30823647f7d86a0380a2ff62e">compute_strides</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;{</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#ac56739a30823647f7d86a0380a2ff62e">compute_strides</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.element_size());</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;}</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00570"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a21c3e11887f3acf9284ca763372c7da0">  570</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute.xhtml#a21c3e11887f3acf9284ca763372c7da0">permute</a>(<a class="code" href="classarm__compute_1_1_dimensions.xhtml">Dimensions&lt;T&gt;</a> &amp;dimensions, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_strides.xhtml">PermutationVector</a> &amp;perm)</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;{</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    <span class="keyword">auto</span> dimensions_copy = utility::make_array&lt;Dimensions&lt;T&gt;::num_max_dimensions&gt;(dimensions.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#ab2878b67ca384a699c1270900b31290b">begin</a>(), dimensions.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#ac684b52c6197edff9cccb3abd1e41f59">end</a>());</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; perm.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>(); ++i)</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    {</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;        T dimension_val = (perm[i] &lt; dimensions.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>()) ? dimensions_copy[perm[i]] : 0;</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;        dimensions.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a982730e6f0da5f9490f59bc5f6bb3f27">set</a>(i, dimension_val);</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    }</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;}</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;</div><div class="line"><a name="l00587"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a5045aaec85553032a782c44ab8d26341">  587</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute.xhtml#a21c3e11887f3acf9284ca763372c7da0">permute</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_strides.xhtml">PermutationVector</a> &amp;perm)</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;{</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> shape_copy = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>;</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; perm.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>(); ++i)</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    {</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;        <span class="keywordtype">size_t</span> dimension_val = (perm[i] &lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.num_dimensions()) ? shape_copy[perm[i]] : 1;</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.set(i, dimension_val, <span class="keyword">false</span>); <span class="comment">// Avoid changes in _num_dimension</span></div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    }</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;}</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute.xhtml#a47be6fa38308d0003c25b60b7dbc45ce">auto_init_if_empty</a>(ITensorInfo       &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>,</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;                        <span class="keyword">const</span> TensorShape &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>,</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;                        <span class="keywordtype">int</span> num_channels, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>,</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;                        QuantizationInfo quantization_info = QuantizationInfo());</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute.xhtml#a47be6fa38308d0003c25b60b7dbc45ce">auto_init_if_empty</a>(ITensorInfo &amp;info_sink, <span class="keyword">const</span> ITensorInfo &amp;info_source);</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute.xhtml#a9d1a839c51134b2ae171a2264c541b6f">set_shape_if_empty</a>(ITensorInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>, <span class="keyword">const</span> TensorShape &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>);</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute.xhtml#a8076ba239b6681067b6cfea7f773a39f">set_format_if_unknown</a>(ITensorInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format);</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute.xhtml#ad19446be52c2c162fa678b9ae236f445">set_data_type_if_unknown</a>(ITensorInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>);</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute.xhtml#aafd98bfd4651f36d691ddd2631a6e5a0">set_data_layout_if_unknown</a>(ITensorInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>, <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>);</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute.xhtml#a75509469ec2689ec143f4a37bbcb4437">set_quantization_info_if_empty</a>(ITensorInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>, QuantizationInfo quantization_info);</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;ValidRegion <a class="code" href="namespacearm__compute.xhtml#a45509a321422cd1542958b5c33021bda">calculate_valid_region_scale</a>(<span class="keyword">const</span> ITensorInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a15541ee1af263ccf663a5dc23de9fb89">src_info</a>, <span class="keyword">const</span> TensorShape &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">dst_shape</a>,</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                                         <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> interpolate_policy, <a class="code" href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7b">SamplingPolicy</a> sampling_policy, <span class="keywordtype">bool</span> border_undefined);</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;<span class="keyword">inline</span> Coordinates <a class="code" href="namespacearm__compute.xhtml#ad34f2150f1c9f8a3ecb7298162124e5d">index2coords</a>(<span class="keyword">const</span> TensorShape &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>, <span class="keywordtype">int</span> index);</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute.xhtml#ad95e1c14c3007ca18950bf8f4c5a5c93">coords2index</a>(<span class="keyword">const</span> TensorShape &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>, <span class="keyword">const</span> Coordinates &amp;coord);</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">size_t</span> <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a> data_layout_dimension);</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;<span class="keyword">inline</span> <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a> <a class="code" href="namespacearm__compute.xhtml#ab86b0b430468cbf4a5e6e093088024c9">get_index_data_layout_dimension</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>, <span class="keyword">const</span> <span class="keywordtype">size_t</span> index);</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;</div><div class="line"><a name="l00726"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ae76431f34048289454a9cb6dc66d7c6b">  726</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute.xhtml#ae76431f34048289454a9cb6dc66d7c6b">get_normalization_dimension_index</a>(<a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> layout, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>)</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;{</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width_idx   = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>);</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> channel_idx = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>);</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.is_in_map() ? width_idx : channel_idx;</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;}</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;</div><div class="line"><a name="l00744"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a3b0c016b53e97663b39c2f3875f46c24">  744</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> <a class="code" href="namespacearm__compute.xhtml#a3b0c016b53e97663b39c2f3875f46c24">compute_winograd_convolution_tiles</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;in_dims, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;kernel_size, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;output_tile_size, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>)</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;{</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    <span class="keywordtype">int</span> num_tiles_x = std::ceil((in_dims.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a> - (kernel_size.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a> - 1) + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_left() + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_right()) / static_cast&lt;float&gt;(output_tile_size.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a>));</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    <span class="keywordtype">int</span> num_tiles_y = std::ceil((in_dims.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a> - (kernel_size.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a> - 1) + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_top() + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_bottom()) / static_cast&lt;float&gt;(output_tile_size.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a>));</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    <span class="comment">// Clamp in case we provide paddings but we have 1D convolution</span></div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;    num_tiles_x = std::min(num_tiles_x, static_cast&lt;int&gt;(in_dims.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a>));</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;    num_tiles_y = std::min(num_tiles_y, static_cast&lt;int&gt;(in_dims.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a>));</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(num_tiles_x, num_tiles_y);</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;}</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00764"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#aeb6881009f40f57d430752441ec5c4f4">  764</a></span>&#160;<span class="keyword">inline</span> T <a class="code" href="namespacearm__compute.xhtml#aeb6881009f40f57d430752441ec5c4f4">wrap_around</a>(T x, T m)</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;{</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    <span class="keywordflow">return</span> x &gt;= 0 ? x % m : (x % m + m) % m;</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;}</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;</div><div class="line"><a name="l00775"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a7c3d8e17b509d0d18cc7c94b7e0a993d">  775</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute.xhtml#a7c3d8e17b509d0d18cc7c94b7e0a993d">get_next_power_two</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x)</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;{</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    <span class="comment">// Decrement by 1</span></div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    x--;</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;    <span class="comment">// Shift right by 1</span></div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    x |= x &gt;&gt; 1u;</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    <span class="comment">// Shift right by 2</span></div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    x |= x &gt;&gt; 2u;</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;    <span class="comment">// Shift right by 4</span></div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;    x |= x &gt;&gt; 4u;</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    <span class="comment">// Shift right by 8</span></div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    x |= x &gt;&gt; 8u;</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    <span class="comment">// Shift right by 16</span></div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;    x |= x &gt;&gt; 16u;</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    <span class="comment">// Increment by 1</span></div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;    x++;</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;}</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_helpers_8inl.xhtml">arm_compute/core/Helpers.inl</a>&quot;</span></div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/*__ARM_COMPUTE_HELPERS_H__ */</span><span class="preprocessor"></span></div><div class="ttc" id="namespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">arm_compute::InterpolationPolicy</a></div><div class="ttdeci">InterpolationPolicy</div><div class="ttdoc">Interpolation method.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00356">Types.h:356</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00097">AbsoluteDifference.cpp:97</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1a367830ae09bf6138df822888ec1d71"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">arm_compute::test::validation::w</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; w</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00156">DFT.cpp:156</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6174495b626531de015ae2b810859287"><div class="ttname"><a href="namespacearm__compute.xhtml#a6174495b626531de015ae2b810859287">arm_compute::delta_linear_c1_x</a></div><div class="ttdeci">T delta_linear_c1_x(const T *pixel_ptr, float dx)</div><div class="ttdoc">Computes linear interpolation using the pointer to the left pixel and the pixel's distance between th...</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00218">Helpers.h:218</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_acf5f12bbab64dd614bd8220c97fe484f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">arm_compute::test::validation::data_layout</a></div><div class="ttdeci">const DataLayout data_layout</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00146">Im2Col.cpp:146</a></div></div>
<div class="ttc" id="structarm__compute_1_1enable__bitwise__ops_xhtml_a5b4ee4ae6cba6bb75200ba7af1910873"><div class="ttname"><a href="structarm__compute_1_1enable__bitwise__ops.xhtml#a5b4ee4ae6cba6bb75200ba7af1910873">arm_compute::enable_bitwise_ops::value</a></div><div class="ttdeci">static constexpr bool value</div><div class="ttdoc">Disabled.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00054">Helpers.h:54</a></div></div>
<div class="ttc" id="structarm__compute_1_1enable__bitwise__ops_xhtml"><div class="ttname"><a href="structarm__compute_1_1enable__bitwise__ops.xhtml">arm_compute::enable_bitwise_ops</a></div><div class="ttdoc">Disable bitwise operations by default.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00052">Helpers.h:52</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad34f2150f1c9f8a3ecb7298162124e5d"><div class="ttname"><a href="namespacearm__compute.xhtml#ad34f2150f1c9f8a3ecb7298162124e5d">arm_compute::index2coords</a></div><div class="ttdeci">Coordinates index2coords(const TensorShape &amp;shape, int index)</div><div class="ttdoc">Convert a linear index into n-dimensional coordinates.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00289">Helpers.inl:289</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aa8f4b622d28ff29e9e88a6d5dcd2bea2"><div class="ttname"><a href="namespacearm__compute.xhtml#aa8f4b622d28ff29e9e88a6d5dcd2bea2">arm_compute::delta_bilinear_c1_quantized</a></div><div class="ttdeci">uint8_t delta_bilinear_c1_quantized(const uint8_t *pixel_ptr, size_t stride, float dx, float dy, UniformQuantizationInfo iq_info, UniformQuantizationInfo oq_info)</div><div class="ttdoc">Computes bilinear interpolation for quantized input and output, using the pointer to the top-left pix...</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00161">Helpers.h:161</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml_a1fcd64682b37ed3c2098d0094ce788d8"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">arm_compute::ValidRegion::shape</a></div><div class="ttdeci">TensorShape shape</div><div class="ttdoc">Shape of the valid region.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00247">Types.h:247</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml">arm_compute::BorderSize</a></div><div class="ttdoc">Container for 2D border size.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00259">Types.h:259</a></div></div>
<div class="ttc" id="classarm__compute_1_1_iterator_xhtml_a6e507a84d19ad08bb0f7fc1558ec429a"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml#a6e507a84d19ad08bb0f7fc1558ec429a">arm_compute::Iterator::increment</a></div><div class="ttdeci">void increment(size_t dimension)</div><div class="ttdoc">Increment the iterator along the specified dimension of the step value associated to the dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00167">Helpers.inl:167</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a7c3d8e17b509d0d18cc7c94b7e0a993d"><div class="ttname"><a href="namespacearm__compute.xhtml#a7c3d8e17b509d0d18cc7c94b7e0a993d">arm_compute::get_next_power_two</a></div><div class="ttdeci">unsigned int get_next_power_two(unsigned int x)</div><div class="ttdoc">Given an integer value, this function returns the next power of two.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00775">Helpers.h:775</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a34725aa0412e6cc99193ceb6c8a8e439"><div class="ttname"><a href="namespacearm__compute.xhtml#a34725aa0412e6cc99193ceb6c8a8e439">arm_compute::dequantize_qasymm8</a></div><div class="ttdeci">float dequantize_qasymm8(uint8_t value, const UniformQuantizationInfo &amp;qinfo)</div><div class="ttdoc">Dequantize a value given a asymmetric quantization scheme.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00248">QuantizationInfo.h:248</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">arm_compute::DataLayoutDimension</a></div><div class="ttdeci">DataLayoutDimension</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00123">Types.h:123</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_af22d91f65b56b795fd28f3b302cd3ad2"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">arm_compute::test::validation::dst_shape</a></div><div class="ttdeci">TensorShape dst_shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00164">DFT.cpp:164</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_winograd_8cpp_source.xhtml#l00599">Winograd.cpp:599</a></div></div>
<div class="ttc" id="_window_8h_xhtml"><div class="ttname"><a href="_window_8h.xhtml">Window.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6f698fa1629f7f800b3c8cd77a3d4b4a"><div class="ttname"><a href="namespacearm__compute.xhtml#a6f698fa1629f7f800b3c8cd77a3d4b4a">arm_compute::create_configure_kernel</a></div><div class="ttdeci">std::unique_ptr&lt; Kernel &gt; create_configure_kernel(T &amp;&amp;... args)</div><div class="ttdoc">Helper function to create and return a unique_ptr pointed to a CL/GLES kernel object It also calls th...</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00074">Helpers.h:74</a></div></div>
<div class="ttc" id="classarm__compute_1_1_normalization_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_normalization_layer_info.xhtml">arm_compute::NormalizationLayerInfo</a></div><div class="ttdoc">Normalization Layer Information class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01578">Types.h:1578</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00337">Error.h:337</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="structarm__compute_1_1_uniform_quantization_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml">arm_compute::UniformQuantizationInfo</a></div><div class="ttdoc">Quantization info when assuming per layer quantization.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00039">QuantizationInfo.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aafd98bfd4651f36d691ddd2631a6e5a0"><div class="ttname"><a href="namespacearm__compute.xhtml#aafd98bfd4651f36d691ddd2631a6e5a0">arm_compute::set_data_layout_if_unknown</a></div><div class="ttdeci">bool set_data_layout_if_unknown(ITensorInfo &amp;info, DataLayout data_layout)</div><div class="ttdoc">Set the data layout to the specified value if the current data layout is unknown.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00267">Helpers.inl:267</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a3b0c016b53e97663b39c2f3875f46c24"><div class="ttname"><a href="namespacearm__compute.xhtml#a3b0c016b53e97663b39c2f3875f46c24">arm_compute::compute_winograd_convolution_tiles</a></div><div class="ttdeci">Size2D compute_winograd_convolution_tiles(const Size2D &amp;in_dims, const Size2D &amp;kernel_size, const Size2D &amp;output_tile_size, const PadStrideInfo &amp;conv_info)</div><div class="ttdoc">Calculate the number of output tiles required by Winograd Convolution layer.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00744">Helpers.h:744</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a982730e6f0da5f9490f59bc5f6bb3f27"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a982730e6f0da5f9490f59bc5f6bb3f27">arm_compute::Dimensions::set</a></div><div class="ttdeci">void set(size_t dimension, T value)</div><div class="ttdoc">Accessor to set the value of one of the dimensions.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00074">Dimensions.h:74</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a></div><div class="ttdoc">Interface for NEON tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00036">ITensor.h:36</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad19446be52c2c162fa678b9ae236f445"><div class="ttname"><a href="namespacearm__compute.xhtml#ad19446be52c2c162fa678b9ae236f445">arm_compute::set_data_type_if_unknown</a></div><div class="ttdeci">bool set_data_type_if_unknown(ITensorInfo &amp;info, DataType data_type)</div><div class="ttdoc">Set the data type and number of channels to the specified value if the current data type is unknown.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00256">Helpers.inl:256</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab7980fa5ee693e3282a76da047a1c3b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab7980fa5ee693e3282a76da047a1c3b5">arm_compute::calculate_max_window</a></div><div class="ttdeci">Window calculate_max_window(const ValidRegion &amp;valid_region, const Steps &amp;steps=Steps(), bool skip_border=false, BorderSize border_size=BorderSize())</div><div class="ttdoc">Calculate the maximum window for a given tensor shape and border setting.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_helpers_8cpp_source.xhtml#l00028">Helpers.cpp:28</a></div></div>
<div class="ttc" id="_helpers_8inl_xhtml"><div class="ttname"><a href="_helpers_8inl.xhtml">Helpers.inl</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2018 ARM Limited.</div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00024">00_introduction.dox:24</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a47be6fa38308d0003c25b60b7dbc45ce"><div class="ttname"><a href="namespacearm__compute.xhtml#a47be6fa38308d0003c25b60b7dbc45ce">arm_compute::auto_init_if_empty</a></div><div class="ttdeci">bool auto_init_if_empty(ITensorInfo &amp;info, const TensorShape &amp;shape, int num_channels, DataType data_type, QuantizationInfo quantization_info=QuantizationInfo())</div><div class="ttdoc">Auto initialize the tensor info (shape, number of channels and data type) if the current assignment i...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00201">Helpers.inl:201</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml_a02afeaaf8574e7a78d6b466ff2695052"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">arm_compute::Size2D::height</a></div><div class="ttdeci">size_t height</div><div class="ttdoc">Height of the image region or rectangle.</div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00093">Size2D.h:93</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ac56739a30823647f7d86a0380a2ff62e"><div class="ttname"><a href="namespacearm__compute.xhtml#ac56739a30823647f7d86a0380a2ff62e">arm_compute::compute_strides</a></div><div class="ttdeci">Strides compute_strides(const ITensorInfo &amp;info, T stride_x, Ts &amp;&amp;... fixed_strides)</div><div class="ttdoc">Create a strides object based on the provided strides and the tensor dimensions.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00535">Helpers.h:535</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a21c3e11887f3acf9284ca763372c7da0"><div class="ttname"><a href="namespacearm__compute.xhtml#a21c3e11887f3acf9284ca763372c7da0">arm_compute::permute</a></div><div class="ttdeci">void permute(Dimensions&lt; T &gt; &amp;dimensions, const PermutationVector &amp;perm)</div><div class="ttdoc">Permutes given Dimensions according to a permutation vector.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00570">Helpers.h:570</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_affc1f59e0b2c29bf81e8c95bf0fa8e76"><div class="ttname"><a href="namespacearm__compute.xhtml#affc1f59e0b2c29bf81e8c95bf0fa8e76">arm_compute::calculate_max_enlarged_window</a></div><div class="ttdeci">Window calculate_max_enlarged_window(const ValidRegion &amp;valid_region, const Steps &amp;steps=Steps(), BorderSize border_size=BorderSize())</div><div class="ttdoc">Calculate the maximum window for a given tensor shape and border setting.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_helpers_8cpp_source.xhtml#l00082">Helpers.cpp:82</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aeb6881009f40f57d430752441ec5c4f4"><div class="ttname"><a href="namespacearm__compute.xhtml#aeb6881009f40f57d430752441ec5c4f4">arm_compute::wrap_around</a></div><div class="ttdeci">T wrap_around(T x, T m)</div><div class="ttdoc">Wrap-around a number within the range 0 &lt;= x &lt; m.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00764">Helpers.h:764</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_afc4bd8e872567d9c4c57d89eb0bb3da1"><div class="ttname"><a href="namespacearm__compute.xhtml#afc4bd8e872567d9c4c57d89eb0bb3da1">arm_compute::update_window_and_padding</a></div><div class="ttdeci">bool update_window_and_padding(Window &amp;win, Ts &amp;&amp;... patterns)</div><div class="ttdoc">Update window and padding size for each of the access patterns.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00402">Helpers.h:402</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utility_xhtml_a043270c1f50c73bf9f91fcc4570ccf0c"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#a043270c1f50c73bf9f91fcc4570ccf0c">arm_compute::utility::foldl</a></div><div class="ttdeci">T &amp;&amp; foldl(F &amp;&amp;, T &amp;&amp;value)</div><div class="ttdoc">Base case of foldl.</div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00115">Utility.h:115</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad5fa8bacf824e9538014bfb0dcdaab52"><div class="ttname"><a href="namespacearm__compute.xhtml#ad5fa8bacf824e9538014bfb0dcdaab52">arm_compute::delta_linear_c1_y</a></div><div class="ttdeci">T delta_linear_c1_y(const T *pixel_ptr, size_t stride, float dy)</div><div class="ttdoc">Computes linear interpolation using the pointer to the top pixel and the pixel's distance between the...</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00193">Helpers.h:193</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">arm_compute::Format</a></div><div class="ttdeci">Format</div><div class="ttdoc">Image colour formats.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00052">Types.h:52</a></div></div>
<div class="ttc" id="classarm__compute_1_1_iterator_xhtml_a7d48061a9abb9959505f167fb02e53e1"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml#a7d48061a9abb9959505f167fb02e53e1">arm_compute::Iterator::offset</a></div><div class="ttdeci">constexpr int offset() const</div><div class="ttdoc">Return the offset in bytes from the first element to the current position of the iterator.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00179">Helpers.inl:179</a></div></div>
<div class="ttc" id="classarm__compute_1_1_steps_xhtml"><div class="ttname"><a href="classarm__compute_1_1_steps.xhtml">arm_compute::Steps</a></div><div class="ttdoc">Class to describe a number of elements in each dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_steps_8h_source.xhtml#l00040">Steps.h:40</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_access_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_access_window.xhtml">arm_compute::IAccessWindow</a></div><div class="ttdoc">Interface describing methods to update access window and padding based on kernel parameters.</div><div class="ttdef"><b>Definition:</b> <a href="_i_access_window_8h_source.xhtml#l00071">IAccessWindow.h:71</a></div></div>
<div class="ttc" id="structarm__compute_1_1traits_1_1is__contained_xhtml"><div class="ttname"><a href="structarm__compute_1_1traits_1_1is__contained.xhtml">arm_compute::traits::is_contained</a></div><div class="ttdoc">Check if a type T is contained in a tuple Tuple of types.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00096">Helpers.h:96</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml">arm_compute::Dimensions</a></div><div class="ttdoc">Dimensions with dimensionality.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00041">Dimensions.h:41</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad95e1c14c3007ca18950bf8f4c5a5c93"><div class="ttname"><a href="namespacearm__compute.xhtml#ad95e1c14c3007ca18950bf8f4c5a5c93">arm_compute::coords2index</a></div><div class="ttdeci">int coords2index(const TensorShape &amp;shape, const Coordinates &amp;coord)</div><div class="ttdoc">Convert n-dimensional coordinates into a linear index.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00308">Helpers.inl:308</a></div></div>
<div class="ttc" id="classarm__compute_1_1_iterator_xhtml_ab260e292b1df3944bc1d55a9b2301e41"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">arm_compute::Iterator::ptr</a></div><div class="ttdeci">constexpr uint8_t * ptr() const</div><div class="ttdoc">Return a pointer to the current pixel.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00184">Helpers.inl:184</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml">arm_compute::PadStrideInfo</a></div><div class="ttdoc">Padding and stride information class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00676">Types.h:676</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aa7510e92de273e0457ce12218f712ad4"><div class="ttname"><a href="namespacearm__compute.xhtml#aa7510e92de273e0457ce12218f712ad4">arm_compute::intersect_valid_regions</a></div><div class="ttdeci">ValidRegion intersect_valid_regions(const Ts &amp;... regions)</div><div class="ttdoc">Intersect multiple valid regions.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00503">Helpers.h:503</a></div></div>
<div class="ttc" id="_steps_8h_xhtml"><div class="ttname"><a href="_steps_8h.xhtml">Steps.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_ab2878b67ca384a699c1270900b31290b"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#ab2878b67ca384a699c1270900b31290b">arm_compute::Dimensions::begin</a></div><div class="ttdeci">std::array&lt; T, num_max_dimensions &gt;::iterator begin()</div><div class="ttdoc">Returns a read/write iterator that points to the first element in the dimension array.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00194">Dimensions.h:194</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7819bcbbf45c2e7c1396a137dce54422"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">arm_compute::test::validation::valid_region</a></div><div class="ttdeci">const ValidRegion valid_region</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00109">AbsoluteDifference.cpp:109</a></div></div>
<div class="ttc" id="_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::DataLayoutDimension::CHANNEL</a></div><div class="ttdoc">channel</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_abc72c95941485d8a068fa38372308574"><div class="ttname"><a href="namespacearm__compute.xhtml#abc72c95941485d8a068fa38372308574">arm_compute::create_kernel</a></div><div class="ttdeci">std::unique_ptr&lt; Kernel &gt; create_kernel()</div><div class="ttdoc">Helper function to create and return a unique_ptr pointed to a CL/GLES kernel object.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00086">Helpers.h:86</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab86b0b430468cbf4a5e6e093088024c9"><div class="ttname"><a href="namespacearm__compute.xhtml#ab86b0b430468cbf4a5e6e093088024c9">arm_compute::get_index_data_layout_dimension</a></div><div class="ttdeci">DataLayoutDimension get_index_data_layout_dimension(const DataLayout data_layout, const size_t index)</div><div class="ttdoc">Get the DataLayoutDimension of a given index and layout.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00355">Helpers.inl:355</a></div></div>
<div class="ttc" id="classarm__compute_1_1_iterator_xhtml_a45381773d6cba2ad9e9d2d04515fa40b"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml#a45381773d6cba2ad9e9d2d04515fa40b">arm_compute::Iterator::Iterator</a></div><div class="ttdeci">constexpr Iterator()</div><div class="ttdoc">Default constructor to create an empty iterator.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00135">Helpers.inl:135</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad656a27ce8a507e31096ca45683ba9a5"><div class="ttname"><a href="namespacearm__compute.xhtml#ad656a27ce8a507e31096ca45683ba9a5">arm_compute::delta_bilinear_c1</a></div><div class="ttdeci">T delta_bilinear_c1(const T *pixel_ptr, size_t stride, float dx, float dy)</div><div class="ttdoc">Computes bilinear interpolation using the pointer to the top-left pixel and the pixel's distance betw...</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00127">Helpers.h:127</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utility_xhtml_a067ebd28103d827b6ec17032e2344064"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">arm_compute::utility::for_each</a></div><div class="ttdeci">void for_each(F &amp;&amp;)</div><div class="ttdoc">Base case of for_each.</div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00093">Utility.h:93</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a15541ee1af263ccf663a5dc23de9fb89"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a15541ee1af263ccf663a5dc23de9fb89">arm_compute::test::validation::src_info</a></div><div class="ttdeci">TensorInfo src_info(src_shape, 1, data_type)</div></div>
<div class="ttc" id="classarm__compute_1_1_strides_xhtml"><div class="ttname"><a href="classarm__compute_1_1_strides.xhtml">arm_compute::Strides</a></div><div class="ttdoc">Strides of an item in bytes.</div><div class="ttdef"><b>Definition:</b> <a href="_strides_8h_source.xhtml#l00037">Strides.h:37</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a45509a321422cd1542958b5c33021bda"><div class="ttname"><a href="namespacearm__compute.xhtml#a45509a321422cd1542958b5c33021bda">arm_compute::calculate_valid_region_scale</a></div><div class="ttdeci">ValidRegion calculate_valid_region_scale(const ITensorInfo &amp;src_info, const TensorShape &amp;dst_shape, InterpolationPolicy interpolate_policy, SamplingPolicy sampling_policy, bool border_undefined)</div><div class="ttdoc">Helper function to calculate the Valid Region for Scale.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_helpers_8cpp_source.xhtml#l00184">Helpers.cpp:184</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab7b3af731907e85fcaf72555c446176b"><div class="ttname"><a href="namespacearm__compute.xhtml#ab7b3af731907e85fcaf72555c446176b">arm_compute::pixel_area_c1u8_clamp</a></div><div class="ttdeci">uint8_t pixel_area_c1u8_clamp(const uint8_t *first_pixel_ptr, size_t stride, size_t width, size_t height, float wr, float hr, int x, int y)</div><div class="ttdoc">Return the pixel at (x,y) using area interpolation by clamping when out of borders.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00032">Helpers.inl:32</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_afe6212a8969f1c67ad9dc905e0259211"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#afe6212a8969f1c67ad9dc905e0259211">arm_compute::test::framework::operator &amp;</a></div><div class="ttdeci">DatasetMode operator &amp;(DatasetMode t1, DatasetMode t2)</div><div class="ttdef"><b>Definition:</b> <a href="_dataset_modes_8h_source.xhtml#l00048">DatasetModes.h:48</a></div></div>
<div class="ttc" id="classarm__compute_1_1_iterator_xhtml_a599f5025b7e6b8bfead740a88e56d5bc"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml#a599f5025b7e6b8bfead740a88e56d5bc">arm_compute::Iterator::reset</a></div><div class="ttdeci">void reset(size_t dimension)</div><div class="ttdoc">Move the iterator back to the beginning of the specified dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00189">Helpers.inl:189</a></div></div>
<div class="ttc" id="_strides_8h_xhtml"><div class="ttname"><a href="_strides_8h.xhtml">Strides.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_ac684b52c6197edff9cccb3abd1e41f59"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#ac684b52c6197edff9cccb3abd1e41f59">arm_compute::Dimensions::end</a></div><div class="ttdeci">std::array&lt; T, num_max_dimensions &gt;::iterator end()</div><div class="ttdoc">Returns a read/write iterator that points one past the last element in the dimension array.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00218">Dimensions.h:218</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml_a02bed8590a9ddf520e58a060059518ec"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">arm_compute::Size2D::width</a></div><div class="ttdeci">size_t width</div><div class="ttdoc">Width of the image region or rectangle.</div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00092">Size2D.h:92</a></div></div>
<div class="ttc" id="_coordinates_8h_xhtml"><div class="ttname"><a href="_coordinates_8h.xhtml">Coordinates.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1c8d639ec2b3086a9506e72605a32333"><div class="ttname"><a href="namespacearm__compute.xhtml#a1c8d639ec2b3086a9506e72605a32333">arm_compute::pixel_bilinear_c1</a></div><div class="ttdeci">T pixel_bilinear_c1(const T *first_pixel_ptr, size_t stride, float x, float y)</div><div class="ttdoc">Return the pixel at (x,y) using bilinear interpolation.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00244">Helpers.h:244</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml">arm_compute::Size2D</a></div><div class="ttdoc">Class for specifying the size of an image or rectangle.</div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00034">Size2D.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a80a5f2d6e3a697c9aad893a3b4242615"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">arm_compute::Dimensions::num_dimensions</a></div><div class="ttdeci">unsigned int num_dimensions() const</div><div class="ttdoc">Returns the effective dimensionality of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00122">Dimensions.h:122</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a9d1a839c51134b2ae171a2264c541b6f"><div class="ttname"><a href="namespacearm__compute.xhtml#a9d1a839c51134b2ae171a2264c541b6f">arm_compute::set_shape_if_empty</a></div><div class="ttdeci">bool set_shape_if_empty(ITensorInfo &amp;info, const TensorShape &amp;shape)</div><div class="ttdoc">Set the shape to the specified value if the current assignment is empty.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00234">Helpers.inl:234</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml_a9c54fb6cea3557692fe7c00c40bb40ad"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#a9c54fb6cea3557692fe7c00c40bb40ad">arm_compute::TensorShape::set</a></div><div class="ttdeci">TensorShape &amp; set(size_t dimension, size_t value, bool apply_dim_correction=true)</div><div class="ttdoc">Accessor to set the value of one of the dimensions.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00078">TensorShape.h:78</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::DataLayoutDimension::WIDTH</a></div><div class="ttdoc">width</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00122">Helpers.inl:122</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a8076ba239b6681067b6cfea7f773a39f"><div class="ttname"><a href="namespacearm__compute.xhtml#a8076ba239b6681067b6cfea7f773a39f">arm_compute::set_format_if_unknown</a></div><div class="ttdeci">bool set_format_if_unknown(ITensorInfo &amp;info, Format format)</div><div class="ttdoc">Set the format, data type and number of channels to the specified value if the current data type is u...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00245">Helpers.inl:245</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_arithmetic_addition_8cpp_source.xhtml#l00135">ArithmeticAddition.cpp:135</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml">arm_compute::ValidRegion</a></div><div class="ttdoc">Container for valid region of a window.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00174">Types.h:174</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a46e938020a3ac8c926d0590b7fe957db"><div class="ttname"><a href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00326">Helpers.inl:326</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f4125dba5283887b34f889b1c615c0c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">arm_compute::test::validation::info</a></div><div class="ttdeci">info</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_afa55519774605e5b840fb031fdd7b196"><div class="ttname"><a href="namespacearm__compute.xhtml#afa55519774605e5b840fb031fdd7b196">arm_compute::pixel_bilinear_c1_clamp</a></div><div class="ttdeci">uint8_t pixel_bilinear_c1_clamp(const T *first_pixel_ptr, size_t stride, size_t width, size_t height, float x, float y)</div><div class="ttdoc">Return the pixel at (x,y) using bilinear interpolation by clamping when out of borders.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00271">Helpers.h:271</a></div></div>
<div class="ttc" id="classarm__compute_1_1_iterator_xhtml"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml">arm_compute::Iterator</a></div><div class="ttdoc">Iterator updated by execute_window_loop for each window element.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00318">Helpers.h:318</a></div></div>
<div class="ttc" id="arm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdoc">Available data types.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00074">Types.h:74</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ae76431f34048289454a9cb6dc66d7c6b"><div class="ttname"><a href="namespacearm__compute.xhtml#ae76431f34048289454a9cb6dc66d7c6b">arm_compute::get_normalization_dimension_index</a></div><div class="ttdeci">unsigned int get_normalization_dimension_index(DataLayout layout, const NormalizationLayerInfo &amp;info)</div><div class="ttdoc">Calculate the normalization dimension index for a given normalization type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00726">Helpers.h:726</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00114">Types.h:114</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a75509469ec2689ec143f4a37bbcb4437"><div class="ttname"><a href="namespacearm__compute.xhtml#a75509469ec2689ec143f4a37bbcb4437">arm_compute::set_quantization_info_if_empty</a></div><div class="ttdeci">bool set_quantization_info_if_empty(ITensorInfo &amp;info, QuantizationInfo quantization_info)</div><div class="ttdoc">Set the quantization info to the specified value if the current quantization info is empty and the da...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00278">Helpers.inl:278</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a9047a414d692d8814181a667a7ee68c4"><div class="ttname"><a href="namespacearm__compute.xhtml#a9047a414d692d8814181a667a7ee68c4">arm_compute::calculate_max_window_horizontal</a></div><div class="ttdeci">Window calculate_max_window_horizontal(const ValidRegion &amp;valid_region, const Steps &amp;steps=Steps(), bool skip_border=false, BorderSize border_size=BorderSize())</div><div class="ttdoc">Calculate the maximum window used by a horizontal kernel for a given tensor shape and border setting.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_helpers_8cpp_source.xhtml#l00131">Helpers.cpp:131</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml_a55a69b397082accd94221dd10b722cf7"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">arm_compute::ValidRegion::anchor</a></div><div class="ttdeci">Coordinates anchor</div><div class="ttdoc">Anchor for the start of the valid region.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00246">Types.h:246</a></div></div>
<div class="ttc" id="_i_access_window_8h_xhtml"><div class="ttname"><a href="_i_access_window_8h.xhtml">IAccessWindow.h</a></div></div>
<div class="ttc" id="_tensor_shape_8h_xhtml"><div class="ttname"><a href="_tensor_shape_8h.xhtml">TensorShape.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a16a59381d4d74d17d86d69eb4d286d7b"><div class="ttname"><a href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7b">arm_compute::SamplingPolicy</a></div><div class="ttdeci">SamplingPolicy</div><div class="ttdoc">Available Sampling Policies.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00096">Types.h:96</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a25591070cf041aff512719050c39e5ee"><div class="ttname"><a href="namespacearm__compute.xhtml#a25591070cf041aff512719050c39e5ee">arm_compute::quantize_qasymm8</a></div><div class="ttdeci">uint8_t quantize_qasymm8(float value, const UniformQuantizationInfo &amp;qinfo, RoundingPolicy rounding_policy=RoundingPolicy::TO_NEAREST_UP)</div><div class="ttdoc">Quantize a value given a asymmetric quantization scheme.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00204">QuantizationInfo.h:204</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_214608ef36d61442cb2b0c1c4e9a7def.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="dir_1fb090f0c6070330bfaccc4236d3ca0d.xhtml">core</a></li><li class="navelem"><a class="el" href="arm__compute_2core_2_helpers_8h.xhtml">Helpers.h</a></li>
    <li class="footer">Generated on Mon Sep 2 2019 11:47:18 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
