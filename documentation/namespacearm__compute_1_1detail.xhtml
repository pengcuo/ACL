<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute::detail Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">19.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('namespacearm__compute_1_1detail.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute::detail Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1detail_1_1brelu.xhtml">brelu</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bounded RELU activation object.  <a href="structarm__compute_1_1detail_1_1brelu.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1detail_1_1compare__dimension.xhtml">compare_dimension</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to compare two <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a> objects and throw an error on mismatch.  <a href="classarm__compute_1_1detail_1_1compare__dimension.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1detail_1_1dummy.xhtml">dummy</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dummy activation object.  <a href="structarm__compute_1_1detail_1_1dummy.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1detail_1_1get__tensor__info__t.xhtml">get_tensor_info_t</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the info for a tensor, dummy struct.  <a href="structarm__compute_1_1detail_1_1get__tensor__info__t.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1detail_1_1get__tensor__info__t_3_01_i_tensor_info_01_5_01_4.xhtml">get_tensor_info_t&lt; ITensorInfo * &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the info for a tensor.  <a href="structarm__compute_1_1detail_1_1get__tensor__info__t_3_01_i_tensor_info_01_5_01_4.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1detail_1_1linear.xhtml">linear</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Linear activation object.  <a href="structarm__compute_1_1detail_1_1linear.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1detail_1_1logistic.xhtml">logistic</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Logistic activation object.  <a href="structarm__compute_1_1detail_1_1logistic.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1detail_1_1lubrelu.xhtml">lubrelu</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Lower-Upper Bounded RELU activation object.  <a href="structarm__compute_1_1detail_1_1lubrelu.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1detail_1_1relu.xhtml">relu</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">RELU activation object.  <a href="structarm__compute_1_1detail_1_1relu.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1detail_1_1square.xhtml">square</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Square activation object.  <a href="structarm__compute_1_1detail_1_1square.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:afaba543670e99c2483e0bd1996201ba3"><td class="memItemLeft" align="right" valign="top">float32x4x3_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#afaba543670e99c2483e0bd1996201ba3">load_matrix_row</a> (const float *ptr)</td></tr>
<tr class="separator:afaba543670e99c2483e0bd1996201ba3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87f8e27c52a10ec90100fd5b0fcf663d"><td class="memTemplParams" colspan="2">template&lt;unsigned int stridex&gt; </td></tr>
<tr class="memitem:a87f8e27c52a10ec90100fd5b0fcf663d"><td class="memTemplItemLeft" align="right" valign="top">float32x4x2_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a87f8e27c52a10ec90100fd5b0fcf663d">convolve_3x3</a> (const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2)</td></tr>
<tr class="separator:a87f8e27c52a10ec90100fd5b0fcf663d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d9c87411d51689909ba746f88bcff56"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a5d9c87411d51689909ba746f88bcff56"><td class="memTemplItemLeft" align="right" valign="top">float32x4x2_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a5d9c87411d51689909ba746f88bcff56">convolve_3x3&lt; 1 &gt;</a> (const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2)</td></tr>
<tr class="separator:a5d9c87411d51689909ba746f88bcff56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2247cf9504428f406ed4da244fdb8d1c"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a2247cf9504428f406ed4da244fdb8d1c"><td class="memTemplItemLeft" align="right" valign="top">float32x4x2_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a2247cf9504428f406ed4da244fdb8d1c">convolve_3x3&lt; 2 &gt;</a> (const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2)</td></tr>
<tr class="separator:a2247cf9504428f406ed4da244fdb8d1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0766fc0a98f3257e3867ac59fb97d5f"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:ab0766fc0a98f3257e3867ac59fb97d5f"><td class="memTemplItemLeft" align="right" valign="top">float32x4x2_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#ab0766fc0a98f3257e3867ac59fb97d5f">convolve_3x3&lt; 3 &gt;</a> (const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2)</td></tr>
<tr class="separator:ab0766fc0a98f3257e3867ac59fb97d5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ac67082e6f68cb7ed1939240fb6bdb5"><td class="memTemplParams" colspan="2">template&lt;unsigned int stridex&gt; </td></tr>
<tr class="memitem:a1ac67082e6f68cb7ed1939240fb6bdb5"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a> (float *buffer, const float32x4x2_t &amp;values)</td></tr>
<tr class="memdesc:a1ac67082e6f68cb7ed1939240fb6bdb5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores a float32x4x2_t array into a memory location.  <a href="#a1ac67082e6f68cb7ed1939240fb6bdb5">More...</a><br /></td></tr>
<tr class="separator:a1ac67082e6f68cb7ed1939240fb6bdb5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad61a01ef06cc3c41e4bb5006d9307687"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:ad61a01ef06cc3c41e4bb5006d9307687"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#ad61a01ef06cc3c41e4bb5006d9307687">store_results&lt; 1 &gt;</a> (float *buffer, const float32x4x2_t &amp;values)</td></tr>
<tr class="separator:ad61a01ef06cc3c41e4bb5006d9307687"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abaf3037739c190361ad3f827d73440a1"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:abaf3037739c190361ad3f827d73440a1"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#abaf3037739c190361ad3f827d73440a1">store_results&lt; 2 &gt;</a> (float *buffer, const float32x4x2_t &amp;values)</td></tr>
<tr class="separator:abaf3037739c190361ad3f827d73440a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a208468ac4ffbfe19d7fb03402ca927f6"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a208468ac4ffbfe19d7fb03402ca927f6"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a208468ac4ffbfe19d7fb03402ca927f6">store_results&lt; 3 &gt;</a> (float *buffer, const float32x4x2_t &amp;values)</td></tr>
<tr class="separator:a208468ac4ffbfe19d7fb03402ca927f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30f6368deaea5f10f9dd1bbaa28c24e6"><td class="memTemplParams" colspan="2">template&lt;unsigned int stridex&gt; </td></tr>
<tr class="memitem:a30f6368deaea5f10f9dd1bbaa28c24e6"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a30f6368deaea5f10f9dd1bbaa28c24e6">get_input_num_elems_processed</a> (unsigned int num_elems_written_per_iteration)</td></tr>
<tr class="memdesc:a30f6368deaea5f10f9dd1bbaa28c24e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the number of elements processed on 3x3 convolution.  <a href="#a30f6368deaea5f10f9dd1bbaa28c24e6">More...</a><br /></td></tr>
<tr class="separator:a30f6368deaea5f10f9dd1bbaa28c24e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a08a003e6ce7ea86cb7d8f4523c0eb5"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a7a08a003e6ce7ea86cb7d8f4523c0eb5"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a7a08a003e6ce7ea86cb7d8f4523c0eb5">get_input_num_elems_processed&lt; 1 &gt;</a> (unsigned int num_elems_written_per_iteration)</td></tr>
<tr class="separator:a7a08a003e6ce7ea86cb7d8f4523c0eb5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbdb2272e2409d0c249ba467eaac81ea"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:adbdb2272e2409d0c249ba467eaac81ea"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#adbdb2272e2409d0c249ba467eaac81ea">get_input_num_elems_processed&lt; 2 &gt;</a> (unsigned int num_elems_written_per_iteration)</td></tr>
<tr class="separator:adbdb2272e2409d0c249ba467eaac81ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2a6fee9c18f26a5fab56c2d14289705"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:ae2a6fee9c18f26a5fab56c2d14289705"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#ae2a6fee9c18f26a5fab56c2d14289705">get_input_num_elems_processed&lt; 3 &gt;</a> (unsigned int num_elems_written_per_iteration)</td></tr>
<tr class="separator:ae2a6fee9c18f26a5fab56c2d14289705"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5db34f1ae85326efebbe1dadb65f0301"><td class="memItemLeft" align="right" valign="top">float32x4x3_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a5db34f1ae85326efebbe1dadb65f0301">load_matrix_row</a> (const float *ptr, int weights_offset=0)</td></tr>
<tr class="memdesc:a5db34f1ae85326efebbe1dadb65f0301"><td class="mdescLeft">&#160;</td><td class="mdescRight">Loads a 3x3 matrix as a row (float).  <a href="#a5db34f1ae85326efebbe1dadb65f0301">More...</a><br /></td></tr>
<tr class="separator:a5db34f1ae85326efebbe1dadb65f0301"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b01a1b2b7bd61029dfaa8601b23b4fc"><td class="memItemLeft" align="right" valign="top">int32x4x3_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a8b01a1b2b7bd61029dfaa8601b23b4fc">load_matrix_row</a> (const uint8_t *ptr, int weights_offset=0)</td></tr>
<tr class="memdesc:a8b01a1b2b7bd61029dfaa8601b23b4fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Loads a 3x3 matrix as a row (uint8_t).  <a href="#a8b01a1b2b7bd61029dfaa8601b23b4fc">More...</a><br /></td></tr>
<tr class="separator:a8b01a1b2b7bd61029dfaa8601b23b4fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a703f0d5487e077348c2ac6bce80d9abb"><td class="memItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a703f0d5487e077348c2ac6bce80d9abb">single_convolve_3x3_dilation</a> (const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2, const size_t dilation_x, int input_offset)</td></tr>
<tr class="memdesc:a703f0d5487e077348c2ac6bce80d9abb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform a 3x3 convolution for 4 consecutive elements on float32 when dilation.x() or dilation.y() is not 1.  <a href="#a703f0d5487e077348c2ac6bce80d9abb">More...</a><br /></td></tr>
<tr class="separator:a703f0d5487e077348c2ac6bce80d9abb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaddda26efa47a7ae48a99cb9e0da5ded"><td class="memTemplParams" colspan="2">template&lt;unsigned int stridex&gt; </td></tr>
<tr class="memitem:aaddda26efa47a7ae48a99cb9e0da5ded"><td class="memTemplItemLeft" align="right" valign="top">float32x4x2_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#aaddda26efa47a7ae48a99cb9e0da5ded">convolve_3x3_dilation</a> (const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2, const size_t dilation_x, int input_offset=0)</td></tr>
<tr class="memdesc:aaddda26efa47a7ae48a99cb9e0da5ded"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform a 3x3 convolution for 8 consecutive elements on float32 when dilation.x() or dilation.y() is not 1.  <a href="#aaddda26efa47a7ae48a99cb9e0da5ded">More...</a><br /></td></tr>
<tr class="separator:aaddda26efa47a7ae48a99cb9e0da5ded"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae95441c4b3e7ac3b5ee380d0eee08309"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:ae95441c4b3e7ac3b5ee380d0eee08309"><td class="memTemplItemLeft" align="right" valign="top">float32x4x2_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#ae95441c4b3e7ac3b5ee380d0eee08309">convolve_3x3_dilation&lt; 1 &gt;</a> (const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2, const size_t dilation_x, int input_offset)</td></tr>
<tr class="separator:ae95441c4b3e7ac3b5ee380d0eee08309"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8e9c2fce033617e1f841c0e86704710"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:aa8e9c2fce033617e1f841c0e86704710"><td class="memTemplItemLeft" align="right" valign="top">float32x4x2_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#aa8e9c2fce033617e1f841c0e86704710">convolve_3x3_dilation&lt; 2 &gt;</a> (const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2, const size_t dilation_x, int input_offset)</td></tr>
<tr class="separator:aa8e9c2fce033617e1f841c0e86704710"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2ce72e1df5c799c83fdec8bb7042eef"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:ad2ce72e1df5c799c83fdec8bb7042eef"><td class="memTemplItemLeft" align="right" valign="top">float32x4x2_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#ad2ce72e1df5c799c83fdec8bb7042eef">convolve_3x3_dilation&lt; 3 &gt;</a> (const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2, const size_t dilation_x, int input_offset)</td></tr>
<tr class="separator:ad2ce72e1df5c799c83fdec8bb7042eef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e0f54a3b96d13df284f298349c0665a"><td class="memTemplParams" colspan="2">template&lt;unsigned int stridex&gt; </td></tr>
<tr class="memitem:a5e0f54a3b96d13df284f298349c0665a"><td class="memTemplItemLeft" align="right" valign="top">float32x4x2_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a5e0f54a3b96d13df284f298349c0665a">convolve_3x3</a> (const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2, int input_offset=0)</td></tr>
<tr class="memdesc:a5e0f54a3b96d13df284f298349c0665a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform a convolve3x3 on float32.  <a href="#a5e0f54a3b96d13df284f298349c0665a">More...</a><br /></td></tr>
<tr class="separator:a5e0f54a3b96d13df284f298349c0665a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94d43dcfc4944b248483b487ff09ef91"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a94d43dcfc4944b248483b487ff09ef91"><td class="memTemplItemLeft" align="right" valign="top">float32x4x2_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a94d43dcfc4944b248483b487ff09ef91">convolve_3x3&lt; 1 &gt;</a> (const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2, int input_offset)</td></tr>
<tr class="separator:a94d43dcfc4944b248483b487ff09ef91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7e696498dc262dc55dc90e8d4a2fc77"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:ab7e696498dc262dc55dc90e8d4a2fc77"><td class="memTemplItemLeft" align="right" valign="top">float32x4x2_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#ab7e696498dc262dc55dc90e8d4a2fc77">convolve_3x3&lt; 2 &gt;</a> (const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2, int input_offset)</td></tr>
<tr class="separator:ab7e696498dc262dc55dc90e8d4a2fc77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6bd0765ae4fac0ff4373d4e3877a759"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:ad6bd0765ae4fac0ff4373d4e3877a759"><td class="memTemplItemLeft" align="right" valign="top">float32x4x2_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#ad6bd0765ae4fac0ff4373d4e3877a759">convolve_3x3&lt; 3 &gt;</a> (const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2, int input_offset)</td></tr>
<tr class="separator:ad6bd0765ae4fac0ff4373d4e3877a759"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab981d9f1da663b405c24281bfd04b896"><td class="memItemLeft" align="right" valign="top">int32x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#ab981d9f1da663b405c24281bfd04b896">single_convolve_3x3_dilation</a> (const uint8_t *in_top, const uint8_t *in_mid, const uint8_t *in_low, const int32x4x3_t &amp;m0, const int32x4x3_t &amp;m1, const int32x4x3_t &amp;m2, size_t dilation_x, int input_offset)</td></tr>
<tr class="memdesc:ab981d9f1da663b405c24281bfd04b896"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform a 3x3 convolution for 4 consecutive elements on uint8_t when dilation.x() or dilation.y() is not 1.  <a href="#ab981d9f1da663b405c24281bfd04b896">More...</a><br /></td></tr>
<tr class="separator:ab981d9f1da663b405c24281bfd04b896"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3da1e0c8d95c655479b6195d380f41e"><td class="memTemplParams" colspan="2">template&lt;unsigned int stridex&gt; </td></tr>
<tr class="memitem:ae3da1e0c8d95c655479b6195d380f41e"><td class="memTemplItemLeft" align="right" valign="top">int32x4x2_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#ae3da1e0c8d95c655479b6195d380f41e">convolve_3x3_dilation</a> (const uint8_t *in_top, const uint8_t *in_mid, const uint8_t *in_low, const int32x4x3_t &amp;m0, const int32x4x3_t &amp;m1, const int32x4x3_t &amp;m2, const size_t dilation_x, int input_offset)</td></tr>
<tr class="memdesc:ae3da1e0c8d95c655479b6195d380f41e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform a 3x3 convolution for 4 consecutive elements on uint8_t when dilation.x() or dilation.y() is not 1.  <a href="#ae3da1e0c8d95c655479b6195d380f41e">More...</a><br /></td></tr>
<tr class="separator:ae3da1e0c8d95c655479b6195d380f41e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae59b420eeccce8559edf150ecf9d5fdd"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:ae59b420eeccce8559edf150ecf9d5fdd"><td class="memTemplItemLeft" align="right" valign="top">int32x4x2_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#ae59b420eeccce8559edf150ecf9d5fdd">convolve_3x3_dilation&lt; 1 &gt;</a> (const uint8_t *in_top, const uint8_t *in_mid, const uint8_t *in_low, const int32x4x3_t &amp;m0, const int32x4x3_t &amp;m1, const int32x4x3_t &amp;m2, const size_t dilation_x, int input_offset)</td></tr>
<tr class="separator:ae59b420eeccce8559edf150ecf9d5fdd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93001798dca50920585380cf5ae07a75"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a93001798dca50920585380cf5ae07a75"><td class="memTemplItemLeft" align="right" valign="top">int32x4x2_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a93001798dca50920585380cf5ae07a75">convolve_3x3_dilation&lt; 2 &gt;</a> (const uint8_t *in_top, const uint8_t *in_mid, const uint8_t *in_low, const int32x4x3_t &amp;m0, const int32x4x3_t &amp;m1, const int32x4x3_t &amp;m2, const size_t dilation_x, int input_offset)</td></tr>
<tr class="separator:a93001798dca50920585380cf5ae07a75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7fcd4c55c1214b2514b8b695c56424f"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:ad7fcd4c55c1214b2514b8b695c56424f"><td class="memTemplItemLeft" align="right" valign="top">int32x4x2_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#ad7fcd4c55c1214b2514b8b695c56424f">convolve_3x3_dilation&lt; 3 &gt;</a> (const uint8_t *in_top, const uint8_t *in_mid, const uint8_t *in_low, const int32x4x3_t &amp;m0, const int32x4x3_t &amp;m1, const int32x4x3_t &amp;m2, const size_t dilation_x, int input_offset)</td></tr>
<tr class="separator:ad7fcd4c55c1214b2514b8b695c56424f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0041ff0a5f1d498c9275977cd93ef2cc"><td class="memTemplParams" colspan="2">template&lt;unsigned int stridex&gt; </td></tr>
<tr class="memitem:a0041ff0a5f1d498c9275977cd93ef2cc"><td class="memTemplItemLeft" align="right" valign="top">int32x4x2_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a0041ff0a5f1d498c9275977cd93ef2cc">convolve_3x3</a> (const uint8_t *in_top, const uint8_t *in_mid, const uint8_t *in_low, const int32x4x3_t &amp;m0, const int32x4x3_t &amp;m1, const int32x4x3_t &amp;m2, int input_offset)</td></tr>
<tr class="memdesc:a0041ff0a5f1d498c9275977cd93ef2cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform a convolve3x3 on uint8_t.  <a href="#a0041ff0a5f1d498c9275977cd93ef2cc">More...</a><br /></td></tr>
<tr class="separator:a0041ff0a5f1d498c9275977cd93ef2cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a740f46fcde6fabd70afc176fac5950bf"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a740f46fcde6fabd70afc176fac5950bf"><td class="memTemplItemLeft" align="right" valign="top">int32x4x2_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a740f46fcde6fabd70afc176fac5950bf">convolve_3x3&lt; 1 &gt;</a> (const uint8_t *in_top, const uint8_t *in_mid, const uint8_t *in_low, const int32x4x3_t &amp;m0, const int32x4x3_t &amp;m1, const int32x4x3_t &amp;m2, int input_offset)</td></tr>
<tr class="separator:a740f46fcde6fabd70afc176fac5950bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2aabdc940ba98f3b2c5a0e573cac8bcc"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a2aabdc940ba98f3b2c5a0e573cac8bcc"><td class="memTemplItemLeft" align="right" valign="top">int32x4x2_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a2aabdc940ba98f3b2c5a0e573cac8bcc">convolve_3x3&lt; 2 &gt;</a> (const uint8_t *in_top, const uint8_t *in_mid, const uint8_t *in_low, const int32x4x3_t &amp;m0, const int32x4x3_t &amp;m1, const int32x4x3_t &amp;m2, int input_offset)</td></tr>
<tr class="separator:a2aabdc940ba98f3b2c5a0e573cac8bcc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96ebd967ad3ef1c2fcfaed80cab10567"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a96ebd967ad3ef1c2fcfaed80cab10567"><td class="memTemplItemLeft" align="right" valign="top">int32x4x2_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a96ebd967ad3ef1c2fcfaed80cab10567">convolve_3x3&lt; 3 &gt;</a> (const uint8_t *in_top, const uint8_t *in_mid, const uint8_t *in_low, const int32x4x3_t &amp;m0, const int32x4x3_t &amp;m1, const int32x4x3_t &amp;m2, int input_offset)</td></tr>
<tr class="separator:a96ebd967ad3ef1c2fcfaed80cab10567"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9f26cd83047a111336033fb7466faf1"><td class="memTemplParams" colspan="2">template&lt;unsigned int stridex&gt; </td></tr>
<tr class="memitem:aa9f26cd83047a111336033fb7466faf1"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#aa9f26cd83047a111336033fb7466faf1">store_results</a> (int32_t *buffer, const int32x4x2_t &amp;values)</td></tr>
<tr class="memdesc:aa9f26cd83047a111336033fb7466faf1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores a uint32_t array into a memory location.  <a href="#aa9f26cd83047a111336033fb7466faf1">More...</a><br /></td></tr>
<tr class="separator:aa9f26cd83047a111336033fb7466faf1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a143f43b1fb56a8d806145e95d4c3995e"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a143f43b1fb56a8d806145e95d4c3995e"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a143f43b1fb56a8d806145e95d4c3995e">store_results&lt; 1 &gt;</a> (int32_t *buffer, const int32x4x2_t &amp;values)</td></tr>
<tr class="separator:a143f43b1fb56a8d806145e95d4c3995e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af63e34203346681c35b68fcca2026a06"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:af63e34203346681c35b68fcca2026a06"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#af63e34203346681c35b68fcca2026a06">store_results&lt; 2 &gt;</a> (int32_t *buffer, const int32x4x2_t &amp;values)</td></tr>
<tr class="separator:af63e34203346681c35b68fcca2026a06"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a991bde46f2841422fb98258127305050"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a991bde46f2841422fb98258127305050"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a991bde46f2841422fb98258127305050">store_results&lt; 3 &gt;</a> (int32_t *buffer, const int32x4x2_t &amp;values)</td></tr>
<tr class="separator:a991bde46f2841422fb98258127305050"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17a8ccb1f281296a0ee7eb00693febbd"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a17a8ccb1f281296a0ee7eb00693febbd">get_input_num_elems_processed</a> (unsigned int num_elems_written_per_iteration, unsigned int stridex)</td></tr>
<tr class="separator:a17a8ccb1f281296a0ee7eb00693febbd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45d610a8bc262f7007c934293361e888"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a45d610a8bc262f7007c934293361e888"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a45d610a8bc262f7007c934293361e888">have_different_dimensions</a> (const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;dim1, const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;dim2, unsigned int upper_dim)</td></tr>
<tr class="separator:a45d610a8bc262f7007c934293361e888"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94a5ba47c282279f5279617b961b8599"><td class="memTemplParams" colspan="2">template&lt;typename F &gt; </td></tr>
<tr class="memitem:a94a5ba47c282279f5279617b961b8599"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a94a5ba47c282279f5279617b961b8599">for_each_error</a> (F &amp;&amp;)</td></tr>
<tr class="separator:a94a5ba47c282279f5279617b961b8599"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7955712fcb1027a92679cf656e9394cb"><td class="memTemplParams" colspan="2">template&lt;typename F , typename T , typename... Ts&gt; </td></tr>
<tr class="memitem:a7955712fcb1027a92679cf656e9394cb"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a7955712fcb1027a92679cf656e9394cb">for_each_error</a> (F &amp;&amp;func, T &amp;&amp;arg, Ts &amp;&amp;... args)</td></tr>
<tr class="separator:a7955712fcb1027a92679cf656e9394cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a87f8e27c52a10ec90100fd5b0fcf663d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a87f8e27c52a10ec90100fd5b0fcf663d">&#9670;&nbsp;</a></span>convolve_3x3() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x2_t arm_compute::detail::convolve_3x3 </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a5e0f54a3b96d13df284f298349c0665a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e0f54a3b96d13df284f298349c0665a">&#9670;&nbsp;</a></span>convolve_3x3() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x2_t arm_compute::detail::convolve_3x3 </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_offset</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Perform a convolve3x3 on float32. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in_top</td><td>Pointer to the first row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in_mid</td><td>Pointer to the second row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in_low</td><td>Pointer to the third row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m0</td><td>First row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m1</td><td>Second row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m2</td><td>Third row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_offset</td><td>(Optional) Input quantization offset. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a0041ff0a5f1d498c9275977cd93ef2cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0041ff0a5f1d498c9275977cd93ef2cc">&#9670;&nbsp;</a></span>convolve_3x3() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int32x4x2_t arm_compute::detail::convolve_3x3 </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Perform a convolve3x3 on uint8_t. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in_top</td><td>Pointer to the first row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in_mid</td><td>Pointer to the second row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in_low</td><td>Pointer to the third row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m0</td><td>First row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m1</td><td>Second row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m2</td><td>Third row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_offset</td><td>(Optional) Input quantization offset. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a5d9c87411d51689909ba746f88bcff56"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d9c87411d51689909ba746f88bcff56">&#9670;&nbsp;</a></span>convolve_3x3&lt; 1 &gt;() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x2_t <a class="el" href="namespacearm__compute_1_1detail.xhtml#a87f8e27c52a10ec90100fd5b0fcf663d">arm_compute::detail::convolve_3x3</a>&lt; 1 &gt; </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00051">51</a> of file <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml">NEDirectConvolution3x3.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> float32x4x3_t vtop =</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    {</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            vld1q_f32(in_top),</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            vld1q_f32(in_top + 4),</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            vld1q_f32(in_top + 8)</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        }</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    };</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> float32x4x3_t vmid =</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            vld1q_f32(in_mid),</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            vld1q_f32(in_mid + 4),</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            vld1q_f32(in_mid + 8)</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        }</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    };</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> float32x4x3_t vlow =</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            vld1q_f32(in_low),</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            vld1q_f32(in_low + 4),</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            vld1q_f32(in_low + 8)</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        }</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    };</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    float32x4x2_t out =</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            vmulq_f32(vtop.val[0], m0.val[0]),</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            vmulq_f32(vtop.val[1], m0.val[0])</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        }</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    };</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vtop.val[0], vtop.val[1], 1), m0.val[1]);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vtop.val[0], vtop.val[1], 2), m0.val[2]);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vmid.val[0], m1.val[0]);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vmid.val[0], vmid.val[1], 1), m1.val[1]);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vmid.val[0], vmid.val[1], 2), m1.val[2]);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vlow.val[0], m2.val[0]);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vlow.val[0], vlow.val[1], 1), m2.val[1]);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vlow.val[0], vlow.val[1], 2), m2.val[2]);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vtop.val[1], vtop.val[2], 1), m0.val[1]);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vtop.val[1], vtop.val[2], 2), m0.val[2]);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vmid.val[1], m1.val[0]);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vmid.val[1], vmid.val[2], 1), m1.val[1]);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vmid.val[1], vmid.val[2], 2), m1.val[2]);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vlow.val[1], m2.val[0]);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vlow.val[1], vlow.val[2], 1), m2.val[1]);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vlow.val[1], vlow.val[2], 2), m2.val[2]);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00109">convolve_3x3&lt; 2 &gt;()</a>, and <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00119">convolve_3x3&lt; 3 &gt;()</a>.</p>

</div>
</div>
<a id="a94d43dcfc4944b248483b487ff09ef91"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94d43dcfc4944b248483b487ff09ef91">&#9670;&nbsp;</a></span>convolve_3x3&lt; 1 &gt;() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x2_t <a class="el" href="namespacearm__compute_1_1detail.xhtml#a87f8e27c52a10ec90100fd5b0fcf663d">arm_compute::detail::convolve_3x3</a>&lt; 1 &gt; </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00218">218</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;{</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(input_offset);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keyword">const</span> float32x4x3_t vtop =</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    {</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        {</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            vld1q_f32(in_top),</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            vld1q_f32(in_top + 4),</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            vld1q_f32(in_top + 8)</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        }</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    };</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keyword">const</span> float32x4x3_t vmid =</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    {</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        {</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            vld1q_f32(in_mid),</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            vld1q_f32(in_mid + 4),</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;            vld1q_f32(in_mid + 8)</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        }</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    };</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keyword">const</span> float32x4x3_t vlow =</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    {</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        {</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            vld1q_f32(in_low),</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            vld1q_f32(in_low + 4),</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            vld1q_f32(in_low + 8)</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        }</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    };</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    float32x4x2_t out =</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    {</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        {</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            vmulq_f32(vtop.val[0], m0.val[0]),</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            vmulq_f32(vtop.val[1], m0.val[0])</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        }</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    };</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vtop.val[0], vtop.val[1], 1), m0.val[1]);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vtop.val[0], vtop.val[1], 2), m0.val[2]);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vmid.val[0], m1.val[0]);</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vmid.val[0], vmid.val[1], 1), m1.val[1]);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vmid.val[0], vmid.val[1], 2), m1.val[2]);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vlow.val[0], m2.val[0]);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vlow.val[0], vlow.val[1], 1), m2.val[1]);</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vlow.val[0], vlow.val[1], 2), m2.val[2]);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vtop.val[1], vtop.val[2], 1), m0.val[1]);</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vtop.val[1], vtop.val[2], 2), m0.val[2]);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vmid.val[1], m1.val[0]);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vmid.val[1], vmid.val[2], 1), m1.val[1]);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vmid.val[1], vmid.val[2], 2), m1.val[2]);</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vlow.val[1], m2.val[0]);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vlow.val[1], vlow.val[2], 1), m2.val[1]);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vlow.val[1], vlow.val[2], 2), m2.val[2]);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00160">Error.h:160</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00160">ARM_COMPUTE_UNUSED</a>.</p>

</div>
</div>
<a id="a740f46fcde6fabd70afc176fac5950bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a740f46fcde6fabd70afc176fac5950bf">&#9670;&nbsp;</a></span>convolve_3x3&lt; 1 &gt;() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int32x4x2_t <a class="el" href="namespacearm__compute_1_1detail.xhtml#a87f8e27c52a10ec90100fd5b0fcf663d">arm_compute::detail::convolve_3x3</a>&lt; 1 &gt; </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00479">479</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;{</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <span class="keyword">const</span> int32x4_t v_input_offset = vdupq_n_s32(input_offset);</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <span class="keyword">const</span> uint8x8x2_t vtop =</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    {</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;        {</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;            vld1_u8(in_top),</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;            vld1_u8(in_top + 8)</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;        }</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    };</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    <span class="keyword">const</span> uint8x8x2_t vmid =</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    {</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;        {</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;            vld1_u8(in_mid),</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;            vld1_u8(in_mid + 8)</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;        }</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    };</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="keyword">const</span> uint8x8x2_t vlow =</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    {</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;        {</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;            vld1_u8(in_low),</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;            vld1_u8(in_low + 8)</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        }</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    };</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    <span class="keyword">const</span> int32x4x3_t vtop_s32 =</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    {</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        {</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;            vaddw_s16(v_input_offset, vreinterpret_s16_u16(vget_low_u16(vmovl_u8(vtop.val[0])))),</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;            vaddw_s16(v_input_offset, vreinterpret_s16_u16(vget_high_u16(vmovl_u8(vtop.val[0])))),</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;            vaddw_s16(v_input_offset, vreinterpret_s16_u16(vget_low_u16(vmovl_u8(vtop.val[1])))),</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;        }</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    };</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    <span class="keyword">const</span> int32x4x3_t vmid_s32 =</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    {</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        {</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;            vaddw_s16(v_input_offset, vreinterpret_s16_u16(vget_low_u16(vmovl_u8(vmid.val[0])))),</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;            vaddw_s16(v_input_offset, vreinterpret_s16_u16(vget_high_u16(vmovl_u8(vmid.val[0])))),</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;            vaddw_s16(v_input_offset, vreinterpret_s16_u16(vget_low_u16(vmovl_u8(vmid.val[1])))),</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        }</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    };</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="keyword">const</span> int32x4x3_t vlow_s32 =</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    {</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;        {</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;            vaddw_s16(v_input_offset, vreinterpret_s16_u16(vget_low_u16(vmovl_u8(vlow.val[0])))),</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;            vaddw_s16(v_input_offset, vreinterpret_s16_u16(vget_high_u16(vmovl_u8(vlow.val[0])))),</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;            vaddw_s16(v_input_offset, vreinterpret_s16_u16(vget_low_u16(vmovl_u8(vlow.val[1])))),</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        }</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    };</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    int32x4x2_t out</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    {</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;        {</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;            vdupq_n_s32(0),</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;            vdupq_n_s32(0),</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;        }</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    };</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    <span class="comment">// 0</span></div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    out.val[0] = vmlaq_s32(out.val[0], vtop_s32.val[0], m0.val[0]);</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    out.val[0] = vmlaq_s32(out.val[0], vextq_s32(vtop_s32.val[0], vtop_s32.val[1], 1), m0.val[1]);</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    out.val[0] = vmlaq_s32(out.val[0], vextq_s32(vtop_s32.val[0], vtop_s32.val[1], 2), m0.val[2]);</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    out.val[0] = vmlaq_s32(out.val[0], vmid_s32.val[0], m1.val[0]);</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    out.val[0] = vmlaq_s32(out.val[0], vextq_s32(vmid_s32.val[0], vmid_s32.val[1], 1), m1.val[1]);</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    out.val[0] = vmlaq_s32(out.val[0], vextq_s32(vmid_s32.val[0], vmid_s32.val[1], 2), m1.val[2]);</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    out.val[0] = vmlaq_s32(out.val[0], vlow_s32.val[0], m2.val[0]);</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    out.val[0] = vmlaq_s32(out.val[0], vextq_s32(vlow_s32.val[0], vlow_s32.val[1], 1), m2.val[1]);</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    out.val[0] = vmlaq_s32(out.val[0], vextq_s32(vlow_s32.val[0], vlow_s32.val[1], 2), m2.val[2]);</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    <span class="comment">// 1</span></div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    out.val[1] = vmlaq_s32(out.val[1], vtop_s32.val[1], m0.val[0]);</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    out.val[1] = vmlaq_s32(out.val[1], vextq_s32(vtop_s32.val[1], vtop_s32.val[2], 1), m0.val[1]);</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    out.val[1] = vmlaq_s32(out.val[1], vextq_s32(vtop_s32.val[1], vtop_s32.val[2], 2), m0.val[2]);</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    out.val[1] = vmlaq_s32(out.val[1], vmid_s32.val[1], m1.val[0]);</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    out.val[1] = vmlaq_s32(out.val[1], vextq_s32(vmid_s32.val[1], vmid_s32.val[2], 1), m1.val[1]);</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    out.val[1] = vmlaq_s32(out.val[1], vextq_s32(vmid_s32.val[1], vmid_s32.val[2], 2), m1.val[2]);</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    out.val[1] = vmlaq_s32(out.val[1], vlow_s32.val[1], m2.val[0]);</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    out.val[1] = vmlaq_s32(out.val[1], vextq_s32(vlow_s32.val[1], vlow_s32.val[2], 1), m2.val[1]);</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    out.val[1] = vmlaq_s32(out.val[1], vextq_s32(vlow_s32.val[1], vlow_s32.val[2], 2), m2.val[2]);</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a2247cf9504428f406ed4da244fdb8d1c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2247cf9504428f406ed4da244fdb8d1c">&#9670;&nbsp;</a></span>convolve_3x3&lt; 2 &gt;() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x2_t <a class="el" href="namespacearm__compute_1_1detail.xhtml#a87f8e27c52a10ec90100fd5b0fcf663d">arm_compute::detail::convolve_3x3</a>&lt; 2 &gt; </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00109">109</a> of file <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml">NEDirectConvolution3x3.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;{</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    float32x4x2_t out = <a class="code" href="namespacearm__compute_1_1detail.xhtml#a5d9c87411d51689909ba746f88bcff56">convolve_3x3&lt;1&gt;</a>(in_top, in_mid, in_low, m0, m1, m2);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    out.val[0]        = vsetq_lane_f32(vgetq_lane_f32(out.val[0], 2), out.val[0], 1);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    out.val[0]        = vsetq_lane_f32(vgetq_lane_f32(out.val[1], 0), out.val[0], 2);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    out.val[0]        = vsetq_lane_f32(vgetq_lane_f32(out.val[1], 2), out.val[0], 3);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1detail_xhtml_a5d9c87411d51689909ba746f88bcff56"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a5d9c87411d51689909ba746f88bcff56">arm_compute::detail::convolve_3x3&lt; 1 &gt;</a></div><div class="ttdeci">float32x4x2_t convolve_3x3&lt; 1 &gt;(const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution3x3_8h_source.xhtml#l00051">NEDirectConvolution3x3.h:51</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00051">convolve_3x3&lt; 1 &gt;()</a>.</p>

</div>
</div>
<a id="ab7e696498dc262dc55dc90e8d4a2fc77"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab7e696498dc262dc55dc90e8d4a2fc77">&#9670;&nbsp;</a></span>convolve_3x3&lt; 2 &gt;() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x2_t <a class="el" href="namespacearm__compute_1_1detail.xhtml#a87f8e27c52a10ec90100fd5b0fcf663d">arm_compute::detail::convolve_3x3</a>&lt; 2 &gt; </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00280">280</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;{</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(input_offset);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keyword">const</span> float32x4x2_t vtop     = vld2q_f32(in_top);</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keyword">const</span> float32x4x2_t vmid     = vld2q_f32(in_mid);</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keyword">const</span> float32x4x2_t vlow     = vld2q_f32(in_low);</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="keyword">const</span> float32x4_t   vtop_end = vld1q_f32(in_top + 8);</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keyword">const</span> float32x4_t   vmid_end = vld1q_f32(in_mid + 8);</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keyword">const</span> float32x4_t   vlow_end = vld1q_f32(in_low + 8);</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    float32x4x2_t out =</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        {</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            {</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;              vmulq_f32(vtop.val[0], m0.val[0]),</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;              vdupq_n_f32(0)</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            }</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        };</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vtop.val[1], m0.val[1]);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vtop.val[0], vtop_end, 1), m0.val[2]);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vmid.val[0], m1.val[0]);</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vmid.val[1], m1.val[1]);</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vmid.val[0], vmid_end, 1), m1.val[2]);</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vlow.val[0], m2.val[0]);</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vlow.val[1], m2.val[1]);</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vlow.val[0], vlow_end, 1), m2.val[2]);</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00160">Error.h:160</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00160">ARM_COMPUTE_UNUSED</a>.</p>

</div>
</div>
<a id="a2aabdc940ba98f3b2c5a0e573cac8bcc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2aabdc940ba98f3b2c5a0e573cac8bcc">&#9670;&nbsp;</a></span>convolve_3x3&lt; 2 &gt;() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int32x4x2_t <a class="el" href="namespacearm__compute_1_1detail.xhtml#a87f8e27c52a10ec90100fd5b0fcf663d">arm_compute::detail::convolve_3x3</a>&lt; 2 &gt; </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00569">569</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;{</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    int32x4x2_t out = <a class="code" href="namespacearm__compute_1_1detail.xhtml#a740f46fcde6fabd70afc176fac5950bf">convolve_3x3&lt;1&gt;</a>(in_top, in_mid, in_low, m0, m1, m2, input_offset);</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    out.val[0]      = vsetq_lane_s32(vgetq_lane_s32(out.val[0], 2), out.val[0], 1);</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    out.val[0]      = vsetq_lane_s32(vgetq_lane_s32(out.val[1], 0), out.val[0], 2);</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    out.val[0]      = vsetq_lane_s32(vgetq_lane_s32(out.val[1], 2), out.val[0], 3);</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1detail_xhtml_a740f46fcde6fabd70afc176fac5950bf"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a740f46fcde6fabd70afc176fac5950bf">arm_compute::detail::convolve_3x3&lt; 1 &gt;</a></div><div class="ttdeci">int32x4x2_t convolve_3x3&lt; 1 &gt;(const uint8_t *in_top, const uint8_t *in_mid, const uint8_t *in_low, const int32x4x3_t &amp;m0, const int32x4x3_t &amp;m1, const int32x4x3_t &amp;m2, int input_offset)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution_detail_8h_source.xhtml#l00479">NEDirectConvolutionDetail.h:479</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00051">convolve_3x3&lt; 1 &gt;()</a>.</p>

</div>
</div>
<a id="ab0766fc0a98f3257e3867ac59fb97d5f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab0766fc0a98f3257e3867ac59fb97d5f">&#9670;&nbsp;</a></span>convolve_3x3&lt; 3 &gt;() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x2_t <a class="el" href="namespacearm__compute_1_1detail.xhtml#a87f8e27c52a10ec90100fd5b0fcf663d">arm_compute::detail::convolve_3x3</a>&lt; 3 &gt; </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00119">119</a> of file <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml">NEDirectConvolution3x3.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;{</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    float32x4x2_t out = <a class="code" href="namespacearm__compute_1_1detail.xhtml#a5d9c87411d51689909ba746f88bcff56">convolve_3x3&lt;1&gt;</a>(in_top, in_mid, in_low, m0, m1, m2);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    out.val[0]        = vsetq_lane_f32(vgetq_lane_f32(out.val[0], 3), out.val[0], 1);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1detail_xhtml_a5d9c87411d51689909ba746f88bcff56"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a5d9c87411d51689909ba746f88bcff56">arm_compute::detail::convolve_3x3&lt; 1 &gt;</a></div><div class="ttdeci">float32x4x2_t convolve_3x3&lt; 1 &gt;(const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution3x3_8h_source.xhtml#l00051">NEDirectConvolution3x3.h:51</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00051">convolve_3x3&lt; 1 &gt;()</a>.</p>

</div>
</div>
<a id="ad6bd0765ae4fac0ff4373d4e3877a759"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad6bd0765ae4fac0ff4373d4e3877a759">&#9670;&nbsp;</a></span>convolve_3x3&lt; 3 &gt;() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x2_t <a class="el" href="namespacearm__compute_1_1detail.xhtml#a87f8e27c52a10ec90100fd5b0fcf663d">arm_compute::detail::convolve_3x3</a>&lt; 3 &gt; </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00314">314</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;{</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(input_offset);</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    float32x4x2_t out = <a class="code" href="namespacearm__compute_1_1detail.xhtml#a740f46fcde6fabd70afc176fac5950bf">convolve_3x3&lt;1&gt;</a>(in_top, in_mid, in_low, m0, m1, m2, input_offset);</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    out.val[0]        = vsetq_lane_f32(vgetq_lane_f32(out.val[0], 3), out.val[0], 1);</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00160">Error.h:160</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1detail_xhtml_a740f46fcde6fabd70afc176fac5950bf"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a740f46fcde6fabd70afc176fac5950bf">arm_compute::detail::convolve_3x3&lt; 1 &gt;</a></div><div class="ttdeci">int32x4x2_t convolve_3x3&lt; 1 &gt;(const uint8_t *in_top, const uint8_t *in_mid, const uint8_t *in_low, const int32x4x3_t &amp;m0, const int32x4x3_t &amp;m1, const int32x4x3_t &amp;m2, int input_offset)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution_detail_8h_source.xhtml#l00479">NEDirectConvolutionDetail.h:479</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00160">ARM_COMPUTE_UNUSED</a>, and <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00051">convolve_3x3&lt; 1 &gt;()</a>.</p>

</div>
</div>
<a id="a96ebd967ad3ef1c2fcfaed80cab10567"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a96ebd967ad3ef1c2fcfaed80cab10567">&#9670;&nbsp;</a></span>convolve_3x3&lt; 3 &gt;() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int32x4x2_t <a class="el" href="namespacearm__compute_1_1detail.xhtml#a87f8e27c52a10ec90100fd5b0fcf663d">arm_compute::detail::convolve_3x3</a>&lt; 3 &gt; </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00581">581</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;{</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    int32x4x2_t out = <a class="code" href="namespacearm__compute_1_1detail.xhtml#a740f46fcde6fabd70afc176fac5950bf">convolve_3x3&lt;1&gt;</a>(in_top, in_mid, in_low, m0, m1, m2, input_offset);</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    out.val[0]      = vsetq_lane_s32(vgetq_lane_s32(out.val[0], 3), out.val[0], 1);</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1detail_xhtml_a740f46fcde6fabd70afc176fac5950bf"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a740f46fcde6fabd70afc176fac5950bf">arm_compute::detail::convolve_3x3&lt; 1 &gt;</a></div><div class="ttdeci">int32x4x2_t convolve_3x3&lt; 1 &gt;(const uint8_t *in_top, const uint8_t *in_mid, const uint8_t *in_low, const int32x4x3_t &amp;m0, const int32x4x3_t &amp;m1, const int32x4x3_t &amp;m2, int input_offset)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution_detail_8h_source.xhtml#l00479">NEDirectConvolutionDetail.h:479</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00051">convolve_3x3&lt; 1 &gt;()</a>.</p>

</div>
</div>
<a id="aaddda26efa47a7ae48a99cb9e0da5ded"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaddda26efa47a7ae48a99cb9e0da5ded">&#9670;&nbsp;</a></span>convolve_3x3_dilation() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x2_t arm_compute::detail::convolve_3x3_dilation </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>dilation_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_offset</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Perform a 3x3 convolution for 8 consecutive elements on float32 when dilation.x() or dilation.y() is not 1. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in_top</td><td>Pointer to the first row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in_mid</td><td>Pointer to the second row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in_low</td><td>Pointer to the third row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m0</td><td>First row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m1</td><td>Second row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m2</td><td>Third row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dilation_x</td><td>Dilation, in elements across x. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_offset</td><td>(Optional) Input quantization offset. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ae3da1e0c8d95c655479b6195d380f41e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae3da1e0c8d95c655479b6195d380f41e">&#9670;&nbsp;</a></span>convolve_3x3_dilation() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int32x4x2_t arm_compute::detail::convolve_3x3_dilation </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>dilation_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Perform a 3x3 convolution for 4 consecutive elements on uint8_t when dilation.x() or dilation.y() is not 1. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in_top</td><td>Pointer to the first row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in_mid</td><td>Pointer to the second row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in_low</td><td>Pointer to the third row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m0</td><td>First row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m1</td><td>Second row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m2</td><td>Third row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dilation_x</td><td>Dilation, in elements across x. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_offset</td><td>Input quantization offset. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ae95441c4b3e7ac3b5ee380d0eee08309"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae95441c4b3e7ac3b5ee380d0eee08309">&#9670;&nbsp;</a></span>convolve_3x3_dilation&lt; 1 &gt;() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x2_t <a class="el" href="namespacearm__compute_1_1detail.xhtml#aaddda26efa47a7ae48a99cb9e0da5ded">arm_compute::detail::convolve_3x3_dilation</a>&lt; 1 &gt; </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>dilation_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00157">157</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;{</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(input_offset);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">const</span> float32x4x2_t out =</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    {</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            <a class="code" href="namespacearm__compute_1_1detail.xhtml#ab981d9f1da663b405c24281bfd04b896">single_convolve_3x3_dilation</a>(in_top, in_mid, in_low, m0, m1, m2, dilation_x, input_offset),</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            <a class="code" href="namespacearm__compute_1_1detail.xhtml#ab981d9f1da663b405c24281bfd04b896">single_convolve_3x3_dilation</a>(in_top + 4, in_mid + 4, in_low + 4, m0, m1, m2, dilation_x, input_offset)</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        }</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    };</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1detail_xhtml_ab981d9f1da663b405c24281bfd04b896"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#ab981d9f1da663b405c24281bfd04b896">arm_compute::detail::single_convolve_3x3_dilation</a></div><div class="ttdeci">int32x4_t single_convolve_3x3_dilation(const uint8_t *in_top, const uint8_t *in_mid, const uint8_t *in_low, const int32x4x3_t &amp;m0, const int32x4x3_t &amp;m1, const int32x4x3_t &amp;m2, size_t dilation_x, int input_offset)</div><div class="ttdoc">Perform a 3x3 convolution for 4 consecutive elements on uint8_t when dilation.x() or dilation....</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution_detail_8h_source.xhtml#l00337">NEDirectConvolutionDetail.h:337</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00160">Error.h:160</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00160">ARM_COMPUTE_UNUSED</a>, and <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00094">single_convolve_3x3_dilation()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00175">convolve_3x3_dilation&lt; 2 &gt;()</a>, and <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00189">convolve_3x3_dilation&lt; 3 &gt;()</a>.</p>

</div>
</div>
<a id="ae59b420eeccce8559edf150ecf9d5fdd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae59b420eeccce8559edf150ecf9d5fdd">&#9670;&nbsp;</a></span>convolve_3x3_dilation&lt; 1 &gt;() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int32x4x2_t <a class="el" href="namespacearm__compute_1_1detail.xhtml#aaddda26efa47a7ae48a99cb9e0da5ded">arm_compute::detail::convolve_3x3_dilation</a>&lt; 1 &gt; </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>dilation_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00426">426</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;{</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <span class="keyword">const</span> int32x4x2_t out =</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    {</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        {</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;            <a class="code" href="namespacearm__compute_1_1detail.xhtml#ab981d9f1da663b405c24281bfd04b896">single_convolve_3x3_dilation</a>(in_top, in_mid, in_low, m0, m1, m2, dilation_x, input_offset),</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;            <a class="code" href="namespacearm__compute_1_1detail.xhtml#ab981d9f1da663b405c24281bfd04b896">single_convolve_3x3_dilation</a>(in_top + 4, in_mid + 4, in_low + 4, m0, m1, m2, dilation_x, input_offset)</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        }</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    };</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1detail_xhtml_ab981d9f1da663b405c24281bfd04b896"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#ab981d9f1da663b405c24281bfd04b896">arm_compute::detail::single_convolve_3x3_dilation</a></div><div class="ttdeci">int32x4_t single_convolve_3x3_dilation(const uint8_t *in_top, const uint8_t *in_mid, const uint8_t *in_low, const int32x4x3_t &amp;m0, const int32x4x3_t &amp;m1, const int32x4x3_t &amp;m2, size_t dilation_x, int input_offset)</div><div class="ttdoc">Perform a 3x3 convolution for 4 consecutive elements on uint8_t when dilation.x() or dilation....</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution_detail_8h_source.xhtml#l00337">NEDirectConvolutionDetail.h:337</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00094">single_convolve_3x3_dilation()</a>.</p>

</div>
</div>
<a id="aa8e9c2fce033617e1f841c0e86704710"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa8e9c2fce033617e1f841c0e86704710">&#9670;&nbsp;</a></span>convolve_3x3_dilation&lt; 2 &gt;() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x2_t <a class="el" href="namespacearm__compute_1_1detail.xhtml#aaddda26efa47a7ae48a99cb9e0da5ded">arm_compute::detail::convolve_3x3_dilation</a>&lt; 2 &gt; </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>dilation_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00175">175</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;{</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(input_offset);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    float32x4x2_t out = <a class="code" href="namespacearm__compute_1_1detail.xhtml#ae59b420eeccce8559edf150ecf9d5fdd">convolve_3x3_dilation&lt;1&gt;</a>(in_top, in_mid, in_low, m0, m1, m2, dilation_x, input_offset);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    out.val[0]        = vsetq_lane_f32(vgetq_lane_f32(out.val[0], 2), out.val[0], 1);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    out.val[0]        = vsetq_lane_f32(vgetq_lane_f32(out.val[1], 0), out.val[0], 2);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    out.val[0]        = vsetq_lane_f32(vgetq_lane_f32(out.val[1], 2), out.val[0], 3);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00160">Error.h:160</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1detail_xhtml_ae59b420eeccce8559edf150ecf9d5fdd"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#ae59b420eeccce8559edf150ecf9d5fdd">arm_compute::detail::convolve_3x3_dilation&lt; 1 &gt;</a></div><div class="ttdeci">int32x4x2_t convolve_3x3_dilation&lt; 1 &gt;(const uint8_t *in_top, const uint8_t *in_mid, const uint8_t *in_low, const int32x4x3_t &amp;m0, const int32x4x3_t &amp;m1, const int32x4x3_t &amp;m2, const size_t dilation_x, int input_offset)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution_detail_8h_source.xhtml#l00426">NEDirectConvolutionDetail.h:426</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00160">ARM_COMPUTE_UNUSED</a>, and <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00157">convolve_3x3_dilation&lt; 1 &gt;()</a>.</p>

</div>
</div>
<a id="a93001798dca50920585380cf5ae07a75"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a93001798dca50920585380cf5ae07a75">&#9670;&nbsp;</a></span>convolve_3x3_dilation&lt; 2 &gt;() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int32x4x2_t <a class="el" href="namespacearm__compute_1_1detail.xhtml#aaddda26efa47a7ae48a99cb9e0da5ded">arm_compute::detail::convolve_3x3_dilation</a>&lt; 2 &gt; </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>dilation_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00440">440</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;{</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    int32x4x2_t out = <a class="code" href="namespacearm__compute_1_1detail.xhtml#ae59b420eeccce8559edf150ecf9d5fdd">convolve_3x3_dilation&lt;1&gt;</a>(in_top, in_mid, in_low, m0, m1, m2, dilation_x, input_offset);</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    out.val[0] = vsetq_lane_s32(vgetq_lane_s32(out.val[0], 2), out.val[0], 1);</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    out.val[0] = vsetq_lane_s32(vgetq_lane_s32(out.val[1], 0), out.val[0], 2);</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    out.val[0] = vsetq_lane_s32(vgetq_lane_s32(out.val[1], 2), out.val[0], 3);</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1detail_xhtml_ae59b420eeccce8559edf150ecf9d5fdd"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#ae59b420eeccce8559edf150ecf9d5fdd">arm_compute::detail::convolve_3x3_dilation&lt; 1 &gt;</a></div><div class="ttdeci">int32x4x2_t convolve_3x3_dilation&lt; 1 &gt;(const uint8_t *in_top, const uint8_t *in_mid, const uint8_t *in_low, const int32x4x3_t &amp;m0, const int32x4x3_t &amp;m1, const int32x4x3_t &amp;m2, const size_t dilation_x, int input_offset)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution_detail_8h_source.xhtml#l00426">NEDirectConvolutionDetail.h:426</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00157">convolve_3x3_dilation&lt; 1 &gt;()</a>.</p>

</div>
</div>
<a id="ad2ce72e1df5c799c83fdec8bb7042eef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad2ce72e1df5c799c83fdec8bb7042eef">&#9670;&nbsp;</a></span>convolve_3x3_dilation&lt; 3 &gt;() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x2_t <a class="el" href="namespacearm__compute_1_1detail.xhtml#aaddda26efa47a7ae48a99cb9e0da5ded">arm_compute::detail::convolve_3x3_dilation</a>&lt; 3 &gt; </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>dilation_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00189">189</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;{</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(input_offset);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    float32x4x2_t out = <a class="code" href="namespacearm__compute_1_1detail.xhtml#ae59b420eeccce8559edf150ecf9d5fdd">convolve_3x3_dilation&lt;1&gt;</a>(in_top, in_mid, in_low, m0, m1, m2, dilation_x, input_offset);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    ;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    out.val[0] = vsetq_lane_f32(vgetq_lane_f32(out.val[0], 3), out.val[0], 1);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00160">Error.h:160</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1detail_xhtml_ae59b420eeccce8559edf150ecf9d5fdd"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#ae59b420eeccce8559edf150ecf9d5fdd">arm_compute::detail::convolve_3x3_dilation&lt; 1 &gt;</a></div><div class="ttdeci">int32x4x2_t convolve_3x3_dilation&lt; 1 &gt;(const uint8_t *in_top, const uint8_t *in_mid, const uint8_t *in_low, const int32x4x3_t &amp;m0, const int32x4x3_t &amp;m1, const int32x4x3_t &amp;m2, const size_t dilation_x, int input_offset)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution_detail_8h_source.xhtml#l00426">NEDirectConvolutionDetail.h:426</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00160">ARM_COMPUTE_UNUSED</a>, and <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00157">convolve_3x3_dilation&lt; 1 &gt;()</a>.</p>

</div>
</div>
<a id="ad7fcd4c55c1214b2514b8b695c56424f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad7fcd4c55c1214b2514b8b695c56424f">&#9670;&nbsp;</a></span>convolve_3x3_dilation&lt; 3 &gt;() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int32x4x2_t <a class="el" href="namespacearm__compute_1_1detail.xhtml#aaddda26efa47a7ae48a99cb9e0da5ded">arm_compute::detail::convolve_3x3_dilation</a>&lt; 3 &gt; </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>dilation_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00453">453</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;{</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    int32x4x2_t out = <a class="code" href="namespacearm__compute_1_1detail.xhtml#ae59b420eeccce8559edf150ecf9d5fdd">convolve_3x3_dilation&lt;1&gt;</a>(in_top, in_mid, in_low, m0, m1, m2, dilation_x, input_offset);</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    out.val[0]      = vsetq_lane_s32(vgetq_lane_s32(out.val[0], 3), out.val[0], 1);</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1detail_xhtml_ae59b420eeccce8559edf150ecf9d5fdd"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#ae59b420eeccce8559edf150ecf9d5fdd">arm_compute::detail::convolve_3x3_dilation&lt; 1 &gt;</a></div><div class="ttdeci">int32x4x2_t convolve_3x3_dilation&lt; 1 &gt;(const uint8_t *in_top, const uint8_t *in_mid, const uint8_t *in_low, const int32x4x3_t &amp;m0, const int32x4x3_t &amp;m1, const int32x4x3_t &amp;m2, const size_t dilation_x, int input_offset)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution_detail_8h_source.xhtml#l00426">NEDirectConvolutionDetail.h:426</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00157">convolve_3x3_dilation&lt; 1 &gt;()</a>.</p>

</div>
</div>
<a id="a94a5ba47c282279f5279617b961b8599"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94a5ba47c282279f5279617b961b8599">&#9670;&nbsp;</a></span>for_each_error() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> arm_compute::detail::for_each_error </td>
          <td>(</td>
          <td class="paramtype">F &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_validate_8h_source.xhtml#l00108">108</a> of file <a class="el" href="_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;{</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_validate_8h_source.xhtml#l00280">arm_compute::error_on_mismatching_dimensions()</a>, and <a class="el" href="_validate_8h_source.xhtml#l00114">for_each_error()</a>.</p>

</div>
</div>
<a id="a7955712fcb1027a92679cf656e9394cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7955712fcb1027a92679cf656e9394cb">&#9670;&nbsp;</a></span>for_each_error() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> arm_compute::detail::for_each_error </td>
          <td>(</td>
          <td class="paramtype">F &amp;&amp;&#160;</td>
          <td class="paramname"><em>func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>arg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_validate_8h_source.xhtml#l00114">114</a> of file <a class="el" href="_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;{</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(func(arg));</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="namespacearm__compute_1_1detail.xhtml#a7955712fcb1027a92679cf656e9394cb">for_each_error</a>(func, args...));</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a8a1e1c105f0bdaf37db408c7cfcb77a4"><div class="ttname"><a href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ON_ERROR(status)</div><div class="ttdoc">Checks if a status contains an error and returns it.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00193">Error.h:193</a></div></div>
<div class="ttc" id="classarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1detail_xhtml_a7955712fcb1027a92679cf656e9394cb"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a7955712fcb1027a92679cf656e9394cb">arm_compute::detail::for_each_error</a></div><div class="ttdeci">arm_compute::Status for_each_error(F &amp;&amp;func, T &amp;&amp;arg, Ts &amp;&amp;... args)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00114">Validate.h:114</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00193">ARM_COMPUTE_RETURN_ON_ERROR</a>, and <a class="el" href="_validate_8h_source.xhtml#l00108">for_each_error()</a>.</p>

</div>
</div>
<a id="a30f6368deaea5f10f9dd1bbaa28c24e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30f6368deaea5f10f9dd1bbaa28c24e6">&#9670;&nbsp;</a></span>get_input_num_elems_processed() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int get_input_num_elems_processed </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_elems_written_per_iteration</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the number of elements processed on 3x3 convolution. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">num_elems_written_per_iteration</td><td>Number of elements written per iteration on 3x3 convolution.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The number of elements processed. </dd></dl>

</div>
</div>
<a id="a17a8ccb1f281296a0ee7eb00693febbd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a17a8ccb1f281296a0ee7eb00693febbd">&#9670;&nbsp;</a></span>get_input_num_elems_processed() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::detail::get_input_num_elems_processed </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_elems_written_per_iteration</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>stridex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00960">960</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;{</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;    <span class="keywordflow">switch</span>(stridex)</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;    {</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;        <span class="keywordflow">case</span> 1:</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a7a08a003e6ce7ea86cb7d8f4523c0eb5">get_input_num_elems_processed&lt;1&gt;</a>(num_elems_written_per_iteration);</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;        <span class="keywordflow">case</span> 2:</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#adbdb2272e2409d0c249ba467eaac81ea">get_input_num_elems_processed&lt;2&gt;</a>(num_elems_written_per_iteration);</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;        <span class="keywordflow">case</span> 3:</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#ae2a6fee9c18f26a5fab56c2d14289705">get_input_num_elems_processed&lt;3&gt;</a>(num_elems_written_per_iteration);</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;            <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;stridex not supported&quot;</span>);</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;            <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;    }</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a05b19c75afe9c24200a62b9724734bbd"><div class="ttname"><a href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00261">Error.h:261</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1detail_xhtml_ae2a6fee9c18f26a5fab56c2d14289705"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#ae2a6fee9c18f26a5fab56c2d14289705">arm_compute::detail::get_input_num_elems_processed&lt; 3 &gt;</a></div><div class="ttdeci">int get_input_num_elems_processed&lt; 3 &gt;(unsigned int num_elems_written_per_iteration)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution3x3_8h_source.xhtml#l00164">NEDirectConvolution3x3.h:164</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1detail_xhtml_adbdb2272e2409d0c249ba467eaac81ea"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#adbdb2272e2409d0c249ba467eaac81ea">arm_compute::detail::get_input_num_elems_processed&lt; 2 &gt;</a></div><div class="ttdeci">int get_input_num_elems_processed&lt; 2 &gt;(unsigned int num_elems_written_per_iteration)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution3x3_8h_source.xhtml#l00158">NEDirectConvolution3x3.h:158</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1detail_xhtml_a7a08a003e6ce7ea86cb7d8f4523c0eb5"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a7a08a003e6ce7ea86cb7d8f4523c0eb5">arm_compute::detail::get_input_num_elems_processed&lt; 1 &gt;</a></div><div class="ttdeci">int get_input_num_elems_processed&lt; 1 &gt;(unsigned int num_elems_written_per_iteration)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution3x3_8h_source.xhtml#l00152">NEDirectConvolution3x3.h:152</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00261">ARM_COMPUTE_ERROR</a>, <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00152">get_input_num_elems_processed&lt; 1 &gt;()</a>, <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00158">get_input_num_elems_processed&lt; 2 &gt;()</a>, and <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00164">get_input_num_elems_processed&lt; 3 &gt;()</a>.</p>

</div>
</div>
<a id="a7a08a003e6ce7ea86cb7d8f4523c0eb5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7a08a003e6ce7ea86cb7d8f4523c0eb5">&#9670;&nbsp;</a></span>get_input_num_elems_processed&lt; 1 &gt;()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="namespacearm__compute_1_1detail.xhtml#a30f6368deaea5f10f9dd1bbaa28c24e6">get_input_num_elems_processed</a>&lt; 1 &gt; </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_elems_written_per_iteration</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00152">152</a> of file <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml">NEDirectConvolution3x3.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;{</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keywordflow">return</span> num_elems_written_per_iteration;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00960">get_input_num_elems_processed()</a>.</p>

</div>
</div>
<a id="adbdb2272e2409d0c249ba467eaac81ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adbdb2272e2409d0c249ba467eaac81ea">&#9670;&nbsp;</a></span>get_input_num_elems_processed&lt; 2 &gt;()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="namespacearm__compute_1_1detail.xhtml#a30f6368deaea5f10f9dd1bbaa28c24e6">get_input_num_elems_processed</a>&lt; 2 &gt; </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_elems_written_per_iteration</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00158">158</a> of file <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml">NEDirectConvolution3x3.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;{</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordflow">return</span> num_elems_written_per_iteration &lt;&lt; 1;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00960">get_input_num_elems_processed()</a>.</p>

</div>
</div>
<a id="ae2a6fee9c18f26a5fab56c2d14289705"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae2a6fee9c18f26a5fab56c2d14289705">&#9670;&nbsp;</a></span>get_input_num_elems_processed&lt; 3 &gt;()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="namespacearm__compute_1_1detail.xhtml#a30f6368deaea5f10f9dd1bbaa28c24e6">get_input_num_elems_processed</a>&lt; 3 &gt; </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_elems_written_per_iteration</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00164">164</a> of file <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml">NEDirectConvolution3x3.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;{</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keywordflow">return</span> num_elems_written_per_iteration * 3;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00960">get_input_num_elems_processed()</a>.</p>

</div>
</div>
<a id="a45d610a8bc262f7007c934293361e888"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45d610a8bc262f7007c934293361e888">&#9670;&nbsp;</a></span>have_different_dimensions()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::detail::have_different_dimensions </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>dim1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>dim2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>upper_dim</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_validate_8h_source.xhtml#l00051">51</a> of file <a class="el" href="_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = upper_dim; i &lt; arm_compute::Dimensions&lt;T&gt;::num_max_dimensions; ++i)</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    {</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keywordflow">if</span>(dim1[i] != dim2[i])</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        }</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    }</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_validate_8h_source.xhtml#l00403">arm_compute::error_on_mismatching_shapes()</a>, <a class="el" href="_validate_8h_source.xhtml#l00303">arm_compute::error_on_tensors_not_even()</a>, <a class="el" href="_validate_8h_source.xhtml#l00336">arm_compute::error_on_tensors_not_subsampled()</a>, and <a class="el" href="_validate_8h_source.xhtml#l00093">compare_dimension&lt; T &gt;::operator()()</a>.</p>

</div>
</div>
<a id="afaba543670e99c2483e0bd1996201ba3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afaba543670e99c2483e0bd1996201ba3">&#9670;&nbsp;</a></span>load_matrix_row() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x3_t arm_compute::detail::load_matrix_row </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00034">34</a> of file <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml">NEDirectConvolution3x3.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keyword">const</span> float32x4x3_t r =</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            vld1q_dup_f32(ptr),</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;            vld1q_dup_f32(1 + ptr),</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;            vld1q_dup_f32(2 + ptr)</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        }</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    };</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">return</span> r;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a5db34f1ae85326efebbe1dadb65f0301"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5db34f1ae85326efebbe1dadb65f0301">&#9670;&nbsp;</a></span>load_matrix_row() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x3_t arm_compute::detail::load_matrix_row </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>weights_offset</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Loads a 3x3 matrix as a row (float). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ptr</td><td>Pointer to a float 3x3 matrix. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">weights_offset</td><td>(Optional) Weights quantization offset.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The loaded matrix. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00044">44</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(weights_offset);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> float32x4x3_t r =</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            vld1q_dup_f32(ptr),</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            vld1q_dup_f32(1 + ptr),</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            vld1q_dup_f32(2 + ptr)</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        }</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    };</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">return</span> r;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00160">Error.h:160</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00160">ARM_COMPUTE_UNUSED</a>.</p>

</div>
</div>
<a id="a8b01a1b2b7bd61029dfaa8601b23b4fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b01a1b2b7bd61029dfaa8601b23b4fc">&#9670;&nbsp;</a></span>load_matrix_row() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int32x4x3_t arm_compute::detail::load_matrix_row </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>weights_offset</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Loads a 3x3 matrix as a row (uint8_t). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ptr</td><td>Pointer to a uint8_t 3x3 matrix. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">weights_offset</td><td>(Optional) Weights quantization offset.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The loaded matrix. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00065">65</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;{</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">const</span> int32x4_t v_weights_offset = vdupq_n_s32(weights_offset);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="comment">/* ptr is a pointer to a row in a 3x3 matrix, the function returns 3 vectors holding exactly the same value in all lanes:</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">       r.val[0] contains the first element, r.val[1] the second element and r.val[2] the third element (in all lanes) */</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    int32x4x3_t r =</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            vaddq_s32(v_weights_offset, vdupq_n_s32(*ptr)),</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            vaddq_s32(v_weights_offset, vdupq_n_s32(*(ptr + 1))),</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            vaddq_s32(v_weights_offset, vdupq_n_s32(*(ptr + 2)))</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        }</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    };</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">return</span> r;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a703f0d5487e077348c2ac6bce80d9abb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a703f0d5487e077348c2ac6bce80d9abb">&#9670;&nbsp;</a></span>single_convolve_3x3_dilation() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4_t arm_compute::detail::single_convolve_3x3_dilation </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>dilation_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Perform a 3x3 convolution for 4 consecutive elements on float32 when dilation.x() or dilation.y() is not 1. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in_top</td><td>Pointer to the first row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in_mid</td><td>Pointer to the second row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in_low</td><td>Pointer to the third row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m0</td><td>First row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m1</td><td>Second row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m2</td><td>Third row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dilation_x</td><td>Dilation, in elements across x. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_offset</td><td>(Optional) Input quantization offset. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00094">94</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;{</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(input_offset);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keyword">const</span> float32x4x3_t vtop =</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            vld1q_f32(in_top),</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            vld1q_f32(in_top + dilation_x),</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            vld1q_f32(in_top + 2 * dilation_x)</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    };</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keyword">const</span> float32x4x3_t vmid =</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            vld1q_f32(in_mid),</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            vld1q_f32(in_mid + dilation_x),</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            vld1q_f32(in_mid + 2 * dilation_x)</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    };</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keyword">const</span> float32x4x3_t vlow =</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    {</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            vld1q_f32(in_low),</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            vld1q_f32(in_low + dilation_x),</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            vld1q_f32(in_low + 2 * dilation_x)</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        }</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    };</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    float32x4_t out = vmulq_f32(vtop.val[0], m0.val[0]);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    out             = vmlaq_f32(out, vtop.val[1], m0.val[1]);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    out             = vmlaq_f32(out, vtop.val[2], m0.val[2]);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    out = vmlaq_f32(out, vmid.val[0], m1.val[0]);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    out = vmlaq_f32(out, vmid.val[1], m1.val[1]);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    out = vmlaq_f32(out, vmid.val[2], m1.val[2]);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    out = vmlaq_f32(out, vlow.val[0], m2.val[0]);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    out = vmlaq_f32(out, vlow.val[1], m2.val[1]);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    out = vmlaq_f32(out, vlow.val[2], m2.val[2]);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00160">Error.h:160</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00160">ARM_COMPUTE_UNUSED</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00157">convolve_3x3_dilation&lt; 1 &gt;()</a>.</p>

</div>
</div>
<a id="ab981d9f1da663b405c24281bfd04b896"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab981d9f1da663b405c24281bfd04b896">&#9670;&nbsp;</a></span>single_convolve_3x3_dilation() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int32x4_t arm_compute::detail::single_convolve_3x3_dilation </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dilation_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Perform a 3x3 convolution for 4 consecutive elements on uint8_t when dilation.x() or dilation.y() is not 1. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in_top</td><td>Pointer to the first row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in_mid</td><td>Pointer to the second row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in_low</td><td>Pointer to the third row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m0</td><td>First row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m1</td><td>Second row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m2</td><td>Third row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dilation_x</td><td>Dilation, in elements across x. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_offset</td><td>Input quantization offset. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00337">337</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;{</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keyword">const</span> int32x4_t v_input_offset = vdupq_n_s32(input_offset);</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="keyword">const</span> uint8x8x3_t vtop =</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    {</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        {</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            vld1_u8(in_top),</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            vld1_u8(in_top + dilation_x),</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;            vld1_u8(in_top + 2 * dilation_x)</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        }</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    };</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <span class="keyword">const</span> uint8x8x3_t vmid =</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    {</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        {</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            vld1_u8(in_mid),</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            vld1_u8(in_mid + dilation_x),</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;            vld1_u8(in_mid + 2 * dilation_x)</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        }</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    };</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="keyword">const</span> uint8x8x3_t vlow =</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    {</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        {</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;            vld1_u8(in_low),</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;            vld1_u8(in_low + dilation_x),</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            vld1_u8(in_low + 2 * dilation_x)</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        }</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    };</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <span class="keyword">const</span> int32x4x3_t vtop_s32 =</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    {</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        {</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;            vaddw_s16(v_input_offset, vreinterpret_s16_u16(vget_low_u16(vmovl_u8(vtop.val[0])))), <span class="comment">//convert from uint8x8 to uint16x8, to uint16x4(lower or bottom half) to int16x4 to int32x4</span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;            vaddw_s16(v_input_offset, vreinterpret_s16_u16(vget_low_u16(vmovl_u8(vtop.val[1])))),</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;            vaddw_s16(v_input_offset, vreinterpret_s16_u16(vget_low_u16(vmovl_u8(vtop.val[2])))),</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        }</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    };</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keyword">const</span> int32x4x3_t vmid_s32 =</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    {</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        {</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;            vaddw_s16(v_input_offset, vreinterpret_s16_u16(vget_low_u16(vmovl_u8(vmid.val[0])))),</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            vaddw_s16(v_input_offset, vreinterpret_s16_u16(vget_low_u16(vmovl_u8(vmid.val[1])))),</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;            vaddw_s16(v_input_offset, vreinterpret_s16_u16(vget_low_u16(vmovl_u8(vmid.val[2])))),</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        }</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    };</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="keyword">const</span> int32x4x3_t vlow_s32 =</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    {</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        {</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            vaddw_s16(v_input_offset, vreinterpret_s16_u16(vget_low_u16(vmovl_u8(vlow.val[0])))),</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;            vaddw_s16(v_input_offset, vreinterpret_s16_u16(vget_low_u16(vmovl_u8(vlow.val[1])))),</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;            vaddw_s16(v_input_offset, vreinterpret_s16_u16(vget_low_u16(vmovl_u8(vlow.val[2])))),</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        }</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    };</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    int32x4_t out = vmulq_s32(vtop_s32.val[0], m0.val[0]);</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    out           = vmlaq_s32(out, vtop_s32.val[1], m0.val[1]);</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    out           = vmlaq_s32(out, vtop_s32.val[2], m0.val[2]);</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    out = vmlaq_s32(out, vmid_s32.val[0], m1.val[0]);</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    out = vmlaq_s32(out, vmid_s32.val[1], m1.val[1]);</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    out = vmlaq_s32(out, vmid_s32.val[2], m1.val[2]);</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    out = vmlaq_s32(out, vlow_s32.val[0], m2.val[0]);</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    out = vmlaq_s32(out, vlow_s32.val[1], m2.val[1]);</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    out = vmlaq_s32(out, vlow_s32.val[2], m2.val[2]);</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a1ac67082e6f68cb7ed1939240fb6bdb5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1ac67082e6f68cb7ed1939240fb6bdb5">&#9670;&nbsp;</a></span>store_results() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void store_results </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x2_t &amp;&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Stores a float32x4x2_t array into a memory location. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">buffer</td><td>Pointer to the memory location where the values will be stored. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>Values that will be stored. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aa9f26cd83047a111336033fb7466faf1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9f26cd83047a111336033fb7466faf1">&#9670;&nbsp;</a></span>store_results() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::detail::store_results </td>
          <td>(</td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x2_t &amp;&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Stores a uint32_t array into a memory location. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">buffer</td><td>Pointer to the memory location where the values will be stored. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>Values that will be stored. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ad61a01ef06cc3c41e4bb5006d9307687"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad61a01ef06cc3c41e4bb5006d9307687">&#9670;&nbsp;</a></span>store_results&lt; 1 &gt;() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>&lt; 1 &gt; </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x2_t &amp;&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00130">130</a> of file <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml">NEDirectConvolution3x3.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;{</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    vst1q_f32(buffer, values.val[0]);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    vst1q_f32(buffer + 4, values.val[1]);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a143f43b1fb56a8d806145e95d4c3995e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a143f43b1fb56a8d806145e95d4c3995e">&#9670;&nbsp;</a></span>store_results&lt; 1 &gt;() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">arm_compute::detail::store_results</a>&lt; 1 &gt; </td>
          <td>(</td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x2_t &amp;&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00628">628</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;{</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    vst1q_s32(buffer, values.val[0]);</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    vst1q_s32(buffer + 4, values.val[1]);</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="abaf3037739c190361ad3f827d73440a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abaf3037739c190361ad3f827d73440a1">&#9670;&nbsp;</a></span>store_results&lt; 2 &gt;() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>&lt; 2 &gt; </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x2_t &amp;&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00137">137</a> of file <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml">NEDirectConvolution3x3.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;{</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    vst1q_f32(buffer, values.val[0]);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af63e34203346681c35b68fcca2026a06"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af63e34203346681c35b68fcca2026a06">&#9670;&nbsp;</a></span>store_results&lt; 2 &gt;() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">arm_compute::detail::store_results</a>&lt; 2 &gt; </td>
          <td>(</td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x2_t &amp;&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00635">635</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;{</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    vst1q_s32(buffer, values.val[0]);</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a208468ac4ffbfe19d7fb03402ca927f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a208468ac4ffbfe19d7fb03402ca927f6">&#9670;&nbsp;</a></span>store_results&lt; 3 &gt;() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>&lt; 3 &gt; </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x2_t &amp;&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00143">143</a> of file <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml">NEDirectConvolution3x3.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;{</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    vst1_f32(buffer, vget_low_f32(values.val[0]));</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a991bde46f2841422fb98258127305050"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a991bde46f2841422fb98258127305050">&#9670;&nbsp;</a></span>store_results&lt; 3 &gt;() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">arm_compute::detail::store_results</a>&lt; 3 &gt; </td>
          <td>(</td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x2_t &amp;&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00641">641</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;{</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    vst1_s32(buffer, vget_low_s32(values.val[0]));</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1detail.xhtml">detail</a></li>
    <li class="footer">Generated on Mon Sep 2 2019 11:47:39 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
