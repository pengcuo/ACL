<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute::test Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">19.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('namespacearm__compute_1_1test.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute::test Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearm__compute_1_1test_1_1benchmark"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1benchmark.xhtml">benchmark</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1test_1_1colorconvert__helper"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1colorconvert__helper.xhtml">colorconvert_helper</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1test_1_1convolution__3d"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1convolution__3d.xhtml">convolution_3d</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1test_1_1detail"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1detail.xhtml">detail</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1test_1_1framework"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml">framework</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1test_1_1traits"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1traits.xhtml">traits</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1test_1_1validation"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml">validation</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_accessor.xhtml">Accessor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1test_1_1_accessor.xhtml" title="Accessor implementation for Tensor objects.">Accessor</a> implementation for <a class="el" href="classarm__compute_1_1_tensor.xhtml">Tensor</a> objects.  <a href="classarm__compute_1_1test_1_1_accessor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_array_accessor.xhtml">ArrayAccessor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1test_1_1_array_accessor.xhtml" title="ArrayAccessor implementation for Array objects.">ArrayAccessor</a> implementation for <a class="el" href="classarm__compute_1_1_array.xhtml">Array</a> objects.  <a href="classarm__compute_1_1test_1_1_array_accessor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_assets_library.xhtml">AssetsLibrary</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Factory class to create and fill tensors.  <a href="classarm__compute_1_1test_1_1_assets_library.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_c_l_accessor.xhtml">CLAccessor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1test_1_1_accessor.xhtml" title="Accessor implementation for Tensor objects.">Accessor</a> implementation for <a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> objects.  <a href="classarm__compute_1_1test_1_1_c_l_accessor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_c_l_array_accessor.xhtml">CLArrayAccessor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1test_1_1_accessor.xhtml" title="Accessor implementation for Tensor objects.">Accessor</a> implementation for <a class="el" href="classarm__compute_1_1_c_l_array.xhtml">CLArray</a> objects.  <a href="classarm__compute_1_1test_1_1_c_l_array_accessor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_c_l_h_o_g_accessor.xhtml">CLHOGAccessor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1test_1_1_accessor.xhtml" title="Accessor implementation for Tensor objects.">Accessor</a> implementation for <a class="el" href="classarm__compute_1_1_c_l_h_o_g.xhtml">CLHOG</a> objects.  <a href="classarm__compute_1_1test_1_1_c_l_h_o_g_accessor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_c_l_lut_accessor.xhtml">CLLutAccessor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1test_1_1_accessor.xhtml" title="Accessor implementation for Tensor objects.">Accessor</a> implementation for <a class="el" href="classarm__compute_1_1_c_l_lut.xhtml">CLLut</a> objects.  <a href="classarm__compute_1_1test_1_1_c_l_lut_accessor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_c_l_synthetize_function.xhtml">CLSynthetizeFunction</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This template synthetizes an <a class="el" href="classarm__compute_1_1_i_c_l_simple_function.xhtml" title="Basic interface for functions which have a single OpenCL kernel.">ICLSimpleFunction</a> which runs the given kernel K.  <a href="classarm__compute_1_1test_1_1_c_l_synthetize_function.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_c_l_synthetize_function_init_output_with_zero_and_with_zero_constant_border.xhtml">CLSynthetizeFunctionInitOutputWithZeroAndWithZeroConstantBorder</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">As above but this also initializes to zero the input tensor.  <a href="classarm__compute_1_1test_1_1_c_l_synthetize_function_init_output_with_zero_and_with_zero_constant_border.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_c_l_synthetize_function_with_zero_constant_border.xhtml">CLSynthetizeFunctionWithZeroConstantBorder</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">As above but this also setups a Zero border on the input tensor of the specified bordersize.  <a href="classarm__compute_1_1test_1_1_c_l_synthetize_function_with_zero_constant_border.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml">common_promoted_signed_type</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find the signed promoted common type.  <a href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1common__promoted__unsigned__type.xhtml">common_promoted_unsigned_type</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find the unsigned promoted common type.  <a href="structarm__compute_1_1test_1_1common__promoted__unsigned__type.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_g_c_accessor.xhtml">GCAccessor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1test_1_1_accessor.xhtml" title="Accessor implementation for Tensor objects.">Accessor</a> implementation for <a class="el" href="classarm__compute_1_1_g_c_tensor.xhtml">GCTensor</a> objects.  <a href="classarm__compute_1_1test_1_1_g_c_accessor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_h_o_g_accessor.xhtml">HOGAccessor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1test_1_1_accessor.xhtml" title="Accessor implementation for Tensor objects.">Accessor</a> implementation for <a class="el" href="classarm__compute_1_1_h_o_g.xhtml">HOG</a> objects.  <a href="classarm__compute_1_1test_1_1_h_o_g_accessor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml">IAccessor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Common interface to provide information and access to tensor like structures.  <a href="classarm__compute_1_1test_1_1_i_accessor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_i_array_accessor.xhtml">IArrayAccessor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Common interface to provide information and access to array like structures.  <a href="classarm__compute_1_1test_1_1_i_array_accessor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_i_h_o_g_accessor.xhtml">IHOGAccessor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Common interface to access <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object.">HOG</a> structure.  <a href="classarm__compute_1_1test_1_1_i_h_o_g_accessor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_i_lut_accessor.xhtml">ILutAccessor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Common interface to provide information and access to <a class="el" href="classarm__compute_1_1_lut.xhtml" title="Basic implementation of the LUT interface.">Lut</a> like structures.  <a href="classarm__compute_1_1test_1_1_i_lut_accessor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_lut_accessor.xhtml">LutAccessor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1test_1_1_accessor.xhtml" title="Accessor implementation for Tensor objects.">Accessor</a> implementation for <a class="el" href="classarm__compute_1_1_lut.xhtml">Lut</a> objects.  <a href="classarm__compute_1_1test_1_1_lut_accessor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_n_e_synthetize_function.xhtml">NESynthetizeFunction</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This template synthetizes an <a class="el" href="classarm__compute_1_1_i_n_e_simple_function.xhtml" title="Basic interface for functions which have a single NEON kernel.">INESimpleFunction</a> which runs the given kernel K.  <a href="classarm__compute_1_1test_1_1_n_e_synthetize_function.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_n_e_synthetize_function_with_zero_constant_border.xhtml">NESynthetizeFunctionWithZeroConstantBorder</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">As above but this also setups a Zero border on the input tensor of the specified bordersize.  <a href="classarm__compute_1_1test_1_1_n_e_synthetize_function_with_zero_constant_border.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_n_e_synthetize_function_with_zero_constant_kernel_border.xhtml">NESynthetizeFunctionWithZeroConstantKernelBorder</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">As above but this also setups a Zero border on the input tensor of the kernel's bordersize.  <a href="classarm__compute_1_1test_1_1_n_e_synthetize_function_with_zero_constant_kernel_border.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_padding_calculator.xhtml">PaddingCalculator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate required padding.  <a href="classarm__compute_1_1test_1_1_padding_calculator.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_lut_accessor.xhtml">RawLutAccessor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1test_1_1_accessor.xhtml" title="Accessor implementation for Tensor objects.">Accessor</a> implementation for std::map-lut objects.  <a href="classarm__compute_1_1test_1_1_raw_lut_accessor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subclass of <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml" title="Simple tensor object that stores elements in a consecutive chunk of memory.">SimpleTensor</a> using uint8_t as value type.  <a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simple tensor object that stores elements in a consecutive chunk of memory.  <a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor_accessor.xhtml">SimpleTensorAccessor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1test_1_1_accessor.xhtml" title="Accessor implementation for Tensor objects.">Accessor</a> implementation for <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a> objects.  <a href="classarm__compute_1_1test_1_1_simple_tensor_accessor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_tensor_cache.xhtml">TensorCache</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> categorised by the image they are created from including name, format and channel.  <a href="classarm__compute_1_1test_1_1_tensor_cache.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ab3a61953b0f41e932f8a2ce8918e7aec"><td class="memTemplParams" colspan="2">template&lt;typename O , typename F , typename... As&gt; </td></tr>
<tr class="memitem:ab3a61953b0f41e932f8a2ce8918e7aec"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ab3a61953b0f41e932f8a2ce8918e7aec">apply</a> (O *obj, F &amp;&amp;func, const std::tuple&lt; As... &gt; &amp;args)</td></tr>
<tr class="separator:ab3a61953b0f41e932f8a2ce8918e7aec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa18932675cbb5eb9c9dbf8ff4d7106c7"><td class="memTemplParams" colspan="2">template&lt;typename T , typename std::enable_if&lt; std::is_same&lt; typename T::value_type, std::string &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:aa18932675cbb5eb9c9dbf8ff4d7106c7"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#aa18932675cbb5eb9c9dbf8ff4d7106c7">join</a> (T first, T last, const std::string &amp;separator)</td></tr>
<tr class="memdesc:aa18932675cbb5eb9c9dbf8ff4d7106c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to concatenate multiple strings.  <a href="#aa18932675cbb5eb9c9dbf8ff4d7106c7">More...</a><br /></td></tr>
<tr class="separator:aa18932675cbb5eb9c9dbf8ff4d7106c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a898a0423aace06af0f3a18a26a972a1a"><td class="memTemplParams" colspan="2">template&lt;typename T , typename UnaryOp &gt; </td></tr>
<tr class="memitem:a898a0423aace06af0f3a18a26a972a1a"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a898a0423aace06af0f3a18a26a972a1a">join</a> (T &amp;&amp;first, T &amp;&amp;last, const std::string &amp;separator, UnaryOp &amp;&amp;op)</td></tr>
<tr class="memdesc:a898a0423aace06af0f3a18a26a972a1a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to concatenate multiple values.  <a href="#a898a0423aace06af0f3a18a26a972a1a">More...</a><br /></td></tr>
<tr class="separator:a898a0423aace06af0f3a18a26a972a1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69835710fc772315f4e65ce156034530"><td class="memTemplParams" colspan="2">template&lt;typename T , typename std::enable_if&lt; std::is_arithmetic&lt; typename T::value_type &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:a69835710fc772315f4e65ce156034530"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a69835710fc772315f4e65ce156034530">join</a> (T &amp;&amp;first, T &amp;&amp;last, const std::string &amp;separator)</td></tr>
<tr class="memdesc:a69835710fc772315f4e65ce156034530"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to concatenate multiple values.  <a href="#a69835710fc772315f4e65ce156034530">More...</a><br /></td></tr>
<tr class="separator:a69835710fc772315f4e65ce156034530"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b67cbf475b1e1d3bec9b0b937fdafac"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a5b67cbf475b1e1d3bec9b0b937fdafac">tolower</a> (std::string string)</td></tr>
<tr class="memdesc:a5b67cbf475b1e1d3bec9b0b937fdafac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert string to lower case.  <a href="#a5b67cbf475b1e1d3bec9b0b937fdafac">More...</a><br /></td></tr>
<tr class="separator:a5b67cbf475b1e1d3bec9b0b937fdafac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93690f80f7fb88ea733fdc6f9f3b3ada"><td class="memTemplParams" colspan="2">template&lt;typename T , typename std::enable_if&lt; std::is_arithmetic&lt; T &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:a93690f80f7fb88ea733fdc6f9f3b3ada"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a93690f80f7fb88ea733fdc6f9f3b3ada">arithmetic_to_string</a> (T val, int decimal_places=0)</td></tr>
<tr class="memdesc:a93690f80f7fb88ea733fdc6f9f3b3ada"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a string with the arithmetic value in full precision.  <a href="#a93690f80f7fb88ea733fdc6f9f3b3ada">More...</a><br /></td></tr>
<tr class="separator:a93690f80f7fb88ea733fdc6f9f3b3ada"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e54837110cf77f30169334e9f4affd4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_g_c_tensor.xhtml">GCTensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a7e54837110cf77f30169334e9f4affd4">create_tensor</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type, int num_channels=1)</td></tr>
<tr class="memdesc:a7e54837110cf77f30169334e9f4affd4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper to create an empty tensor.  <a href="#a7e54837110cf77f30169334e9f4affd4">More...</a><br /></td></tr>
<tr class="separator:a7e54837110cf77f30169334e9f4affd4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a927fb5d3770b704997bee8c1070cdba8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_g_c_tensor.xhtml">GCTensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a927fb5d3770b704997bee8c1070cdba8">create_tensor</a> (const std::string &amp;name, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type)</td></tr>
<tr class="memdesc:a927fb5d3770b704997bee8c1070cdba8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper to create an empty tensor.  <a href="#a927fb5d3770b704997bee8c1070cdba8">More...</a><br /></td></tr>
<tr class="separator:a927fb5d3770b704997bee8c1070cdba8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7a4db66b02e6e176def3cab5ace07d9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ab7a4db66b02e6e176def3cab5ace07d9">print_tensor</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;tensor, const std::string &amp;name, <a class="el" href="structarm__compute_1_1_i_o_format_info.xhtml">IOFormatInfo</a> info=<a class="el" href="structarm__compute_1_1_i_o_format_info.xhtml">IOFormatInfo</a>(<a class="el" href="structarm__compute_1_1_i_o_format_info.xhtml#ae283722f31a4c59039f9abd44f10dbd0abbd47109890259c0127154db1af26c75">IOFormatInfo::PrintRegion::Full</a>))</td></tr>
<tr class="memdesc:ab7a4db66b02e6e176def3cab5ace07d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper to print tensor.  <a href="#ab7a4db66b02e6e176def3cab5ace07d9">More...</a><br /></td></tr>
<tr class="separator:ab7a4db66b02e6e176def3cab5ace07d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3594bac8da97eb819a7bf7e02d642ace"><td class="memTemplParams" colspan="2">template&lt;typename D , typename T , typename... Ts&gt; </td></tr>
<tr class="memitem:a3594bac8da97eb819a7bf7e02d642ace"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a3594bac8da97eb819a7bf7e02d642ace">fill_tensors</a> (D &amp;&amp;dist, std::initializer_list&lt; int &gt; seeds, T &amp;&amp;tensor, Ts &amp;&amp;... other_tensors)</td></tr>
<tr class="separator:a3594bac8da97eb819a7bf7e02d642ace"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30aaea1825f3464f073e1d1bce82e420"><td class="memTemplParams" colspan="2">template&lt;typename T1 , typename T2 &gt; </td></tr>
<tr class="memitem:a30aaea1825f3464f073e1d1bce82e420"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; T1 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a30aaea1825f3464f073e1d1bce82e420">copy_tensor</a> (const <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; T2 &gt; &amp;tensor)</td></tr>
<tr class="separator:a30aaea1825f3464f073e1d1bce82e420"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aafd2a1bcbb2f4dd73e6f6f322e9014c7"><td class="memTemplParams" colspan="2">template&lt;typename T1 , typename T2 , typename std::enable_if&lt; std::is_same&lt; T1, T2 &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:aafd2a1bcbb2f4dd73e6f6f322e9014c7"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; T1 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#aafd2a1bcbb2f4dd73e6f6f322e9014c7">copy_tensor</a> (const <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> &gt; &amp;tensor)</td></tr>
<tr class="separator:aafd2a1bcbb2f4dd73e6f6f322e9014c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28edc8880596d14c099f3c2509efc8b3"><td class="memTemplParams" colspan="2">template&lt;typename U &gt; </td></tr>
<tr class="memitem:a28edc8880596d14c099f3c2509efc8b3"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a28edc8880596d14c099f3c2509efc8b3">swap</a> (<a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; U &gt; &amp;tensor1, <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; U &gt; &amp;tensor2)</td></tr>
<tr class="separator:a28edc8880596d14c099f3c2509efc8b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4bcf30f8c56f547f66d61c7c5ae01db"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:af4bcf30f8c56f547f66d61c7c5ae01db"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#af4bcf30f8c56f547f66d61c7c5ae01db">round_half_up</a> (T value)</td></tr>
<tr class="memdesc:af4bcf30f8c56f547f66d61c7c5ae01db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Round floating-point value with half value rounding to positive infinity.  <a href="#af4bcf30f8c56f547f66d61c7c5ae01db">More...</a><br /></td></tr>
<tr class="separator:af4bcf30f8c56f547f66d61c7c5ae01db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad93bb148a873f19ad7692756e59617f4"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:ad93bb148a873f19ad7692756e59617f4"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ad93bb148a873f19ad7692756e59617f4">round_half_even</a> (T value, T <a class="el" href="_asymm_helpers_8cpp.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>=std::numeric_limits&lt; T &gt;::<a class="el" href="_asymm_helpers_8cpp.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>())</td></tr>
<tr class="memdesc:ad93bb148a873f19ad7692756e59617f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Round floating-point value with half value rounding to nearest even.  <a href="#ad93bb148a873f19ad7692756e59617f4">More...</a><br /></td></tr>
<tr class="separator:ad93bb148a873f19ad7692756e59617f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa337ab76176f3c4193642ac6de3a61cf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#aa337ab76176f3c4193642ac6de3a61cf">get_format_for_channel</a> (<a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel)</td></tr>
<tr class="memdesc:aa337ab76176f3c4193642ac6de3a61cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Look up the format corresponding to a channel.  <a href="#aa337ab76176f3c4193642ac6de3a61cf">More...</a><br /></td></tr>
<tr class="separator:aa337ab76176f3c4193642ac6de3a61cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7dbe33793790fc37a5eda11ed6b0273"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ac7dbe33793790fc37a5eda11ed6b0273">get_channel_format</a> (<a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel)</td></tr>
<tr class="memdesc:ac7dbe33793790fc37a5eda11ed6b0273"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the format of a channel.  <a href="#ac7dbe33793790fc37a5eda11ed6b0273">More...</a><br /></td></tr>
<tr class="separator:ac7dbe33793790fc37a5eda11ed6b0273"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ebbb23b0094d47c51226d58e17e6447"><td class="memTemplParams" colspan="2">template&lt;typename F , typename T &gt; </td></tr>
<tr class="memitem:a1ebbb23b0094d47c51226d58e17e6447"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a1ebbb23b0094d47c51226d58e17e6447">foldl</a> (F &amp;&amp;, const T &amp;value)</td></tr>
<tr class="memdesc:a1ebbb23b0094d47c51226d58e17e6447"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base case of foldl.  <a href="#a1ebbb23b0094d47c51226d58e17e6447">More...</a><br /></td></tr>
<tr class="separator:a1ebbb23b0094d47c51226d58e17e6447"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad933f996ccb22854ae56dd86de8cbbfe"><td class="memTemplParams" colspan="2">template&lt;typename F , typename T , typename U &gt; </td></tr>
<tr class="memitem:ad933f996ccb22854ae56dd86de8cbbfe"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ad933f996ccb22854ae56dd86de8cbbfe">foldl</a> (F &amp;&amp;func, T &amp;&amp;value1, U &amp;&amp;value2) -&gt; decltype(func(value1, value2))</td></tr>
<tr class="memdesc:ad933f996ccb22854ae56dd86de8cbbfe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base case of foldl.  <a href="#ad933f996ccb22854ae56dd86de8cbbfe">More...</a><br /></td></tr>
<tr class="separator:ad933f996ccb22854ae56dd86de8cbbfe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92a5aaf033153828aef41d3354c204d9"><td class="memTemplParams" colspan="2">template&lt;typename F , typename I , typename T , typename... Vs&gt; </td></tr>
<tr class="memitem:a92a5aaf033153828aef41d3354c204d9"><td class="memTemplItemLeft" align="right" valign="top">I&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a92a5aaf033153828aef41d3354c204d9">foldl</a> (F &amp;&amp;func, I &amp;&amp;initial, T &amp;&amp;value, Vs &amp;&amp;... values)</td></tr>
<tr class="memdesc:a92a5aaf033153828aef41d3354c204d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fold left.  <a href="#a92a5aaf033153828aef41d3354c204d9">More...</a><br /></td></tr>
<tr class="separator:a92a5aaf033153828aef41d3354c204d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8103df0e6c416f55f40106aa49072b42"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a8103df0e6c416f55f40106aa49072b42">shape_to_valid_region</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;a_shape, bool border_undefined=false, <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> border_size=<a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>(0))</td></tr>
<tr class="memdesc:a8103df0e6c416f55f40106aa49072b42"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a valid region based on tensor shape, border mode and border size.  <a href="#a8103df0e6c416f55f40106aa49072b42">More...</a><br /></td></tr>
<tr class="separator:a8103df0e6c416f55f40106aa49072b42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1177ef8061a8b46b5d79c1af93c12de1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a1177ef8061a8b46b5d79c1af93c12de1">shape_to_valid_region_gaussian_pyramid_half</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;a_shape, const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;a_valid_region, bool border_undefined=false)</td></tr>
<tr class="memdesc:a1177ef8061a8b46b5d79c1af93c12de1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a valid region for Gaussian <a class="el" href="classarm__compute_1_1_pyramid.xhtml" title="Basic implementation of the pyramid interface.">Pyramid</a> Half based on tensor shape and valid region at level "i - 1" and border mode.  <a href="#a1177ef8061a8b46b5d79c1af93c12de1">More...</a><br /></td></tr>
<tr class="separator:a1177ef8061a8b46b5d79c1af93c12de1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6dc99a4de397ceab182b6fd46fa55f47"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a6dc99a4de397ceab182b6fd46fa55f47">shape_to_valid_region_laplacian_pyramid</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;a_shape, const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;a_valid_region, bool border_undefined=false)</td></tr>
<tr class="memdesc:a6dc99a4de397ceab182b6fd46fa55f47"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a valid region for Laplacian <a class="el" href="classarm__compute_1_1_pyramid.xhtml" title="Basic implementation of the pyramid interface.">Pyramid</a> based on tensor shape and valid region at level "i - 1" and border mode.  <a href="#a6dc99a4de397ceab182b6fd46fa55f47">More...</a><br /></td></tr>
<tr class="separator:a6dc99a4de397ceab182b6fd46fa55f47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e6934e95738573214c2ce1d6648d116"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a1e6934e95738573214c2ce1d6648d116"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a1e6934e95738573214c2ce1d6648d116">store_value_with_data_type</a> (void *ptr, T value, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type)</td></tr>
<tr class="memdesc:a1e6934e95738573214c2ce1d6648d116"><td class="mdescLeft">&#160;</td><td class="mdescRight">Write the value after casting the pointer according to <code>data_type</code>.  <a href="#a1e6934e95738573214c2ce1d6648d116">More...</a><br /></td></tr>
<tr class="separator:a1e6934e95738573214c2ce1d6648d116"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4965b2f6821e0cf0afee738158bd8377"><td class="memTemplParams" colspan="2">template&lt;typename U , typename T &gt; </td></tr>
<tr class="memitem:a4965b2f6821e0cf0afee738158bd8377"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a4965b2f6821e0cf0afee738158bd8377">saturate_cast</a> (T val)</td></tr>
<tr class="memdesc:a4965b2f6821e0cf0afee738158bd8377"><td class="mdescLeft">&#160;</td><td class="mdescRight">Saturate a value of type T against the numeric limits of type U.  <a href="#a4965b2f6821e0cf0afee738158bd8377">More...</a><br /></td></tr>
<tr class="separator:a4965b2f6821e0cf0afee738158bd8377"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24d8c0391cfa38e78969b6ad97c0ff09"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">index2coord</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, int index)</td></tr>
<tr class="memdesc:a24d8c0391cfa38e78969b6ad97c0ff09"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a linear index into n-dimensional coordinates.  <a href="#a24d8c0391cfa38e78969b6ad97c0ff09">More...</a><br /></td></tr>
<tr class="separator:a24d8c0391cfa38e78969b6ad97c0ff09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9be4cb7e6ee20063a4a10bc3abb750b9"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">coord2index</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;coord)</td></tr>
<tr class="memdesc:a9be4cb7e6ee20063a4a10bc3abb750b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Linearise the given coordinate.  <a href="#a9be4cb7e6ee20063a4a10bc3abb750b9">More...</a><br /></td></tr>
<tr class="separator:a9be4cb7e6ee20063a4a10bc3abb750b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a856b55fc20ddcbdbeb84c35ae27bedac"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a856b55fc20ddcbdbeb84c35ae27bedac">is_in_valid_region</a> (const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;valid_region, <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> coord)</td></tr>
<tr class="memdesc:a856b55fc20ddcbdbeb84c35ae27bedac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if a coordinate is within a valid region.  <a href="#a856b55fc20ddcbdbeb84c35ae27bedac">More...</a><br /></td></tr>
<tr class="separator:a856b55fc20ddcbdbeb84c35ae27bedac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade9b3889d957ceeca403e2ab66deb672"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ade9b3889d957ceeca403e2ab66deb672"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ade9b3889d957ceeca403e2ab66deb672">create_tensor</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type, int num_channels=1, <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> quantization_info=<a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>(), <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> data_layout=<a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>)</td></tr>
<tr class="memdesc:ade9b3889d957ceeca403e2ab66deb672"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create and initialize a tensor of the given type.  <a href="#ade9b3889d957ceeca403e2ab66deb672">More...</a><br /></td></tr>
<tr class="separator:ade9b3889d957ceeca403e2ab66deb672"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a1319867418814820134ec77cf09eed"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a1a1319867418814820134ec77cf09eed"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a1a1319867418814820134ec77cf09eed">create_tensor</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format)</td></tr>
<tr class="memdesc:a1a1319867418814820134ec77cf09eed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create and initialize a tensor of the given type.  <a href="#a1a1319867418814820134ec77cf09eed">More...</a><br /></td></tr>
<tr class="separator:a1a1319867418814820134ec77cf09eed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a764bac61748afaf8fd0468b2a4cb09be"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a764bac61748afaf8fd0468b2a4cb09be"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a764bac61748afaf8fd0468b2a4cb09be">create_multi_image</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format)</td></tr>
<tr class="memdesc:a764bac61748afaf8fd0468b2a4cb09be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create and initialize a multi-image of the given type.  <a href="#a764bac61748afaf8fd0468b2a4cb09be">More...</a><br /></td></tr>
<tr class="separator:a764bac61748afaf8fd0468b2a4cb09be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e6c79aeedb1c5c9482568562e310fba"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a2e6c79aeedb1c5c9482568562e310fba"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a2e6c79aeedb1c5c9482568562e310fba">create_HOG</a> (const <a class="el" href="classarm__compute_1_1_h_o_g_info.xhtml">HOGInfo</a> &amp;hog_info)</td></tr>
<tr class="memdesc:a2e6c79aeedb1c5c9482568562e310fba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create and initialize a <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object.">HOG</a> (Histogram of Oriented Gradients) of the given type.  <a href="#a2e6c79aeedb1c5c9482568562e310fba">More...</a><br /></td></tr>
<tr class="separator:a2e6c79aeedb1c5c9482568562e310fba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c2176d85e729a5a5361181fd8119320"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a0c2176d85e729a5a5361181fd8119320"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a0c2176d85e729a5a5361181fd8119320">create_pyramid</a> (const <a class="el" href="classarm__compute_1_1_pyramid_info.xhtml">PyramidInfo</a> &amp;pyramid_info)</td></tr>
<tr class="memdesc:a0c2176d85e729a5a5361181fd8119320"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create and initialize a <a class="el" href="classarm__compute_1_1_pyramid.xhtml" title="Basic implementation of the pyramid interface.">Pyramid</a> of the given type.  <a href="#a0c2176d85e729a5a5361181fd8119320">More...</a><br /></td></tr>
<tr class="separator:a0c2176d85e729a5a5361181fd8119320"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a5cc10c5cfc190c61b60d393c8ab566"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a9a5cc10c5cfc190c61b60d393c8ab566">init_conv</a> (int16_t *conv, unsigned int width, unsigned int height, std::random_device::result_type seed)</td></tr>
<tr class="memdesc:a9a5cc10c5cfc190c61b60d393c8ab566"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize a convolution matrix.  <a href="#a9a5cc10c5cfc190c61b60d393c8ab566">More...</a><br /></td></tr>
<tr class="separator:a9a5cc10c5cfc190c61b60d393c8ab566"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6e554d44ff4ae133f1a1433d8489e0c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ae6e554d44ff4ae133f1a1433d8489e0c">init_separable_conv</a> (int16_t *conv, unsigned int width, unsigned int height, std::random_device::result_type seed)</td></tr>
<tr class="memdesc:ae6e554d44ff4ae133f1a1433d8489e0c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize a separable convolution matrix.  <a href="#ae6e554d44ff4ae133f1a1433d8489e0c">More...</a><br /></td></tr>
<tr class="separator:ae6e554d44ff4ae133f1a1433d8489e0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a000a9b9acb976222ee72275cf8852a3f"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:a000a9b9acb976222ee72275cf8852a3f"><td class="memTemplItemLeft" align="right" valign="top">std::vector&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a000a9b9acb976222ee72275cf8852a3f">generate_random_real</a> (unsigned int num_values, T min, T max, std::random_device::result_type seed)</td></tr>
<tr class="memdesc:a000a9b9acb976222ee72275cf8852a3f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a vector with a uniform distribution of floating point values across the specified range.  <a href="#a000a9b9acb976222ee72275cf8852a3f">More...</a><br /></td></tr>
<tr class="separator:a000a9b9acb976222ee72275cf8852a3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6fca44ec6b8d63994a8b16012a73f666"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="structarm__compute_1_1_key_point.xhtml">KeyPoint</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a6fca44ec6b8d63994a8b16012a73f666">generate_random_keypoints</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, size_t num_keypoints, std::random_device::result_type seed, size_t num_levels=1)</td></tr>
<tr class="memdesc:a6fca44ec6b8d63994a8b16012a73f666"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a vector of random keypoints for pyramid representation.  <a href="#a6fca44ec6b8d63994a8b16012a73f666">More...</a><br /></td></tr>
<tr class="separator:a6fca44ec6b8d63994a8b16012a73f666"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac35e7a1ad467f5fe8620cbbc5793d53b"><td class="memTemplParams" colspan="2">template&lt;typename T , typename ArrayAccessor_T &gt; </td></tr>
<tr class="memitem:ac35e7a1ad467f5fe8620cbbc5793d53b"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ac35e7a1ad467f5fe8620cbbc5793d53b">fill_array</a> (ArrayAccessor_T &amp;&amp;array, const std::vector&lt; T &gt; &amp;v)</td></tr>
<tr class="separator:ac35e7a1ad467f5fe8620cbbc5793d53b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae47155d6186155ec4da9295764b3c05a"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ae47155d6186155ec4da9295764b3c05a">get_typestring</a> (<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type)</td></tr>
<tr class="memdesc:ae47155d6186155ec4da9295764b3c05a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Obtain numpy type string from DataType.  <a href="#ae47155d6186155ec4da9295764b3c05a">More...</a><br /></td></tr>
<tr class="separator:ae47155d6186155ec4da9295764b3c05a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5967bb62a612be6b300aa96049a2166a"><td class="memTemplParams" colspan="2">template&lt;typename TensorType &gt; </td></tr>
<tr class="memitem:a5967bb62a612be6b300aa96049a2166a"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a5967bb62a612be6b300aa96049a2166a">sync_if_necessary</a> ()</td></tr>
<tr class="memdesc:a5967bb62a612be6b300aa96049a2166a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sync if necessary.  <a href="#a5967bb62a612be6b300aa96049a2166a">More...</a><br /></td></tr>
<tr class="separator:a5967bb62a612be6b300aa96049a2166a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a619736e19838c20cac8f668ab13aae37"><td class="memTemplParams" colspan="2">template&lt;typename TensorType &gt; </td></tr>
<tr class="memitem:a619736e19838c20cac8f668ab13aae37"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a619736e19838c20cac8f668ab13aae37">sync_tensor_if_necessary</a> (TensorType &amp;tensor)</td></tr>
<tr class="memdesc:a619736e19838c20cac8f668ab13aae37"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sync tensor if necessary.  <a href="#a619736e19838c20cac8f668ab13aae37">More...</a><br /></td></tr>
<tr class="separator:a619736e19838c20cac8f668ab13aae37"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a71326f0909d77386e29b511e1990a11f"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1test_1_1_assets_library.xhtml">AssetsLibrary</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a71326f0909d77386e29b511e1990a11f">library</a></td></tr>
<tr class="separator:a71326f0909d77386e29b511e1990a11f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="ab3a61953b0f41e932f8a2ce8918e7aec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3a61953b0f41e932f8a2ce8918e7aec">&#9670;&nbsp;</a></span>apply()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::apply </td>
          <td>(</td>
          <td class="paramtype">O *&#160;</td>
          <td class="paramname"><em>obj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">F &amp;&amp;&#160;</td>
          <td class="paramname"><em>func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::tuple&lt; As... &gt; &amp;&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="tests_2framework_2_utils_8h_source.xhtml#l00079">79</a> of file <a class="el" href="tests_2framework_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;{</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a1ce487275e4d9e2072af217789dcdcc5">detail::apply_impl</a>(obj, std::forward&lt;F&gt;(func), args, detail::sequence_t&lt;<span class="keyword">sizeof</span>...(As)&gt;());</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_a1ce487275e4d9e2072af217789dcdcc5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#a1ce487275e4d9e2072af217789dcdcc5">arm_compute::test::framework::apply_impl</a></div><div class="ttdeci">void apply_impl(O *obj, F &amp;&amp;func, const std::tuple&lt; As... &gt; &amp;args, detail::sequence&lt; S... &gt;)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2framework_2_utils_8h_source.xhtml#l00072">Utils.h:72</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="tests_2framework_2_utils_8h_source.xhtml#l00072">arm_compute::test::framework::apply_impl()</a>.</p>

</div>
</div>
<a id="a93690f80f7fb88ea733fdc6f9f3b3ada"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a93690f80f7fb88ea733fdc6f9f3b3ada">&#9670;&nbsp;</a></span>arithmetic_to_string()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::test::arithmetic_to_string </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>val</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>decimal_places</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create a string with the arithmetic value in full precision. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">val</td><td>Arithmetic value </td></tr>
    <tr><td class="paramname">decimal_places</td><td>How many decimal places to show</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String with the arithmetic value. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2framework_2_utils_8h_source.xhtml#l00164">164</a> of file <a class="el" href="tests_2framework_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;{</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    std::stringstream ss;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    ss &lt;&lt; std::fixed;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    ss.precision((decimal_places) ? decimal_places : std::numeric_limits&lt;T&gt;::digits10 + 1);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    ss &lt;&lt; val;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordflow">return</span> ss.str();</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_pretty_printer_8cpp_source.xhtml#l00119">PrettyPrinter::print_measurements()</a>.</p>

</div>
</div>
<a id="a9be4cb7e6ee20063a4a10bc3abb750b9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9be4cb7e6ee20063a4a10bc3abb750b9">&#9670;&nbsp;</a></span>coord2index()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::test::coord2index </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>coord</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Linearise the given coordinate. </p>
<p>Transforms the given coordinate into a linear offset in terms of elements.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td>Shape of the n-dimensional tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">coord</td><td>The to be converted coordinate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Linear offset to the element. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00480">480</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;{</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <a class="code" href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.total_size() == 0, <span class="stringliteral">&quot;Cannot get index from empty shape&quot;</span>);</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <a class="code" href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>(coord.num_dimensions() == 0, <span class="stringliteral">&quot;Cannot get index of empty coordinate&quot;</span>);</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <span class="keywordtype">int</span> index    = 0;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <span class="keywordtype">int</span> dim_size = 1;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; coord.num_dimensions(); ++i)</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    {</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;        index += coord[i] * dim_size;</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        dim_size *= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[i];</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    }</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    <span class="keywordflow">return</span> index;</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00097">AbsoluteDifference.cpp:97</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a5bbdcf574d3f5e412fa6a1117911e67b"><div class="ttname"><a href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond,...)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00328">Error.h:328</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00328">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00122">Dimensions&lt; T &gt;::num_dimensions()</a>, and <a class="el" href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00097">arm_compute::test::validation::shape</a>.</p>

<p class="reference">Referenced by <a class="el" href="tests_2validation_2reference_2_utils_8h_source.xhtml#l00098">arm_compute::test::validation::apply_2d_spatial_filter()</a>, <a class="el" href="reference_2_col2_im_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::col2im()</a>, <a class="el" href="validation_2reference_2_fast_corners_8cpp_source.xhtml#l00152">arm_compute::test::validation::reference::fast_corners()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00057">RawTensor::operator()()</a>, <a class="el" href="_simple_tensor_8h_source.xhtml#l00431">SimpleTensor&lt; uint8_t &gt;::operator()()</a>, <a class="el" href="reference_2_pad_layer_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::pad_layer()</a>, <a class="el" href="reference_2_reverse_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::reverse()</a>, <a class="el" href="validation_2reference_2_scale_8cpp_source.xhtml#l00040">arm_compute::test::validation::reference::scale_core()</a>, <a class="el" href="tests_2validation_2reference_2_utils_8h_source.xhtml#l00061">arm_compute::test::validation::tensor_elem_at()</a>, <a class="el" href="reference_2_tile_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::tile()</a>, <a class="el" href="validation_2reference_2_transpose_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::transpose()</a>, <a class="el" href="validation_2reference_2_warp_affine_8cpp_source.xhtml#l00050">arm_compute::test::validation::reference::warp_affine()</a>, <a class="el" href="reference_2_warp_perspective_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::warp_perspective()</a>, and <a class="el" href="reference_2_weights_reshape_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::weights_reshape()</a>.</p>

</div>
</div>
<a id="a30aaea1825f3464f073e1d1bce82e420"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30aaea1825f3464f073e1d1bce82e420">&#9670;&nbsp;</a></span>copy_tensor() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt;T1&gt; arm_compute::test::copy_tensor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; T2 &gt; &amp;&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00224">224</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;{</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    SimpleTensor&lt;T1&gt; st(tensor.shape(), tensor.data_type(),</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                        tensor.num_channels(),</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                        tensor.quantization_info(),</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                        tensor.data_layout());</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> n = 0; n &lt; size_t(st.num_elements()); n++)</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    {</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        st.data()[n] = static_cast&lt;T1&gt;(tensor.data()[n]);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    }</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keywordflow">return</span> st;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;}</div></div><!-- fragment -->
<p class="reference">References <a class="el" href="_simple_tensor_8h_source.xhtml#l00419">SimpleTensor&lt; T &gt;::data()</a>, <a class="el" href="_simple_tensor_8h_source.xhtml#l00352">SimpleTensor&lt; T &gt;::data_layout()</a>, <a class="el" href="_simple_tensor_8h_source.xhtml#l00358">SimpleTensor&lt; T &gt;::data_type()</a>, <a class="el" href="_simple_tensor_8h_source.xhtml#l00371">SimpleTensor&lt; T &gt;::num_channels()</a>, <a class="el" href="_simple_tensor_8h_source.xhtml#l00333">SimpleTensor&lt; T &gt;::quantization_info()</a>, and <a class="el" href="_simple_tensor_8h_source.xhtml#l00321">SimpleTensor&lt; T &gt;::shape()</a>.</p>

</div>
</div>
<a id="aafd2a1bcbb2f4dd73e6f6f322e9014c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aafd2a1bcbb2f4dd73e6f6f322e9014c7">&#9670;&nbsp;</a></span>copy_tensor() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; T1 &gt; copy_tensor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00238">238</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;{</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    SimpleTensor&lt;T1&gt; st(tensor.shape(), tensor.data_type(),</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                        tensor.num_channels(),</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                        tensor.quantization_info(),</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                        tensor.data_layout());</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    memcpy((<span class="keywordtype">void</span> *)st.data(), (<span class="keyword">const</span> <span class="keywordtype">void</span> *)tensor.data(), size_t(st.num_elements() * <span class="keyword">sizeof</span>(T1)));</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keywordflow">return</span> st;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;}</div></div><!-- fragment -->
<p class="reference">References <a class="el" href="_simple_tensor_8h_source.xhtml#l00419">SimpleTensor&lt; T &gt;::data()</a>, <a class="el" href="_simple_tensor_8h_source.xhtml#l00352">SimpleTensor&lt; T &gt;::data_layout()</a>, <a class="el" href="_simple_tensor_8h_source.xhtml#l00358">SimpleTensor&lt; T &gt;::data_type()</a>, <a class="el" href="_simple_tensor_8h_source.xhtml#l00371">SimpleTensor&lt; T &gt;::num_channels()</a>, <a class="el" href="_simple_tensor_8h_source.xhtml#l00333">SimpleTensor&lt; T &gt;::quantization_info()</a>, and <a class="el" href="_simple_tensor_8h_source.xhtml#l00321">SimpleTensor&lt; T &gt;::shape()</a>.</p>

</div>
</div>
<a id="a2e6c79aeedb1c5c9482568562e310fba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e6c79aeedb1c5c9482568562e310fba">&#9670;&nbsp;</a></span>create_HOG()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::test::create_HOG </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_h_o_g_info.xhtml">HOGInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>hog_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create and initialize a <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object.">HOG</a> (Histogram of Oriented Gradients) of the given type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">hog_info</td><td><a class="el" href="classarm__compute_1_1_h_o_g_info.xhtml" title="Store the HOG&#39;s metadata.">HOGInfo</a> object</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Initialized <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object.">HOG</a> of given type. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00575">575</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;{</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    T hog;</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    hog.init(hog_info);</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    <span class="keywordflow">return</span> hog;</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a764bac61748afaf8fd0468b2a4cb09be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a764bac61748afaf8fd0468b2a4cb09be">&#9670;&nbsp;</a></span>create_multi_image()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::test::create_multi_image </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create and initialize a multi-image of the given type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> shape. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Format type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Initialized tensor of given type. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00560">560</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;{</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    T multi_image;</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    multi_image.init(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.x(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.y(), format);</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <span class="keywordflow">return</span> multi_image;</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00097">AbsoluteDifference.cpp:97</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00097">arm_compute::test::validation::shape</a>.</p>

</div>
</div>
<a id="a0c2176d85e729a5a5361181fd8119320"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c2176d85e729a5a5361181fd8119320">&#9670;&nbsp;</a></span>create_pyramid()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::test::create_pyramid </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pyramid_info.xhtml">PyramidInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>pyramid_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create and initialize a <a class="el" href="classarm__compute_1_1_pyramid.xhtml" title="Basic implementation of the pyramid interface.">Pyramid</a> of the given type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pyramid_info</td><td>The <a class="el" href="classarm__compute_1_1_pyramid_info.xhtml" title="Store the Pyramid&#39;s metadata.">PyramidInfo</a> object.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Initialized <a class="el" href="classarm__compute_1_1_pyramid.xhtml" title="Basic implementation of the pyramid interface.">Pyramid</a> of given type. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00590">590</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;{</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    T pyramid;</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    pyramid.init_auto_padding(pyramid_info);</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    <span class="keywordflow">return</span> pyramid;</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a7e54837110cf77f30169334e9f4affd4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e54837110cf77f30169334e9f4affd4">&#9670;&nbsp;</a></span>create_tensor() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_g_c_tensor.xhtml">GCTensor</a> arm_compute::test::create_tensor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>num_channels</em> = <code>1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Helper to create an empty tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td>Desired shape. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Desired data type. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>(Optional) It indicates the number of channels for each tensor element</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Empty <a class="el" href="classarm__compute_1_1_g_c_tensor.xhtml">GCTensor</a> with the specified shape and data type. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_g_l_e_s___c_o_m_p_u_t_e_2_helper_8h_source.xhtml#l00046">46</a> of file <a class="el" href="_g_l_e_s___c_o_m_p_u_t_e_2_helper_8h_source.xhtml">Helper.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    GCTensor tensor;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    tensor.allocator()-&gt;init(TensorInfo(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>, num_channels, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>));</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordflow">return</span> tensor;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00097">AbsoluteDifference.cpp:97</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_arithmetic_addition_8cpp_source.xhtml#l00135">ArithmeticAddition.cpp:135</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_g_c_tensor_8cpp_source.xhtml#l00034">GCTensor::allocator()</a>, <a class="el" href="_c_l_2_arithmetic_addition_8cpp_source.xhtml#l00135">arm_compute::test::validation::data_type</a>, <a class="el" href="_i_tensor_allocator_8cpp_source.xhtml#l00038">ITensorAllocator::init()</a>, and <a class="el" href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00097">arm_compute::test::validation::shape</a>.</p>

</div>
</div>
<a id="a927fb5d3770b704997bee8c1070cdba8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a927fb5d3770b704997bee8c1070cdba8">&#9670;&nbsp;</a></span>create_tensor() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_g_c_tensor.xhtml">GCTensor</a> arm_compute::test::create_tensor </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Helper to create an empty tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>File name from which to get the dimensions. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Desired data type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Empty <a class="el" href="classarm__compute_1_1_g_c_tensor.xhtml">GCTensor</a> with the specified shape and data type. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_g_l_e_s___c_o_m_p_u_t_e_2_helper_8h_source.xhtml#l00061">61</a> of file <a class="el" href="_g_l_e_s___c_o_m_p_u_t_e_2_helper_8h_source.xhtml">Helper.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;{</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_channels = 1;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> RawTensor &amp;raw = <a class="code" href="namespacearm__compute_1_1test.xhtml#a71326f0909d77386e29b511e1990a11f">library</a>-&gt;get(name);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    GCTensor tensor;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    tensor.allocator()-&gt;init(TensorInfo(raw.shape(), num_channels, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>));</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">return</span> tensor;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_xhtml_a71326f0909d77386e29b511e1990a11f"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a71326f0909d77386e29b511e1990a11f">arm_compute::test::library</a></div><div class="ttdeci">std::unique_ptr&lt; AssetsLibrary &gt; library</div><div class="ttdef"><b>Definition:</b> <a href="main_8cpp_source.xhtml#l00075">main.cpp:75</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_arithmetic_addition_8cpp_source.xhtml#l00135">ArithmeticAddition.cpp:135</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_g_c_tensor_8cpp_source.xhtml#l00034">GCTensor::allocator()</a>, <a class="el" href="_c_l_2_arithmetic_addition_8cpp_source.xhtml#l00135">arm_compute::test::validation::data_type</a>, <a class="el" href="_i_tensor_allocator_8cpp_source.xhtml#l00038">ITensorAllocator::init()</a>, <a class="el" href="main_8cpp_source.xhtml#l00075">library</a>, and <a class="el" href="_simple_tensor_8h_source.xhtml#l00321">SimpleTensor&lt; T &gt;::shape()</a>.</p>

</div>
</div>
<a id="ade9b3889d957ceeca403e2ab66deb672"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ade9b3889d957ceeca403e2ab66deb672">&#9670;&nbsp;</a></span>create_tensor() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::test::create_tensor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>num_channels</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>&#160;</td>
          <td class="paramname"><em>quantization_info</em> = <code><a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em> = <code><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create and initialize a tensor of the given type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> shape. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Data type. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>(Optional) Number of channels. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">quantization_info</td><td>(Optional) Quantization info for asymmetric quantized types. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_layout</td><td>(Optional) Data layout. Default is NCHW.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Initialized tensor of given type. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00522">522</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;{</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    T          tensor;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    TensorInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>, num_channels, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>);</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.set_quantization_info(quantization_info);</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>.set_data_layout(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>);</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    tensor.allocator()-&gt;init(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    <span class="keywordflow">return</span> tensor;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00097">AbsoluteDifference.cpp:97</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_acf5f12bbab64dd614bd8220c97fe484f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">arm_compute::test::validation::data_layout</a></div><div class="ttdeci">const DataLayout data_layout</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00146">Im2Col.cpp:146</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_arithmetic_addition_8cpp_source.xhtml#l00135">ArithmeticAddition.cpp:135</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f4125dba5283887b34f889b1c615c0c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">arm_compute::test::validation::info</a></div><div class="ttdeci">info</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00146">arm_compute::test::validation::data_layout</a>, <a class="el" href="_c_l_2_arithmetic_addition_8cpp_source.xhtml#l00135">arm_compute::test::validation::data_type</a>, <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::info</a>, and <a class="el" href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00097">arm_compute::test::validation::shape</a>.</p>

</div>
</div>
<a id="a1a1319867418814820134ec77cf09eed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a1319867418814820134ec77cf09eed">&#9670;&nbsp;</a></span>create_tensor() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::test::create_tensor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create and initialize a tensor of the given type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> shape. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Format type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Initialized tensor of given type. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00542">542</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;{</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    TensorInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>, format);</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    T tensor;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    tensor.allocator()-&gt;init(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    <span class="keywordflow">return</span> tensor;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00097">AbsoluteDifference.cpp:97</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f4125dba5283887b34f889b1c615c0c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">arm_compute::test::validation::info</a></div><div class="ttdeci">info</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::info</a>, and <a class="el" href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00097">arm_compute::test::validation::shape</a>.</p>

</div>
</div>
<a id="ac35e7a1ad467f5fe8620cbbc5793d53b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac35e7a1ad467f5fe8620cbbc5793d53b">&#9670;&nbsp;</a></span>fill_array()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::fill_array </td>
          <td>(</td>
          <td class="paramtype">ArrayAccessor_T &amp;&amp;&#160;</td>
          <td class="paramname"><em>array</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>v</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00716">716</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;{</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    array.resize(v.size());</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    std::memcpy(array.buffer(), v.data(), v.size() * <span class="keyword">sizeof</span>(T));</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a3594bac8da97eb819a7bf7e02d642ace"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3594bac8da97eb819a7bf7e02d642ace">&#9670;&nbsp;</a></span>fill_tensors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::fill_tensors </td>
          <td>(</td>
          <td class="paramtype">D &amp;&amp;&#160;</td>
          <td class="paramname"><em>dist</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::initializer_list&lt; int &gt;&#160;</td>
          <td class="paramname"><em>seeds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>other_tensors</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_o_n_2_helper_8h_source.xhtml#l00041">41</a> of file <a class="el" href="_n_e_o_n_2_helper_8h_source.xhtml">Helper.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">const</span> std::array &lt; T, 1 + <span class="keyword">sizeof</span>...(Ts) &gt; tensors{ { std::forward&lt;T&gt;(tensor), std::forward&lt;Ts&gt;(other_tensors)... } };</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    std::vector&lt;int&gt; vs(seeds);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(vs.size() != tensors.size());</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordtype">int</span> k = 0;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> tp : tensors)</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <a class="code" href="namespacearm__compute_1_1test.xhtml#a71326f0909d77386e29b511e1990a11f">library</a>-&gt;fill(Accessor(*tp), std::forward&lt;D&gt;(dist), vs[k++]);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    }</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00337">Error.h:337</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a71326f0909d77386e29b511e1990a11f"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a71326f0909d77386e29b511e1990a11f">arm_compute::test::library</a></div><div class="ttdeci">std::unique_ptr&lt; AssetsLibrary &gt; library</div><div class="ttdef"><b>Definition:</b> <a href="main_8cpp_source.xhtml#l00075">main.cpp:75</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00337">ARM_COMPUTE_ERROR_ON</a>, and <a class="el" href="main_8cpp_source.xhtml#l00075">library</a>.</p>

</div>
</div>
<a id="a1ebbb23b0094d47c51226d58e17e6447"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1ebbb23b0094d47c51226d58e17e6447">&#9670;&nbsp;</a></span>foldl() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::test::foldl </td>
          <td>(</td>
          <td class="paramtype">F &amp;&amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Base case of foldl. </p>
<dl class="section return"><dt>Returns</dt><dd>value. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00184">184</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;{</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keywordflow">return</span> value;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ad933f996ccb22854ae56dd86de8cbbfe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad933f996ccb22854ae56dd86de8cbbfe">&#9670;&nbsp;</a></span>foldl() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto arm_compute::test::foldl </td>
          <td>(</td>
          <td class="paramtype">F &amp;&amp;&#160;</td>
          <td class="paramname"><em>func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>value1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">U &amp;&amp;&#160;</td>
          <td class="paramname"><em>value2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> -&gt; decltype(func(value1, value2))
</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Base case of foldl. </p>
<dl class="section return"><dt>Returns</dt><dd>func(value1, value2). </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00194">194</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;{</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keywordflow">return</span> func(value1, value2);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a92a5aaf033153828aef41d3354c204d9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a92a5aaf033153828aef41d3354c204d9">&#9670;&nbsp;</a></span>foldl() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">I arm_compute::test::foldl </td>
          <td>(</td>
          <td class="paramtype">F &amp;&amp;&#160;</td>
          <td class="paramname"><em>func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">I &amp;&amp;&#160;</td>
          <td class="paramname"><em>initial</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Vs &amp;&amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Fold left. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">func</td><td>Binary function to be called. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">initial</td><td>Initial value. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Argument passed to the function. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>Remaining arguments. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00207">207</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;{</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test.xhtml#a92a5aaf033153828aef41d3354c204d9">foldl</a>(std::forward&lt;F&gt;(func), func(std::forward&lt;I&gt;(initial), std::forward&lt;T&gt;(value)), std::forward&lt;Vs&gt;(values)...);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_xhtml_a92a5aaf033153828aef41d3354c204d9"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a92a5aaf033153828aef41d3354c204d9">arm_compute::test::foldl</a></div><div class="ttdeci">I foldl(F &amp;&amp;func, I &amp;&amp;initial, T &amp;&amp;value, Vs &amp;&amp;... values)</div><div class="ttdoc">Fold left.</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00207">Utils.h:207</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6fca44ec6b8d63994a8b16012a73f666"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6fca44ec6b8d63994a8b16012a73f666">&#9670;&nbsp;</a></span>generate_random_keypoints()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="structarm__compute_1_1_key_point.xhtml">KeyPoint</a>&gt; arm_compute::test::generate_random_keypoints </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>num_keypoints</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::random_device::result_type&#160;</td>
          <td class="paramname"><em>seed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>num_levels</em> = <code>1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create a vector of random keypoints for pyramid representation. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td>The shape of the input tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_keypoints</td><td>The number of keypoints to be created. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">seed</td><td>The random seed to be used. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_levels</td><td>The number of pyramid levels.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A vector that contains the requested number of random keypoints </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00686">686</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;{</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    std::vector&lt;KeyPoint&gt; keypoints;</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    std::mt19937          gen(seed);</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    <span class="comment">// Calculate distribution bounds</span></div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> min        = static_cast&lt;int&gt;(std::pow(2, num_levels));</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> max_width  = static_cast&lt;int&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.x());</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> max_height = static_cast&lt;int&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.y());</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(min &gt; max_width || min &gt; max_height);</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    <span class="comment">// Create distributions</span></div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    std::uniform_int_distribution&lt;&gt; dist_w(min, max_width);</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    std::uniform_int_distribution&lt;&gt; dist_h(min, max_height);</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; num_keypoints; i++)</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    {</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;        KeyPoint keypoint;</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;        keypoint.x               = dist_w(gen);</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;        keypoint.y               = dist_h(gen);</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;        keypoint.tracking_status = 1;</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;        keypoints.push_back(keypoint);</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    }</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    <span class="keywordflow">return</span> keypoints;</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00097">AbsoluteDifference.cpp:97</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00337">Error.h:337</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00337">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00097">arm_compute::test::validation::shape</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00410">KeyPoint::tracking_status</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00405">KeyPoint::x</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00406">KeyPoint::y</a>.</p>

</div>
</div>
<a id="a000a9b9acb976222ee72275cf8852a3f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a000a9b9acb976222ee72275cf8852a3f">&#9670;&nbsp;</a></span>generate_random_real()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;T&gt; arm_compute::test::generate_random_real </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>max</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::random_device::result_type&#160;</td>
          <td class="paramname"><em>seed</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create a vector with a uniform distribution of floating point values across the specified range. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">num_values</td><td>The number of values to be created. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">min</td><td>The minimum value in distribution (inclusive). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">max</td><td>The maximum value in distribution (inclusive). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">seed</td><td>The random seed to be used.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A vector that contains the requested number of random floating point values </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00663">663</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;{</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    std::vector&lt;T&gt;                    v(num_values);</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    std::mt19937                      gen(seed);</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    std::uniform_real_distribution&lt;T&gt; dist(min, max);</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; num_values; ++i)</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    {</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;        v.at(i) = dist(gen);</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    }</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    <span class="keywordflow">return</span> v;</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac7dbe33793790fc37a5eda11ed6b0273"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac7dbe33793790fc37a5eda11ed6b0273">&#9670;&nbsp;</a></span>get_channel_format()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> arm_compute::test::get_channel_format </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a>&#160;</td>
          <td class="paramname"><em>channel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the format of a channel. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">channel</td><td>Channel type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Format of the given channel. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00166">166</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;{</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordflow">switch</span>(channel)</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    {</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="keywordflow">case</span> Channel::R:</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keywordflow">case</span> Channel::G:</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordflow">case</span> Channel::B:</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            <span class="keywordflow">return</span> Format::U8;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Unsupported channel&quot;</span>);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    }</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;}</div></div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">arm_compute::B</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aadfcf28d0734569a6a693bc8194de62bf">arm_compute::G</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aae1e1d3d40573127e9ee0480caf1283d6">arm_compute::R</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::U8</a>.</p>

</div>
</div>
<a id="aa337ab76176f3c4193642ac6de3a61cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa337ab76176f3c4193642ac6de3a61cf">&#9670;&nbsp;</a></span>get_format_for_channel()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> arm_compute::test::get_format_for_channel </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a>&#160;</td>
          <td class="paramname"><em>channel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Look up the format corresponding to a channel. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">channel</td><td>Channel type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Format that contains the given channel. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00147">147</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;{</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">switch</span>(channel)</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keywordflow">case</span> Channel::R:</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keywordflow">case</span> Channel::G:</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="keywordflow">case</span> Channel::B:</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            <span class="keywordflow">return</span> Format::RGB888;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Unsupported channel&quot;</span>);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div></div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">arm_compute::B</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aadfcf28d0734569a6a693bc8194de62bf">arm_compute::G</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aae1e1d3d40573127e9ee0480caf1283d6">arm_compute::R</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">arm_compute::RGB888</a>.</p>

<p class="reference">Referenced by <a class="el" href="_assets_library_8cpp_source.xhtml#l00272">AssetsLibrary::fill()</a>, and <a class="el" href="_assets_library_8cpp_source.xhtml#l00495">AssetsLibrary::get()</a>.</p>

</div>
</div>
<a id="ae47155d6186155ec4da9295764b3c05a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae47155d6186155ec4da9295764b3c05a">&#9670;&nbsp;</a></span>get_typestring()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::test::get_typestring </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Obtain numpy type string from DataType. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Data type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>numpy type string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00728">728</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;{</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    <span class="comment">// Check endianness</span></div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 1;</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>        *c = reinterpret_cast&lt;const char *&gt;(&amp;i);</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    std::string        endianness;</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;    <span class="keywordflow">if</span>(*c == 1)</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    {</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;        endianness = std::string(<span class="stringliteral">&quot;&lt;&quot;</span>);</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    }</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    {</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;        endianness = std::string(<span class="stringliteral">&quot;&gt;&quot;</span>);</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;    }</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    <span class="keyword">const</span> std::string no_endianness(<span class="stringliteral">&quot;|&quot;</span>);</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;    <span class="keywordflow">switch</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>)</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    {</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;        <span class="keywordflow">case</span> DataType::U8:</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;            <span class="keywordflow">return</span> no_endianness + <span class="stringliteral">&quot;u&quot;</span> + <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ace86dc6f3dfa4f3c256b3999ab250c0a">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(uint8_t));</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;        <span class="keywordflow">case</span> DataType::S8:</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;            <span class="keywordflow">return</span> no_endianness + <span class="stringliteral">&quot;i&quot;</span> + <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ace86dc6f3dfa4f3c256b3999ab250c0a">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(int8_t));</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;        <span class="keywordflow">case</span> DataType::U16:</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;u&quot;</span> + <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ace86dc6f3dfa4f3c256b3999ab250c0a">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(uint16_t));</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;        <span class="keywordflow">case</span> DataType::S16:</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;i&quot;</span> + <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ace86dc6f3dfa4f3c256b3999ab250c0a">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(int16_t));</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;        <span class="keywordflow">case</span> DataType::U32:</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;u&quot;</span> + <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ace86dc6f3dfa4f3c256b3999ab250c0a">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(uint32_t));</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;        <span class="keywordflow">case</span> DataType::S32:</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;i&quot;</span> + <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ace86dc6f3dfa4f3c256b3999ab250c0a">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(int32_t));</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;        <span class="keywordflow">case</span> DataType::U64:</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;u&quot;</span> + <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ace86dc6f3dfa4f3c256b3999ab250c0a">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(uint64_t));</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;        <span class="keywordflow">case</span> DataType::S64:</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;i&quot;</span> + <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ace86dc6f3dfa4f3c256b3999ab250c0a">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(int64_t));</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;        <span class="keywordflow">case</span> DataType::F32:</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;f&quot;</span> + <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ace86dc6f3dfa4f3c256b3999ab250c0a">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(<span class="keywordtype">float</span>));</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;        <span class="keywordflow">case</span> DataType::F64:</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;f&quot;</span> + <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ace86dc6f3dfa4f3c256b3999ab250c0a">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(<span class="keywordtype">double</span>));</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;        <span class="keywordflow">case</span> DataType::SIZET:</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;u&quot;</span> + <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ace86dc6f3dfa4f3c256b3999ab250c0a">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(<span class="keywordtype">size_t</span>));</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;            <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    }</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a05b19c75afe9c24200a62b9724734bbd"><div class="ttname"><a href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00261">Error.h:261</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_ace86dc6f3dfa4f3c256b3999ab250c0a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#ace86dc6f3dfa4f3c256b3999ab250c0a">arm_compute::test::framework::to_string</a></div><div class="ttdeci">std::string to_string(DatasetMode mode)</div><div class="ttdef"><b>Definition:</b> <a href="_dataset_modes_8h_source.xhtml#l00100">DatasetModes.h:100</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_arithmetic_addition_8cpp_source.xhtml#l00135">ArithmeticAddition.cpp:135</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00261">ARM_COMPUTE_ERROR</a>, <a class="el" href="_c_l_2_arithmetic_addition_8cpp_source.xhtml#l00135">arm_compute::test::validation::data_type</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::F32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e">arm_compute::F64</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">arm_compute::S16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::S32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">arm_compute::S64</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">arm_compute::S8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1">arm_compute::SIZET</a>, <a class="el" href="_toolchain_support_8h_source.xhtml#l00242">arm_compute::support::cpp11::to_string()</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">arm_compute::U16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">arm_compute::U32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">arm_compute::U64</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::U8</a>.</p>

<p class="reference">Referenced by <a class="el" href="_assets_library_8h_source.xhtml#l00896">AssetsLibrary::fill_layer_data()</a>.</p>

</div>
</div>
<a id="a24d8c0391cfa38e78969b6ad97c0ff09"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a24d8c0391cfa38e78969b6ad97c0ff09">&#9670;&nbsp;</a></span>index2coord()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> arm_compute::test::index2coord </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>index</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert a linear index into n-dimensional coordinates. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td>Shape of the n-dimensional tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>Linear index specifying the i-th element.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>n-dimensional coordinates. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00451">451</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;{</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    <span class="keywordtype">int</span> num_elements = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.total_size();</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <a class="code" href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>(index &lt; 0 || index &gt;= num_elements, <span class="stringliteral">&quot;Index has to be in [0, num_elements]&quot;</span>);</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <a class="code" href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>(num_elements == 0, <span class="stringliteral">&quot;Cannot create coordinate from empty shape&quot;</span>);</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    Coordinates coord{ 0 };</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> d = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.num_dimensions() - 1; d &gt;= 0; --d)</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    {</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        num_elements /= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[d];</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        coord.set(d, index / num_elements);</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        index %= num_elements;</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    }</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    <span class="keywordflow">return</span> coord;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00097">AbsoluteDifference.cpp:97</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a5bbdcf574d3f5e412fa6a1117911e67b"><div class="ttname"><a href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond,...)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00328">Error.h:328</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00328">ARM_COMPUTE_ERROR_ON_MSG</a>, and <a class="el" href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00097">arm_compute::test::validation::shape</a>.</p>

<p class="reference">Referenced by <a class="el" href="reference_2_box3x3_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::box3x3()</a>, <a class="el" href="reference_2_channel_combine_8cpp_source.xhtml#l00091">arm_compute::test::validation::reference::channel_combine()</a>, <a class="el" href="validation_2reference_2_convolution_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::convolution()</a>, <a class="el" href="reference_2_dilate_8cpp_source.xhtml#l00041">arm_compute::test::validation::reference::dilate()</a>, <a class="el" href="reference_2_erode_8cpp_source.xhtml#l00041">arm_compute::test::validation::reference::erode()</a>, <a class="el" href="validation_2reference_2_fast_corners_8cpp_source.xhtml#l00152">arm_compute::test::validation::reference::fast_corners()</a>, <a class="el" href="_assets_library_8h_source.xhtml#l00522">AssetsLibrary::fill()</a>, <a class="el" href="_assets_library_8h_source.xhtml#l00488">AssetsLibrary::fill_boxes()</a>, <a class="el" href="reference_2_gaussian3x3_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::gaussian3x3()</a>, <a class="el" href="reference_2_gaussian5x5_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::gaussian5x5()</a>, <a class="el" href="validation_2reference_2_median3x3_8cpp_source.xhtml#l00044">arm_compute::test::validation::reference::median3x3()</a>, <a class="el" href="reference_2_non_linear_filter_8cpp_source.xhtml#l00036">arm_compute::test::validation::reference::non_linear_filter()</a>, <a class="el" href="_non_maxima_suppression_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::non_maxima_suppression()</a>, <a class="el" href="reference_2_pad_layer_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::pad_layer()</a>, <a class="el" href="reference_2_permute_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::permute()</a>, <a class="el" href="validation_2reference_2_remap_8cpp_source.xhtml#l00041">arm_compute::test::validation::reference::remap()</a>, <a class="el" href="reference_2_reverse_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::reverse()</a>, <a class="el" href="validation_2reference_2_scale_8cpp_source.xhtml#l00040">arm_compute::test::validation::reference::scale_core()</a>, <a class="el" href="reference_2_tile_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::tile()</a>, <a class="el" href="validation_2reference_2_transpose_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::transpose()</a>, <a class="el" href="tests_2validation_2reference_2_utils_8cpp_source.xhtml#l00069">arm_compute::test::validation::transpose()</a>, <a class="el" href="_validation_8cpp_source.xhtml#l00177">arm_compute::test::validation::validate()</a>, <a class="el" href="_validation_8h_source.xhtml#l00456">arm_compute::test::validation::validate_wrap()</a>, <a class="el" href="validation_2reference_2_warp_affine_8cpp_source.xhtml#l00050">arm_compute::test::validation::reference::warp_affine()</a>, <a class="el" href="reference_2_warp_perspective_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::warp_perspective()</a>, and <a class="el" href="reference_2_y_o_l_o_layer_8cpp_source.xhtml#l00040">arm_compute::test::validation::reference::yolo_layer()</a>.</p>

</div>
</div>
<a id="a9a5cc10c5cfc190c61b60d393c8ab566"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a5cc10c5cfc190c61b60d393c8ab566">&#9670;&nbsp;</a></span>init_conv()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::init_conv </td>
          <td>(</td>
          <td class="paramtype">int16_t *&#160;</td>
          <td class="paramname"><em>conv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::random_device::result_type&#160;</td>
          <td class="paramname"><em>seed</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initialize a convolution matrix. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">conv</td><td>The input convolution matrix. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">width</td><td>The width of the convolution matrix. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">height</td><td>The height of the convolution matrix. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">seed</td><td>The random seed to be used. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00605">605</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;{</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    std::mt19937                           gen(seed);</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    std::uniform_int_distribution&lt;int16_t&gt; distribution_int16(-32768, 32767);</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; width * height; ++i)</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    {</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a006546051719c5fb4b20c966a26b9c76">conv</a>[i] = distribution_int16(gen);</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;    }</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a006546051719c5fb4b20c966a26b9c76"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a006546051719c5fb4b20c966a26b9c76">arm_compute::test::validation::conv</a></div><div class="ttdeci">std::array&lt; int16_t, 25 &gt; conv</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_8cpp_source.xhtml#l00125">Convolution.cpp:125</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="validation_2_c_l_2_convolution_8cpp_source.xhtml#l00125">arm_compute::test::validation::conv</a>.</p>

</div>
</div>
<a id="ae6e554d44ff4ae133f1a1433d8489e0c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae6e554d44ff4ae133f1a1433d8489e0c">&#9670;&nbsp;</a></span>init_separable_conv()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::init_separable_conv </td>
          <td>(</td>
          <td class="paramtype">int16_t *&#160;</td>
          <td class="paramname"><em>conv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::random_device::result_type&#160;</td>
          <td class="paramname"><em>seed</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initialize a separable convolution matrix. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">conv</td><td>The input convolution matrix. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">width</td><td>The width of the convolution matrix. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">height</td><td>The height of the convolution matrix. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">seed</td><td>The random seed to be used. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00623">623</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;{</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    std::mt19937 gen(seed);</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    <span class="comment">// Set it between -128 and 127 to ensure the matrix does not overflow</span></div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    std::uniform_int_distribution&lt;int16_t&gt; distribution_int16(-128, 127);</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    int16_t conv_row[width];</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    int16_t conv_col[height];</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    conv_row[0] = conv_col[0] = 1;</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 1; i &lt; width; ++i)</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    {</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;        conv_row[i] = distribution_int16(gen);</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    }</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 1; i &lt; height; ++i)</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    {</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;        conv_col[i] = distribution_int16(gen);</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    }</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    <span class="comment">// Multiply two matrices</span></div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; width; ++i)</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    {</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; height; ++j)</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;        {</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a006546051719c5fb4b20c966a26b9c76">conv</a>[i * width + j] = conv_col[i] * conv_row[j];</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;        }</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    }</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a006546051719c5fb4b20c966a26b9c76"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a006546051719c5fb4b20c966a26b9c76">arm_compute::test::validation::conv</a></div><div class="ttdeci">std::array&lt; int16_t, 25 &gt; conv</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_8cpp_source.xhtml#l00125">Convolution.cpp:125</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="validation_2_c_l_2_convolution_8cpp_source.xhtml#l00125">arm_compute::test::validation::conv</a>.</p>

</div>
</div>
<a id="a856b55fc20ddcbdbeb84c35ae27bedac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a856b55fc20ddcbdbeb84c35ae27bedac">&#9670;&nbsp;</a></span>is_in_valid_region()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::test::is_in_valid_region </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;&#160;</td>
          <td class="paramname"><em>valid_region</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td>
          <td class="paramname"><em>coord</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check if a coordinate is within a valid region. </p>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00498">498</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;{</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> d = 0; d &lt; Coordinates::num_max_dimensions; ++d)</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    {</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        <span class="keywordflow">if</span>(coord[d] &lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#aae139363fa58e04c3d391339e820a06f">start</a>(d) || coord[d] &gt;= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1cb8fae6eb760594815b62ec5af5eca2">end</a>(d))</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        {</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;        }</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    }</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;}</div><div class="ttc" id="structarm__compute_1_1_valid_region_xhtml_aae139363fa58e04c3d391339e820a06f"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#aae139363fa58e04c3d391339e820a06f">arm_compute::ValidRegion::start</a></div><div class="ttdeci">int start(unsigned int d) const</div><div class="ttdoc">Return the start of the valid region for the given dimension d.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00220">Types.h:220</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7819bcbbf45c2e7c1396a137dce54422"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">arm_compute::test::validation::valid_region</a></div><div class="ttdeci">const ValidRegion valid_region</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00109">AbsoluteDifference.cpp:109</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml_a1cb8fae6eb760594815b62ec5af5eca2"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#a1cb8fae6eb760594815b62ec5af5eca2">arm_compute::ValidRegion::end</a></div><div class="ttdeci">int end(unsigned int d) const</div><div class="ttdoc">Return the end of the valid region for the given dimension d.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00226">Types.h:226</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00226">ValidRegion::end()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00045">Dimensions&lt; int &gt;::num_max_dimensions</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00220">ValidRegion::start()</a>, and <a class="el" href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00109">arm_compute::test::validation::valid_region</a>.</p>

<p class="reference">Referenced by <a class="el" href="validation_2reference_2_fast_corners_8cpp_source.xhtml#l00152">arm_compute::test::validation::reference::fast_corners()</a>, <a class="el" href="reference_2_non_linear_filter_8cpp_source.xhtml#l00036">arm_compute::test::validation::reference::non_linear_filter()</a>, <a class="el" href="_non_maxima_suppression_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::non_maxima_suppression()</a>, <a class="el" href="_validation_8h_source.xhtml#l00381">arm_compute::test::validation::validate()</a>, and <a class="el" href="_validation_8h_source.xhtml#l00456">arm_compute::test::validation::validate_wrap()</a>.</p>

</div>
</div>
<a id="aa18932675cbb5eb9c9dbf8ff4d7106c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa18932675cbb5eb9c9dbf8ff4d7106c7">&#9670;&nbsp;</a></span>join() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::test::join </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>first</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>last</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>separator</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to concatenate multiple strings. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">first</td><td><a class="el" href="classarm__compute_1_1_iterator.xhtml" title="Iterator updated by execute_window_loop for each window element.">Iterator</a> pointing to the first element to be concatenated. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">last</td><td><a class="el" href="classarm__compute_1_1_iterator.xhtml" title="Iterator updated by execute_window_loop for each window element.">Iterator</a> pointing behind the last element to be concatenated. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">separator</td><td>String used to join the elements.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String containing all elements joined by <code>separator</code>. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2framework_2_utils_8h_source.xhtml#l00093">93</a> of file <a class="el" href="tests_2framework_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;{</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="accumulate_8cl.xhtml#a00e540076dd545ad59ac7482f8cdf514">std::accumulate</a>(std::next(first), last, *first, [&amp;separator](<span class="keyword">const</span> std::string &amp; base, <span class="keyword">const</span> std::string &amp; suffix)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordflow">return</span> base + separator + suffix;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    });</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;}</div><div class="ttc" id="accumulate_8cl_xhtml_a00e540076dd545ad59ac7482f8cdf514"><div class="ttname"><a href="accumulate_8cl.xhtml#a00e540076dd545ad59ac7482f8cdf514">accumulate</a></div><div class="ttdeci">__kernel void accumulate(__global uchar *input_ptr, uint input_stride_x, uint input_step_x, uint input_stride_y, uint input_step_y, uint input_offset_first_element_in_bytes, __global uchar *accu_ptr, uint accu_stride_x, uint accu_step_x, uint accu_stride_y, uint accu_step_y, uint accu_offset_first_element_in_bytes)</div><div class="ttdoc">This function accumulates an input image into output image.</div><div class="ttdef"><b>Definition:</b> <a href="accumulate_8cl_source.xhtml#l00041">accumulate.cl:41</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="accumulate_8cl_source.xhtml#l00041">accumulate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="tests_2framework_2_utils_8h_source.xhtml#l00136">join()</a>, and <a class="el" href="_j_s_o_n_printer_8cpp_source.xhtml#l00172">JSONPrinter::print_measurements()</a>.</p>

</div>
</div>
<a id="a898a0423aace06af0f3a18a26a972a1a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a898a0423aace06af0f3a18a26a972a1a">&#9670;&nbsp;</a></span>join() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::test::join </td>
          <td>(</td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>first</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>last</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>separator</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">UnaryOp &amp;&amp;&#160;</td>
          <td class="paramname"><em>op</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to concatenate multiple values. </p>
<p>All values are converted to std::string using the provided operation before being joined.</p>
<p>The signature of op has to be equivalent to std::string op(const T::value_type &amp;val).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">first</td><td><a class="el" href="classarm__compute_1_1_iterator.xhtml" title="Iterator updated by execute_window_loop for each window element.">Iterator</a> pointing to the first element to be concatenated. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">last</td><td><a class="el" href="classarm__compute_1_1_iterator.xhtml" title="Iterator updated by execute_window_loop for each window element.">Iterator</a> pointing behind the last element to be concatenated. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">separator</td><td>String used to join the elements. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">op</td><td>Conversion function.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String containing all elements joined by <code>separator</code>. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2framework_2_utils_8h_source.xhtml#l00117">117</a> of file <a class="el" href="tests_2framework_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;{</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="accumulate_8cl.xhtml#a00e540076dd545ad59ac7482f8cdf514">std::accumulate</a>(std::next(first), last, op(*first), [&amp;separator, &amp;op](<span class="keyword">const</span> std::string &amp; base, <span class="keyword">const</span> <span class="keyword">typename</span> T::value_type &amp; suffix)</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keywordflow">return</span> base + separator + op(suffix);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    });</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;}</div><div class="ttc" id="accumulate_8cl_xhtml_a00e540076dd545ad59ac7482f8cdf514"><div class="ttname"><a href="accumulate_8cl.xhtml#a00e540076dd545ad59ac7482f8cdf514">accumulate</a></div><div class="ttdeci">__kernel void accumulate(__global uchar *input_ptr, uint input_stride_x, uint input_step_x, uint input_stride_y, uint input_step_y, uint input_offset_first_element_in_bytes, __global uchar *accu_ptr, uint accu_stride_x, uint accu_step_x, uint accu_stride_y, uint accu_step_y, uint accu_offset_first_element_in_bytes)</div><div class="ttdoc">This function accumulates an input image into output image.</div><div class="ttdef"><b>Definition:</b> <a href="accumulate_8cl_source.xhtml#l00041">accumulate.cl:41</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="accumulate_8cl_source.xhtml#l00041">accumulate()</a>.</p>

</div>
</div>
<a id="a69835710fc772315f4e65ce156034530"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69835710fc772315f4e65ce156034530">&#9670;&nbsp;</a></span>join() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::test::join </td>
          <td>(</td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>first</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>last</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>separator</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to concatenate multiple values. </p>
<p>All values are converted to std::string using std::to_string before being joined.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">first</td><td><a class="el" href="classarm__compute_1_1_iterator.xhtml" title="Iterator updated by execute_window_loop for each window element.">Iterator</a> pointing to the first element to be concatenated. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">last</td><td><a class="el" href="classarm__compute_1_1_iterator.xhtml" title="Iterator updated by execute_window_loop for each window element.">Iterator</a> pointing behind the last element to be concatenated. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">separator</td><td>String used to join the elements.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String containing all elements joined by <code>separator</code>. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2framework_2_utils_8h_source.xhtml#l00136">136</a> of file <a class="el" href="tests_2framework_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;{</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test.xhtml#a69835710fc772315f4e65ce156034530">join</a>(std::forward&lt;T&gt;(first), std::forward&lt;T&gt;(last), separator, <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#ace86dc6f3dfa4f3c256b3999ab250c0a">support::cpp11::to_string</a>);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_ace86dc6f3dfa4f3c256b3999ab250c0a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#ace86dc6f3dfa4f3c256b3999ab250c0a">arm_compute::test::framework::to_string</a></div><div class="ttdeci">std::string to_string(DatasetMode mode)</div><div class="ttdef"><b>Definition:</b> <a href="_dataset_modes_8h_source.xhtml#l00100">DatasetModes.h:100</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a69835710fc772315f4e65ce156034530"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a69835710fc772315f4e65ce156034530">arm_compute::test::join</a></div><div class="ttdeci">std::string join(T &amp;&amp;first, T &amp;&amp;last, const std::string &amp;separator)</div><div class="ttdoc">Helper function to concatenate multiple values.</div><div class="ttdef"><b>Definition:</b> <a href="tests_2framework_2_utils_8h_source.xhtml#l00136">Utils.h:136</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="tests_2framework_2_utils_8h_source.xhtml#l00093">join()</a>, and <a class="el" href="_toolchain_support_8h_source.xhtml#l00242">arm_compute::support::cpp11::to_string()</a>.</p>

</div>
</div>
<a id="ab7a4db66b02e6e176def3cab5ace07d9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab7a4db66b02e6e176def3cab5ace07d9">&#9670;&nbsp;</a></span>print_tensor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::print_tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_i_o_format_info.xhtml">IOFormatInfo</a>&#160;</td>
          <td class="paramname"><em>info</em> = <code><a class="el" href="structarm__compute_1_1_i_o_format_info.xhtml">IOFormatInfo</a>(<a class="el" href="structarm__compute_1_1_i_o_format_info.xhtml#ae283722f31a4c59039f9abd44f10dbd0abbd47109890259c0127154db1af26c75">IOFormatInfo::PrintRegion::Full</a>)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Helper to print tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> to print. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> name. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Format information.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Empty <a class="el" href="classarm__compute_1_1_g_c_tensor.xhtml">GCTensor</a> with the specified shape and data type. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_g_l_e_s___c_o_m_p_u_t_e_2_helper_8h_source.xhtml#l00081">81</a> of file <a class="el" href="_g_l_e_s___c_o_m_p_u_t_e_2_helper_8h_source.xhtml">Helper.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;{</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    std::ostringstream s;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    IGCTensor         &amp;t = dynamic_cast&lt;IGCTensor &amp;&gt;(tensor);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    t.map();</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    t.print(s, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">info</a>);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    std::cout &lt;&lt; name &lt;&lt; <span class="stringliteral">&quot;:&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    std::cout &lt;&lt; s.str().c_str();</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    t.unmap();</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f4125dba5283887b34f889b1c615c0c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f4125dba5283887b34f889b1c615c0c">arm_compute::test::validation::info</a></div><div class="ttdeci">info</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">ConvolutionLayer.cpp:174</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="validation_2_c_l_2_convolution_layer_8cpp_source.xhtml#l00174">arm_compute::test::validation::info</a>, <a class="el" href="_i_g_c_tensor_8cpp_source.xhtml#l00033">IGCTensor::map()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#ade74189c92e70baa2848986c10dbe7ef">ITensor::print()</a>, and <a class="el" href="_i_g_c_tensor_8cpp_source.xhtml#l00038">IGCTensor::unmap()</a>.</p>

</div>
</div>
<a id="ad93bb148a873f19ad7692756e59617f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad93bb148a873f19ad7692756e59617f4">&#9670;&nbsp;</a></span>round_half_even()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::test::round_half_even </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>epsilon</em> = <code>std::numeric_limits&lt;T&gt;::<a class="el" href="_asymm_helpers_8cpp.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Round floating-point value with half value rounding to nearest even. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>floating-point value to be rounded. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">epsilon</td><td>precision.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Floating-point value of rounded <code>value</code>. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00084">84</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;{</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    T positive_value = std::abs(value);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    T ipart          = 0;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    std::modf(positive_value, &amp;ipart);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="comment">// If &#39;value&#39; is exactly halfway between two integers</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">if</span>(std::abs(positive_value - (ipart + 0.5f)) &lt; <a class="code" href="_asymm_helpers_8cpp.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>)</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="comment">// If &#39;ipart&#39; is even then return &#39;ipart&#39;</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordflow">if</span>(std::fmod(ipart, 2.f) &lt; <a class="code" href="_asymm_helpers_8cpp.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>)</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a28096f8372c0ad762864c790917375e2">support::cpp11::copysign</a>(ipart, value);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="comment">// Else return the nearest even integer</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a28096f8372c0ad762864c790917375e2">support::cpp11::copysign</a>(std::ceil(ipart + 0.5f), value);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="comment">// Otherwise use the usual round to closest</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a28096f8372c0ad762864c790917375e2">support::cpp11::copysign</a>(<a class="code" href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">support::cpp11::round</a>(positive_value), value);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a28096f8372c0ad762864c790917375e2"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a28096f8372c0ad762864c790917375e2">arm_compute::support::cpp11::copysign</a></div><div class="ttdeci">T copysign(T x, T y)</div><div class="ttdoc">Composes a floating point value with the magnitude of x and the sign of y.</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00319">ToolchainSupport.h:319</a></div></div>
<div class="ttc" id="_asymm_helpers_8cpp_xhtml_a552dc3787d7ea1675f3e4e8993501d58"><div class="ttname"><a href="_asymm_helpers_8cpp.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a></div><div class="ttdeci">constexpr float epsilon</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00033">AsymmHelpers.cpp:33</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aaae2b6b1c3f4404121346a4c27b22647"><div class="ttname"><a href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">arm_compute::round</a></div><div class="ttdeci">int round(float x, RoundingPolicy rounding_policy)</div><div class="ttdoc">Return a rounded value of x.</div><div class="ttdef"><b>Definition:</b> <a href="_rounding_8cpp_source.xhtml#l00035">Rounding.cpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af4bcf30f8c56f547f66d61c7c5ae01db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af4bcf30f8c56f547f66d61c7c5ae01db">&#9670;&nbsp;</a></span>round_half_up()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::test::round_half_up </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Round floating-point value with half value rounding to positive infinity. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>floating-point value to be rounded.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Floating-point value of rounded <code>value</code>. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00071">71</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;{</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">return</span> std::floor(value + 0.5f);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a4965b2f6821e0cf0afee738158bd8377"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4965b2f6821e0cf0afee738158bd8377">&#9670;&nbsp;</a></span>saturate_cast()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::test::saturate_cast </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Saturate a value of type T against the numeric limits of type U. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>Value to be saturated.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>saturated value. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00405">405</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;{</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="keywordflow">if</span>(val &gt; static_cast&lt;T&gt;(std::numeric_limits&lt;U&gt;::max()))</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    {</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        val = static_cast&lt;T&gt;(std::numeric_limits&lt;U&gt;::max());</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    }</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="keywordflow">if</span>(val &lt; static_cast&lt;T&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;U&gt;::lowest</a>()))</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    {</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        val = static_cast&lt;T&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;U&gt;::lowest</a>());</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    }</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="keywordflow">return</span> val;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a73e352c61baaf9c1178da2d30105b04e"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">arm_compute::support::cpp11::lowest</a></div><div class="ttdeci">T lowest()</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00384">ToolchainSupport.h:384</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_toolchain_support_8h_source.xhtml#l00384">arm_compute::support::cpp11::lowest()</a>.</p>

</div>
</div>
<a id="a8103df0e6c416f55f40106aa49072b42"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8103df0e6c416f55f40106aa49072b42">&#9670;&nbsp;</a></span>shape_to_valid_region()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> arm_compute::test::shape_to_valid_region </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>a_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>border_undefined</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>&#160;</td>
          <td class="paramname"><em>border_size</em> = <code><a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>(0)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create a valid region based on tensor shape, border mode and border size. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a_shape</td><td>Shape used as size of the valid region. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">border_undefined</td><td>(Optional) Boolean indicating if the border mode is undefined. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">border_size</td><td>(Optional) Border size used to specify the region to exclude.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A valid region starting at (0, 0, ...) with size of <code>shape</code> if <code>border_undefined</code> is false; otherwise return A valid region starting at (<code>border_size.left</code>, <code>border_size.top</code>, ...) with reduced size of <code>shape</code>. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00221">221</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;{</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    ValidRegion <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">valid_region</a>{ Coordinates(), a_shape };</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    Coordinates &amp;anchor = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    TensorShape &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordflow">if</span>(border_undefined)</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    {</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.num_dimensions() &lt; 2);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        anchor.set(0, border_size.left);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        anchor.set(1, border_size.top);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> valid_shape_x = std::max(0, static_cast&lt;int&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.x()) - static_cast&lt;int&gt;(border_size.left) - static_cast&lt;int&gt;(border_size.right));</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> valid_shape_y = std::max(0, static_cast&lt;int&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.y()) - static_cast&lt;int&gt;(border_size.top) - static_cast&lt;int&gt;(border_size.bottom));</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.set(0, valid_shape_x);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.set(1, valid_shape_y);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    }</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">valid_region</a>;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00097">AbsoluteDifference.cpp:97</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml_a1fcd64682b37ed3c2098d0094ce788d8"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">arm_compute::ValidRegion::shape</a></div><div class="ttdeci">TensorShape shape</div><div class="ttdoc">Shape of the valid region.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00247">Types.h:247</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00337">Error.h:337</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7819bcbbf45c2e7c1396a137dce54422"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">arm_compute::test::validation::valid_region</a></div><div class="ttdeci">const ValidRegion valid_region</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00109">AbsoluteDifference.cpp:109</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml_a55a69b397082accd94221dd10b722cf7"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">arm_compute::ValidRegion::anchor</a></div><div class="ttdeci">Coordinates anchor</div><div class="ttdoc">Anchor for the start of the valid region.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00246">Types.h:246</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00246">ValidRegion::anchor</a>, <a class="el" href="_error_8h_source.xhtml#l00337">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00074">Dimensions&lt; T &gt;::set()</a>, <a class="el" href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00097">arm_compute::test::validation::shape</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00247">ValidRegion::shape</a>, and <a class="el" href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00109">arm_compute::test::validation::valid_region</a>.</p>

<p class="reference">Referenced by <a class="el" href="tests_2validation_2_c_l_2fft_8cpp_source.xhtml#l00074">arm_compute::test::validation::DATA_TEST_CASE()</a>, <a class="el" href="validation_2reference_2_fast_corners_8cpp_source.xhtml#l00152">arm_compute::test::validation::reference::fast_corners()</a>, <a class="el" href="validation_2_c_l_2_median3x3_8cpp_source.xhtml#l00091">arm_compute::test::validation::FIXTURE_DATA_TEST_CASE()</a>, <a class="el" href="reference_2_non_linear_filter_8cpp_source.xhtml#l00036">arm_compute::test::validation::reference::non_linear_filter()</a>, <a class="el" href="_non_maxima_suppression_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::non_maxima_suppression()</a>, <a class="el" href="validation_2reference_2_optical_flow_8cpp_source.xhtml#l00246">arm_compute::test::validation::reference::optical_flow()</a>, <a class="el" href="_validation_8h_source.xhtml#l00367">arm_compute::test::validation::validate()</a>, and <a class="el" href="_validation_8h_source.xhtml#l00374">arm_compute::test::validation::validate_wrap()</a>.</p>

</div>
</div>
<a id="a1177ef8061a8b46b5d79c1af93c12de1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1177ef8061a8b46b5d79c1af93c12de1">&#9670;&nbsp;</a></span>shape_to_valid_region_gaussian_pyramid_half()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> arm_compute::test::shape_to_valid_region_gaussian_pyramid_half </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>a_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;&#160;</td>
          <td class="paramname"><em>a_valid_region</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>border_undefined</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create a valid region for Gaussian <a class="el" href="classarm__compute_1_1_pyramid.xhtml" title="Basic implementation of the pyramid interface.">Pyramid</a> Half based on tensor shape and valid region at level "i - 1" and border mode. </p>
<dl class="section note"><dt>Note</dt><dd>The border size is 2 in case of Gaussian <a class="el" href="classarm__compute_1_1_pyramid.xhtml" title="Basic implementation of the pyramid interface.">Pyramid</a> Half</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a_shape</td><td>Shape used at level "i - 1" of Gaussian <a class="el" href="classarm__compute_1_1_pyramid.xhtml" title="Basic implementation of the pyramid interface.">Pyramid</a> Half </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">a_valid_region</td><td>Valid region used at level "i - 1" of Gaussian <a class="el" href="classarm__compute_1_1_pyramid.xhtml" title="Basic implementation of the pyramid interface.">Pyramid</a> Half </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">border_undefined</td><td>(Optional) Boolean indicating if the border mode is undefined.</td></tr>
  </table>
  </dd>
</dl>
<p>return The valid region for the level "i" of Gaussian <a class="el" href="classarm__compute_1_1_pyramid.xhtml" title="Basic implementation of the pyramid interface.">Pyramid</a> Half </p>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00255">255</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;{</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    constexpr <span class="keywordtype">int</span> border_size = 2;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    ValidRegion <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">valid_region</a>{ Coordinates(), a_shape };</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    Coordinates &amp;anchor = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    TensorShape &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="comment">// Compute tensor shape for level &quot;i&quot; of Gaussian Pyramid Half</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="comment">// dst_width  = (src_width + 1) * 0.5f</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="comment">// dst_height = (src_height + 1) * 0.5f</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.set(0, (a_shape[0] + 1) * 0.5f);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.set(1, (a_shape[1] + 1) * 0.5f);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keywordflow">if</span>(border_undefined)</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    {</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.num_dimensions() &lt; 2);</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        <span class="comment">// Compute the left and top invalid borders</span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        <span class="keywordtype">float</span> invalid_border_left = static_cast&lt;float&gt;(a_valid_region.anchor.x() + border_size) / 2.0f;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <span class="keywordtype">float</span> invalid_border_top  = static_cast&lt;float&gt;(a_valid_region.anchor.y() + border_size) / 2.0f;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="comment">// For the new anchor point we can have 2 cases:</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        <span class="comment">// 1) If the width/height of the tensor shape is odd, we have to take the ceil value of (a_valid_region.anchor.x() + border_size) / 2.0f or (a_valid_region.anchor.y() + border_size / 2.0f</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        <span class="comment">// 2) If the width/height of the tensor shape is even, we have to take the floor value of (a_valid_region.anchor.x() + border_size) / 2.0f or (a_valid_region.anchor.y() + border_size) / 2.0f</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        <span class="comment">// In this manner we should be able to propagate correctly the valid region along all levels of the pyramid</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        invalid_border_left = (a_shape[0] % 2) ? std::ceil(invalid_border_left) : std::floor(invalid_border_left);</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        invalid_border_top  = (a_shape[1] % 2) ? std::ceil(invalid_border_top) : std::floor(invalid_border_top);</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        <span class="comment">// Set the anchor point</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        anchor.set(0, static_cast&lt;int&gt;(invalid_border_left));</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        anchor.set(1, static_cast&lt;int&gt;(invalid_border_top));</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        <span class="comment">// Compute shape</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        <span class="comment">// Calculate the right and bottom invalid borders at the previous level of the pyramid</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> prev_invalid_border_right  = static_cast&lt;float&gt;(a_shape[0] - (a_valid_region.anchor.x() + a_valid_region.shape[0]));</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> prev_invalid_border_bottom = static_cast&lt;float&gt;(a_shape[1] - (a_valid_region.anchor.y() + a_valid_region.shape[1]));</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <span class="comment">// Calculate the right and bottom invalid borders at the current level of the pyramid</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> invalid_border_right  = std::ceil((prev_invalid_border_right + static_cast&lt;float&gt;(border_size)) / 2.0f);</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> invalid_border_bottom = std::ceil((prev_invalid_border_bottom + static_cast&lt;float&gt;(border_size)) / 2.0f);</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> valid_shape_x = std::max(0, static_cast&lt;int&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.x()) - static_cast&lt;int&gt;(invalid_border_left) - static_cast&lt;int&gt;(invalid_border_right));</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> valid_shape_y = std::max(0, static_cast&lt;int&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.y()) - static_cast&lt;int&gt;(invalid_border_top) - static_cast&lt;int&gt;(invalid_border_bottom));</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.set(0, valid_shape_x);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.set(1, valid_shape_y);</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    }</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">valid_region</a>;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00097">AbsoluteDifference.cpp:97</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml_a1fcd64682b37ed3c2098d0094ce788d8"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">arm_compute::ValidRegion::shape</a></div><div class="ttdeci">TensorShape shape</div><div class="ttdoc">Shape of the valid region.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00247">Types.h:247</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00337">Error.h:337</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7819bcbbf45c2e7c1396a137dce54422"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">arm_compute::test::validation::valid_region</a></div><div class="ttdeci">const ValidRegion valid_region</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00109">AbsoluteDifference.cpp:109</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml_a55a69b397082accd94221dd10b722cf7"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">arm_compute::ValidRegion::anchor</a></div><div class="ttdeci">Coordinates anchor</div><div class="ttdoc">Anchor for the start of the valid region.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00246">Types.h:246</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00246">ValidRegion::anchor</a>, <a class="el" href="_error_8h_source.xhtml#l00337">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00074">Dimensions&lt; T &gt;::set()</a>, <a class="el" href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00097">arm_compute::test::validation::shape</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00247">ValidRegion::shape</a>, <a class="el" href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00109">arm_compute::test::validation::valid_region</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00081">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00086">Dimensions&lt; T &gt;::y()</a>.</p>

<p class="reference">Referenced by <a class="el" href="tests_2_utils_8h_source.xhtml#l00318">shape_to_valid_region_laplacian_pyramid()</a>.</p>

</div>
</div>
<a id="a6dc99a4de397ceab182b6fd46fa55f47"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6dc99a4de397ceab182b6fd46fa55f47">&#9670;&nbsp;</a></span>shape_to_valid_region_laplacian_pyramid()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> arm_compute::test::shape_to_valid_region_laplacian_pyramid </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>a_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;&#160;</td>
          <td class="paramname"><em>a_valid_region</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>border_undefined</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create a valid region for Laplacian <a class="el" href="classarm__compute_1_1_pyramid.xhtml" title="Basic implementation of the pyramid interface.">Pyramid</a> based on tensor shape and valid region at level "i - 1" and border mode. </p>
<dl class="section note"><dt>Note</dt><dd>The border size is 2 in case of Laplacian <a class="el" href="classarm__compute_1_1_pyramid.xhtml" title="Basic implementation of the pyramid interface.">Pyramid</a></dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a_shape</td><td>Shape used at level "i - 1" of Laplacian <a class="el" href="classarm__compute_1_1_pyramid.xhtml" title="Basic implementation of the pyramid interface.">Pyramid</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">a_valid_region</td><td>Valid region used at level "i - 1" of Laplacian <a class="el" href="classarm__compute_1_1_pyramid.xhtml" title="Basic implementation of the pyramid interface.">Pyramid</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">border_undefined</td><td>(Optional) Boolean indicating if the border mode is undefined.</td></tr>
  </table>
  </dd>
</dl>
<p>return The valid region for the level "i" of Laplacian <a class="el" href="classarm__compute_1_1_pyramid.xhtml" title="Basic implementation of the pyramid interface.">Pyramid</a> </p>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00318">318</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;{</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    ValidRegion <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">valid_region</a> = <a class="code" href="namespacearm__compute_1_1test.xhtml#a1177ef8061a8b46b5d79c1af93c12de1">shape_to_valid_region_gaussian_pyramid_half</a>(a_shape, a_valid_region, border_undefined);</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keywordflow">if</span>(border_undefined)</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    {</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        <span class="keyword">const</span> BorderSize gaussian5x5_border(2);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        <span class="keyword">auto</span> border_left   = static_cast&lt;int&gt;(gaussian5x5_border.left);</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        <span class="keyword">auto</span> border_right  = static_cast&lt;int&gt;(gaussian5x5_border.right);</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        <span class="keyword">auto</span> border_top    = static_cast&lt;int&gt;(gaussian5x5_border.top);</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        <span class="keyword">auto</span> border_bottom = static_cast&lt;int&gt;(gaussian5x5_border.bottom);</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a982730e6f0da5f9490f59bc5f6bb3f27">set</a>(0, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>[0] + border_left);</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a982730e6f0da5f9490f59bc5f6bb3f27">set</a>(1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>[1] + border_top);</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a9c54fb6cea3557692fe7c00c40bb40ad">set</a>(0, std::max(0, static_cast&lt;int&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>[0]) - border_right - border_left));</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a9c54fb6cea3557692fe7c00c40bb40ad">set</a>(1, std::max(0, static_cast&lt;int&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">valid_region</a>.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>[1]) - border_top - border_bottom));</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    }</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">valid_region</a>;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;}</div><div class="ttc" id="structarm__compute_1_1_valid_region_xhtml_a1fcd64682b37ed3c2098d0094ce788d8"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">arm_compute::ValidRegion::shape</a></div><div class="ttdeci">TensorShape shape</div><div class="ttdoc">Shape of the valid region.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00247">Types.h:247</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a1177ef8061a8b46b5d79c1af93c12de1"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a1177ef8061a8b46b5d79c1af93c12de1">arm_compute::test::shape_to_valid_region_gaussian_pyramid_half</a></div><div class="ttdeci">ValidRegion shape_to_valid_region_gaussian_pyramid_half(const TensorShape &amp;a_shape, const ValidRegion &amp;a_valid_region, bool border_undefined=false)</div><div class="ttdoc">Create a valid region for Gaussian Pyramid Half based on tensor shape and valid region at level &quot;i - ...</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00255">Utils.h:255</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a982730e6f0da5f9490f59bc5f6bb3f27"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a982730e6f0da5f9490f59bc5f6bb3f27">arm_compute::Dimensions::set</a></div><div class="ttdeci">void set(size_t dimension, T value)</div><div class="ttdoc">Accessor to set the value of one of the dimensions.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00074">Dimensions.h:74</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7819bcbbf45c2e7c1396a137dce54422"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7819bcbbf45c2e7c1396a137dce54422">arm_compute::test::validation::valid_region</a></div><div class="ttdeci">const ValidRegion valid_region</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00109">AbsoluteDifference.cpp:109</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml_a9c54fb6cea3557692fe7c00c40bb40ad"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#a9c54fb6cea3557692fe7c00c40bb40ad">arm_compute::TensorShape::set</a></div><div class="ttdeci">TensorShape &amp; set(size_t dimension, size_t value, bool apply_dim_correction=true)</div><div class="ttdoc">Accessor to set the value of one of the dimensions.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00078">TensorShape.h:78</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml_a55a69b397082accd94221dd10b722cf7"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">arm_compute::ValidRegion::anchor</a></div><div class="ttdeci">Coordinates anchor</div><div class="ttdoc">Anchor for the start of the valid region.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00246">Types.h:246</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00246">ValidRegion::anchor</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00341">BorderSize::bottom</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00342">BorderSize::left</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00340">BorderSize::right</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00074">Dimensions&lt; T &gt;::set()</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00078">TensorShape::set()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00247">ValidRegion::shape</a>, <a class="el" href="tests_2_utils_8h_source.xhtml#l00255">shape_to_valid_region_gaussian_pyramid_half()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00339">BorderSize::top</a>, and <a class="el" href="_c_l_2_absolute_difference_8cpp_source.xhtml#l00109">arm_compute::test::validation::valid_region</a>.</p>

</div>
</div>
<a id="a1e6934e95738573214c2ce1d6648d116"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e6934e95738573214c2ce1d6648d116">&#9670;&nbsp;</a></span>store_value_with_data_type()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::store_value_with_data_type </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Write the value after casting the pointer according to <code>data_type</code>. </p>
<dl class="section warning"><dt>Warning</dt><dd>The type of the value must match the specified data type.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">ptr</td><td>Pointer to memory where the <code>value</code> will be written. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value that will be written. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Data type that will be written. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00349">349</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;{</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <span class="keywordflow">switch</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>)</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    {</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        <span class="keywordflow">case</span> DataType::U8:</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8:</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            *reinterpret_cast&lt;uint8_t *&gt;(ptr) = value;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        <span class="keywordflow">case</span> DataType::S8:</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8:</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8_PER_CHANNEL:</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            *reinterpret_cast&lt;int8_t *&gt;(ptr) = value;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        <span class="keywordflow">case</span> DataType::U16:</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;            *reinterpret_cast&lt;uint16_t *&gt;(ptr) = value;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        <span class="keywordflow">case</span> DataType::S16:</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM16:</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            *reinterpret_cast&lt;int16_t *&gt;(ptr) = value;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        <span class="keywordflow">case</span> DataType::U32:</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;            *reinterpret_cast&lt;uint32_t *&gt;(ptr) = value;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        <span class="keywordflow">case</span> DataType::S32:</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;            *reinterpret_cast&lt;int32_t *&gt;(ptr) = value;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        <span class="keywordflow">case</span> DataType::U64:</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;            *reinterpret_cast&lt;uint64_t *&gt;(ptr) = value;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        <span class="keywordflow">case</span> DataType::S64:</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;            *reinterpret_cast&lt;int64_t *&gt;(ptr) = value;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        <span class="keywordflow">case</span> DataType::F16:</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            *reinterpret_cast&lt;half *&gt;(ptr) = value;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        <span class="keywordflow">case</span> DataType::F32:</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;            *reinterpret_cast&lt;float *&gt;(ptr) = value;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        <span class="keywordflow">case</span> DataType::F64:</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;            *reinterpret_cast&lt;double *&gt;(ptr) = value;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        <span class="keywordflow">case</span> DataType::SIZET:</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            *reinterpret_cast&lt;size_t *&gt;(ptr) = value;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    }</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a05b19c75afe9c24200a62b9724734bbd"><div class="ttname"><a href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00261">Error.h:261</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_arithmetic_addition_8cpp_source.xhtml#l00135">ArithmeticAddition.cpp:135</a></div></div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_assets_library_8h_source.xhtml#l00488">AssetsLibrary::fill_boxes()</a>.</p>

</div>
</div>
<a id="a28edc8880596d14c099f3c2509efc8b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a28edc8880596d14c099f3c2509efc8b3">&#9670;&nbsp;</a></span>swap()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::swap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; U &gt; &amp;&#160;</td>
          <td class="paramname"><em>tensor1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor</a>&lt; U &gt; &amp;&#160;</td>
          <td class="paramname"><em>tensor2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">tensor1</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> to be swapped. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">tensor2</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> to be swapped. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_simple_tensor_8h_source.xhtml#l00443">443</a> of file <a class="el" href="_simple_tensor_8h_source.xhtml">SimpleTensor.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;{</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <span class="comment">// Use unqualified call to swap to enable ADL. But make std::swap available</span></div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <span class="comment">// as backup.</span></div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <span class="keyword">using</span> <a class="code" href="namespacearm__compute_1_1test.xhtml#a28edc8880596d14c099f3c2509efc8b3">std::swap</a>;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <a class="code" href="namespacearm__compute_1_1test.xhtml#a28edc8880596d14c099f3c2509efc8b3">swap</a>(tensor1._shape, tensor2._shape);</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <a class="code" href="namespacearm__compute_1_1test.xhtml#a28edc8880596d14c099f3c2509efc8b3">swap</a>(tensor1._format, tensor2._format);</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <a class="code" href="namespacearm__compute_1_1test.xhtml#a28edc8880596d14c099f3c2509efc8b3">swap</a>(tensor1._data_type, tensor2._data_type);</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <a class="code" href="namespacearm__compute_1_1test.xhtml#a28edc8880596d14c099f3c2509efc8b3">swap</a>(tensor1._num_channels, tensor2._num_channels);</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <a class="code" href="namespacearm__compute_1_1test.xhtml#a28edc8880596d14c099f3c2509efc8b3">swap</a>(tensor1._quantization_info, tensor2._quantization_info);</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    <a class="code" href="namespacearm__compute_1_1test.xhtml#a28edc8880596d14c099f3c2509efc8b3">swap</a>(tensor1._buffer, tensor2._buffer);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_xhtml_a28edc8880596d14c099f3c2509efc8b3"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a28edc8880596d14c099f3c2509efc8b3">arm_compute::test::swap</a></div><div class="ttdeci">void swap(SimpleTensor&lt; U &gt; &amp;tensor1, SimpleTensor&lt; U &gt; &amp;tensor2)</div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00443">SimpleTensor.h:443</a></div></div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_simple_tensor_8h_source.xhtml#l00301">SimpleTensor&lt; uint8_t &gt;::operator=()</a>.</p>

</div>
</div>
<a id="a5967bb62a612be6b300aa96049a2166a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5967bb62a612be6b300aa96049a2166a">&#9670;&nbsp;</a></span>sync_if_necessary()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::sync_if_necessary </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sync if necessary. </p>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00776">776</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;{</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;<span class="preprocessor">#ifdef ARM_COMPUTE_CL</span></div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#a5f49decb4b0a74d5361686ab45db8961">opencl_is_available</a>() &amp;&amp; std::is_same&lt;<span class="keyword">typename</span> std::decay&lt;TensorType&gt;::type, <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">arm_compute::CLTensor</a>&gt;::value)</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;    {</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;        CLScheduler::get().sync();</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    }</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_CL */</span><span class="preprocessor"></span></div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a5f49decb4b0a74d5361686ab45db8961"><div class="ttname"><a href="namespacearm__compute.xhtml#a5f49decb4b0a74d5361686ab45db8961">arm_compute::opencl_is_available</a></div><div class="ttdeci">bool opencl_is_available()</div><div class="ttdoc">Check if OpenCL is available.</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8cpp_source.xhtml#l00136">OpenCL.cpp:136</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml">arm_compute::CLTensor</a></div><div class="ttdoc">Basic implementation of the OpenCL tensor interface.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_8h_source.xhtml#l00040">CLTensor.h:40</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8cpp_source.xhtml#l00136">arm_compute::opencl_is_available()</a>.</p>

</div>
</div>
<a id="a619736e19838c20cac8f668ab13aae37"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a619736e19838c20cac8f668ab13aae37">&#9670;&nbsp;</a></span>sync_tensor_if_necessary()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::sync_tensor_if_necessary </td>
          <td>(</td>
          <td class="paramtype">TensorType &amp;&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sync tensor if necessary. </p>
<dl class="section note"><dt>Note</dt><dd>: If the destination tensor not being used on OpenGL ES, GPU will optimize out the operation.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> to be sync. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00793">793</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;{</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;<span class="preprocessor">#ifdef ARM_COMPUTE_GC</span></div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#ad8ec10f67d9849be264c23c5329d9324">opengles31_is_available</a>() &amp;&amp; std::is_same&lt;<span class="keyword">typename</span> std::decay&lt;TensorType&gt;::type, <a class="code" href="classarm__compute_1_1_g_c_tensor.xhtml">arm_compute::GCTensor</a>&gt;::value)</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;    {</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;        <span class="comment">// Force sync the tensor by calling map and unmap.</span></div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;        IGCTensor &amp;t = dynamic_cast&lt;IGCTensor &amp;&gt;(tensor);</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;        t.map();</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;        t.unmap();</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;    }</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_GC */</span><span class="preprocessor"></span></div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_ad8ec10f67d9849be264c23c5329d9324"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ec10f67d9849be264c23c5329d9324">arm_compute::opengles31_is_available</a></div><div class="ttdeci">bool opengles31_is_available()</div><div class="ttdoc">Check if the OpenGL ES 3.1 API is available at runtime.</div><div class="ttdef"><b>Definition:</b> <a href="_open_g_l_e_s_8cpp_source.xhtml#l00160">OpenGLES.cpp:160</a></div></div>
<div class="ttc" id="classarm__compute_1_1_g_c_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_g_c_tensor.xhtml">arm_compute::GCTensor</a></div><div class="ttdoc">Interface for OpenGL ES tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_g_c_tensor_8h_source.xhtml#l00037">GCTensor.h:37</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_g_l_e_s_8cpp_source.xhtml#l00160">arm_compute::opengles31_is_available()</a>.</p>

</div>
</div>
<a id="a5b67cbf475b1e1d3bec9b0b937fdafac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5b67cbf475b1e1d3bec9b0b937fdafac">&#9670;&nbsp;</a></span>tolower()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::test::tolower </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>string</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert string to lower case. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">string</td><td>To be converted string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Lower case string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="tests_2framework_2_utils_8h_source.xhtml#l00147">147</a> of file <a class="el" href="tests_2framework_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;{</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    std::transform(<span class="keywordtype">string</span>.begin(), <span class="keywordtype">string</span>.end(), <span class="keywordtype">string</span>.begin(), [](<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> c)</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test.xhtml#a5b67cbf475b1e1d3bec9b0b937fdafac">std::tolower</a>(c);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    });</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordflow">return</span> string;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_xhtml_a5b67cbf475b1e1d3bec9b0b937fdafac"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a5b67cbf475b1e1d3bec9b0b937fdafac">arm_compute::test::tolower</a></div><div class="ttdeci">std::string tolower(std::string string)</div><div class="ttdoc">Convert string to lower case.</div><div class="ttdef"><b>Definition:</b> <a href="tests_2framework_2_utils_8h_source.xhtml#l00147">Utils.h:147</a></div></div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_dataset_modes_8cpp_source.xhtml#l00036">arm_compute::test::framework::dataset_mode_from_name()</a>, <a class="el" href="_instruments_8cpp_source.xhtml#l00037">arm_compute::test::framework::instrument_type_from_name()</a>, <a class="el" href="_printers_8cpp_source.xhtml#l00037">arm_compute::test::framework::log_format_from_name()</a>, and <a class="el" href="_exceptions_8cpp_source.xhtml#l00037">arm_compute::test::framework::log_level_from_name()</a>.</p>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="a71326f0909d77386e29b511e1990a11f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a71326f0909d77386e29b511e1990a11f">&#9670;&nbsp;</a></span>library</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1test_1_1_assets_library.xhtml">AssetsLibrary</a> &gt; library</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="main_8cpp_source.xhtml#l00075">75</a> of file <a class="el" href="main_8cpp_source.xhtml">main.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="reference_2_accumulate_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::accumulate()</a>, <a class="el" href="reference_2_accumulate_8cpp_source.xhtml#l00076">arm_compute::test::validation::reference::accumulate_squared()</a>, <a class="el" href="reference_2_accumulate_8cpp_source.xhtml#l00056">arm_compute::test::validation::reference::accumulate_weighted()</a>, <a class="el" href="tests_2validation_2_helpers_8cpp_source.xhtml#l00095">arm_compute::test::validation::canny_edge_parameters()</a>, <a class="el" href="_g_l_e_s___c_o_m_p_u_t_e_2_helper_8h_source.xhtml#l00061">create_tensor()</a>, <a class="el" href="validation_2_c_l_2_harris_corners_8cpp_source.xhtml#l00056">arm_compute::test::validation::DATA_TEST_CASE()</a>, <a class="el" href="tests_2validation_2_helpers_8h_source.xhtml#l00169">arm_compute::test::validation::fill_lookuptable()</a>, <a class="el" href="tests_2validation_2_helpers_8cpp_source.xhtml#l00035">arm_compute::test::validation::fill_mask_from_pattern()</a>, <a class="el" href="_n_e_o_n_2_helper_8h_source.xhtml#l00041">fill_tensors()</a>, <a class="el" href="tests_2validation_2reference_2_utils_8h_source.xhtml#l00126">arm_compute::test::validation::fill_warp_matrix()</a>, <a class="el" href="tests_2validation_2_helpers_8cpp_source.xhtml#l00077">arm_compute::test::validation::harris_corners_parameters()</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00062">CLSymbols::load()</a>, <a class="el" href="main_8cpp_source.xhtml#l00090">main()</a>, and <a class="el" href="tests_2validation_2_c_l_2_u_n_i_t_2_tensor_allocator_8cpp_source.xhtml#l00111">arm_compute::test::validation::TEST_CASE()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1test.xhtml">test</a></li>
    <li class="footer">Generated on Mon Sep 2 2019 11:47:40 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
